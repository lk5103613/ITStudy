
#		**********************************************************************************************************
#		Chapter 19. Filtering data
#		**********************************************************************************************************

title19 = 第十九章. 过滤数据
p19-1 = Hibernate 提供了一种创新的方式使用“可见性规则”来处理数据。一个Hibernate过滤器是全局的、命名的、可以带参数的过滤器，对于某个特定的Hibernate Session可以选择启用或者禁用某个过滤器。

#		**********************************************************************************************************
#		19.1. Hibernate filters
#		**********************************************************************************************************

title19-1 = 19.1. Hibernate过滤器
p19-1-1 = Hibernate 中可以对某个类或者集合使用预先定义的过滤器条件的功能。过滤条件相当于定义一个非常类似于类和各种集合上的Where属性的约束子句。然而这些过滤条件是可参数化的。应用程序可以在运行时决定是否启用给定的过滤器，以及使用什么样的参数值。过滤器的用法类似于数据库的视图，只不过他们是在应用程序中被参数化。
p19-1-2 = 使用 <code>@org.hibernate.annotations.FilterDef</code> 或者 <code>@org.hibernate.annotations.FilterDefs</code>来定义过滤器注解。 一个过滤器需要定义 <code>name()</code> 和一个 <code>parameters()</code>数组。这些参数可以让你在运行时调整过滤器的行为。每个参数通过<code>@ParamDef</code>定义，包括名字和类型。你也可以为一个<code>@FilterDef</code>设置<code>defaultCondition()</code>参数，当在每个<code>@Filter</code>中没有定义任何条件时，则使用该默认条件。<code>@FilterDef(s)</code> 可以定义在类级或者包级。
p19-1-3 = 现在我们需要定义用于实体或者集合加载的SQL过滤条件。<code>@Filter</code> 他们可以被放置在实体或者集合上使用。<code>@FilterName</code> 和 <code>@Filter</code>之间通过映射名链接。
p19-1-4 = 当集合使用关联表来表示时，也许你希望把过滤条件应用在关联表本身 或者 应用在目标实体表上。在目标实体想使用约束则只需要常规的<code>@Filter</code> 注解。然而，如果你想指定关联表，则使用<code>@FilterJoinTable</code> 注解。
p19-1-5 = 默认情况下，Hibernate会尝试确定在<code>@Filter</code> SQl条件语句中的所有需要注入的别名。在<code>@Filter</code>中设置deduceAliasInjectionPoints为false来控制别名的注射。注射点使用<code>@SqlFragmentAlias</code>注解标注，或者在SQL条件语句中使用'{'alias'}'来标注。
p19-1-6 = 为了可以明确的声明控制，当Hibernate认为一个ANSI SQL 保留关键字是一个列而不是一个正确的别名时deduceAliasInjectionPoints提供了一种方式。
p19-1-7 = 使用映射文件来定义过滤器的方式非常的类似。首先需要定义过滤器，然后才可以把过滤器关联到相关的元素相。在 <code>&lt;hibernate-mapping/&gt;</code>元素中使用<code>&lt;filter-def/&gt;</code>元素来定义过滤器:
p19-1-8 = 这个过滤器可以附加到一个类或者集合 (或者, 在这两个上面都添加或者同时绑定多个):
p19-1-9 = 在Session中的方法是: <code>enableFilter</code>(String filterName), <code>getEnabledFilter</code>(String filterName), 和 <code>disableFilter</code>(String filterName). 默认情况下,对于一个给定Session，过滤器是关闭的。过滤器必须通过调用 <code>Session.enableFilter()</code>方法来开启过滤器，这个方法返回一个过滤器的实例。如果你使用上面定义的简单过滤器，使用方式如下：
p19-1-10 = org.hibernate.Filter接口中的方法支持在Hibernate中常出现的方法链。
p19-1-11 = 下面是完整的示例，使用临时数据和记录数据有效期的模式：
p19-1-12 = 为了确保提供的是及时有效的数据，在检索employee数据之前在Session上开启过滤器：
p19-1-13 = 尽管在上面的HQL中我们仅仅显示的使用了一个薪水条件，但因为启用了过滤器，查询将仅返回那些目前雇佣关系处于有效期的，并且薪水高于一百万的雇员的数据。
p19-1-14 = 如果你想在使用外连接的同时使用过滤器，或者通过HQL或者load fetching,要注意条件表达式的方向。最安全的方式是使用左外连接。并且通常来说，先写参数，然后是操作符，最后写数据库字段的名字。
p19-1-15 = 定Filter定义之后，他可能被附加到多个实体或者集合，每个都有自己的条件。假若这些条件都是一样的，每次都要定义那就显得很繁琐。  <code>&lt;filter-def/&gt;</code> 被用来定义一个默认条件，他可能作为属性或者CDATA出现：
p19-1-16 = 当这个filter被附加到任何目的地，但是有没有指明明确的条件的时候，这个条件就会被使用。换句话说，你可以通过给filter附加特别的条件来重载默认条件。























