
#		**********************************************************************************************************
#		Chapter 2. Architecture
#		p1
#		important-content
#		note-content
#		caution-content
#		**********************************************************************************************************

title2 = Chapter 2. Architecture

#		**********************************************************************************************************
#		2.1. Overview
#		p2
#		important-content
#		note-content
#		caution-content
#		**********************************************************************************************************

title2-1 = 2.1. Overview
p2-1 = The diagram below provides a high-level view of the Hibernate architecture:
p2-2 = Unfortunately we cannot provide a detailed view of all possible runtime architectures. Hibernate is sufficiently flexible to be used in a number of ways in many, many architectures. We will, however, illustrate 2 specifically since they are extremes.

#		**********************************************************************************************************
#		2.1.1. Minimal architecture
#		p2
#		important-content
#		note-content
#		caution-content
#		**********************************************************************************************************

title2-1-1 = 2.1.1. Minimal architecture
p2-1-1-1 = The "minimal" architecture has the application manage its own JDBC connections and provide those connections to Hibernate; additionally the application manages transactions for itself. This approach uses a minimal subset of Hibernate APIs.

#		**********************************************************************************************************
#		2.1.2. Comprehensive architecture
#		p2
#		important-content
#		note-content
#		caution-content
#		**********************************************************************************************************

title2-1-2 = 2.1.2. Comprehensive architecture
p2-1-2-1 = The "comprehensive" architecture abstracts the application away from the underlying JDBC/JTA APIs and allows Hibernate to manage the details.

#		**********************************************************************************************************
#		2.1.3. Basic APIs
#		p2
#		important-content
#		note-content
#		caution-content
#		**********************************************************************************************************

title2-1-3 = 2.1.3. Basic APIs
p2-1-3-1 = Here are quick discussions about some of the API objects depicted in the preceding diagrams (you will see them again in more detail in later chapters).
subtitle2-1-3-1 = SessionFactory (org.hibernate.SessionFactory)
p2-1-3-2 = A thread-safe, immutable cache of compiled mappings for a single database. A factory for org.hibernate.Session instances. A client of org.hibernate.connection.ConnectionProvider. Optionally maintains a second level cache of data that is reusable between transactions at a process or cluster level.
subtitle2-1-3-2 = Session (org.hibernate.Session)
p2-1-3-3 = A single-threaded, short-lived object representing a conversation between the application and the persistent store. Wraps a JDBC java.sql.Connection. Factory for org.hibernate.Transaction. Maintains a first level cache of persistent the application's persistent objects and collections; this cache is used when navigating the object graph or looking up objects by identifier.
subtitle2-1-3-3 = Persistent objects and collections
p2-1-3-4 = Short-lived, single threaded objects containing persistent state and business function. These can be ordinary JavaBeans/POJOs. They are associated with exactly one org.hibernate.Session. Once the org.hibernate.Session is closed, they will be detached and free to use in any application layer (for example, directly as data transfer objects to and from presentation). <a href="#c11">Chapter 11, Working with objects</a> discusses transient, persistent and detached object states.
subtitle2-1-3-4 = Transient and detached objects and collections
p2-1-3-5 = Instances of persistent classes that are not currently associated with a org.hibernate.Session. They may have been instantiated by the application and not yet persisted, or they may have been instantiated by a closed org.hibernate.Session. <a href="#c11">Chapter 11, Working with objects</a> discusses transient, persistent and detached object states.
subtitle2-1-3-5 = Transaction (org.hibernate.Transaction)
p2-1-3-6 = (Optional) A single-threaded, short-lived object used by the application to specify atomic units of work. It abstracts the application from the underlying JDBC, JTA or CORBA transaction. A org.hibernate.Session might span several org.hibernate.Transactions in some cases. However, transaction demarcation, either using the underlying API or org.hibernate.Transaction, is never optional.
subtitle2-1-3-6 = ConnectionProvider (org.hibernate.connection.ConnectionProvider)
p2-1-3-7 = (Optional) A factory for, and pool of, JDBC connections. It abstracts the application from underlying javax.sql.DataSource or java.sql.DriverManager. It is not exposed to application, but it can be extended and/or implemented by the developer.
subtitle2-1-3-7 = TransactionFactory (org.hibernate.TransactionFactory)
p2-1-3-8 = (Optional) A factory for org.hibernate.Transaction instances. It is not exposed to the application, but it can be extended and/or implemented by the developer.
subtitle2-1-3-8 = Extension Interfaces
p2-1-3-9 = Hibernate offers a range of optional extension interfaces you can implement to customize the behavior of your persistence layer. See the API documentation for details.

#		**********************************************************************************************************
#		2.2. Contextual sessions
#		p2
#		important-content
#		note-content
#		caution-content
#		**********************************************************************************************************

title2-2 = 2.2. Contextual sessions
p2-2-1 = Most applications using Hibernate need some form of "contextual" session, where a given session is in effect throughout the scope of a given context. However, across applications the definition of what constitutes a context is typically different; different contexts define different scopes to the notion of current. Applications using Hibernate prior to version 3.0 tended to utilize either home-grown ThreadLocal-based contextual sessions, helper classes such as HibernateUtil, or utilized third-party frameworks, such as Spring or Pico, which provided proxy/interception-based contextual sessions.
p2-2-2 = Starting with version 3.0.1, Hibernate added the SessionFactory.getCurrentSession() method. Initially, this assumed usage of JTA transactions, where the JTA transaction defined both the scope and context of a current session. Given the maturity of the numerous stand-alone JTA TransactionManager implementations, most, if not all, applications should be using JTA transaction management, whether or not they are deployed into a J2EE container. Based on that, the JTA-based contextual sessions are all you need to use.
p2-2-3 = However, as of version 3.1, the processing behind SessionFactory.getCurrentSession() is now pluggable. To that end, a new extension interface, org.hibernate.context.spi.CurrentSessionContext, and a new configuration parameter, hibernate.current_session_context_class, have been added to allow pluggability of the scope and context of defining current sessions.
p2-2-4 = See the Javadocs for the org.hibernate.context.spi.CurrentSessionContext interface for a detailed discussion of its contract. It defines a single method, currentSession(), by which the implementation is responsible for tracking the current contextual session. Out-of-the-box, Hibernate comes with three implementations of this interface:
li2-2-1 = <code>org.hibernate.context.internal.JTASessionContext</code>: current sessions are tracked and scoped by a JTA transaction. The processing here is exactly the same as in the older JTA-only approach. See the Javadocs for details.
li2-2-2 = <code>org.hibernate.context.internal.ThreadLocalSessionContext</code>:current sessions are tracked by thread of execution. See the Javadocs for details.
li2-2-3 = <code>org.hibernate.context.internal.ManagedSessionContext</code>: current sessions are tracked by thread of execution. However, you are responsible to bind and unbind a Session instance with static methods on this class: it does not open, flush, or close a Session.
p2-2-5 = The first two implementations provide a "one session - one database transaction" programming model. This is also known and used as session-per-request. The beginning and end of a Hibernate session is defined by the duration of a database transaction. If you use programmatic transaction demarcation in plain JSE without JTA, you are advised to use the Hibernate Transaction API to hide the underlying transaction system from your code. If you use JTA, you can utilize the JTA interfaces to demarcate transactions. If you execute in an EJB container that supports CMT, transaction boundaries are defined declaratively and you do not need any transaction or session demarcation operations in your code. Refer to <a href="#c13">Chapter 13, Transactions and Concurrency</a> for more information and code examples.
p2-2-6 =  The <code>hibernate.current_session_context_class</code> configuration parameter defines which <code>org.hibernate.context.spi.CurrentSessionContext</code> implementation should be used. For backwards compatibility, if this configuration parameter is not set but a <code>org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform</code> is configured, Hibernate will use the <code>org.hibernate.context.internal.JTASessionContext</code>. Typically, the value of this parameter would just name the implementation class to use. For the three out-of-the-box implementations, however, there are three corresponding short names: "jta", "thread", and "managed".

















