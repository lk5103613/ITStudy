
#		**********************************************************************************************************
#		Chapter 13. Transactions and Concurrency
#		**********************************************************************************************************

title13 = 第十三章. 事务和并发
p13-1 = Hibernate最重要的事务并发控制很容易掌握。Hibernate直接使用JDBC链接和JTA资源，不添加任何附加的锁定行为。我们推荐你花点时间了解JDBC编程，ANSI SQL查询语言和你是用的数据库系统的事务。
p13-2 = Hibernate不会锁定内存中的对象。应用程序会按照数据库中定义的事务隔离级别规定的那样运行。Session也是事务级别的缓存，通过它Hibernate提供了通过标示符查找或者实体查询而不是返回标量值的报表查询的可重复读取的功能。
p13-3 = 除了自动乐观并发版本管理之外，针对行级悲观锁定，Hibernate也提供了辅助的API(较小的)，它使用了<code>SELECT FOR UPDATE </code>的语法。本章的后面会讨论乐观并发控制和这个API。
p13-4 = 我们从配置的粒度、<code>SessionFactory</code>、<code>Session</code>和数据库事务和常长事务的角度来讨论Hibernate并发控制。

#		**********************************************************************************************************
#		13.1. Session and transaction scopes
#		**********************************************************************************************************

title13-1 = 13.1. Session 和事务范围
p13-1-1 = 创建<code>SessionFactory</code> 对象是很昂贵的, 它是线程安全的，被所有应用线程共享。他只创建一次，通常是在应用启动的时候，有一个Configuration 实例来创建。
p13-1-2 = 创建<code>Session</code>对象的代价比较小，是非线程安全的，对于单个请求，单个会话或者单个工作单元而言它只能被使用一个。只有在需要的时候，一个Session对象才会获取JDBC链接，或者一个<code>Datasource</code>对象。如果不适用的话不会消耗任何的资源。
p13-1-3 = 为了降低数据库中的锁争用，一个数据库事务应该尽可能的短。长数据库事务会阻止你的应用程序扩展到高的并发负载。假若在用户思考期间让数据库事务开着，知道整个工作单元完成才关闭事务，这绝不是一个好的设计。
p13-1-4 = 一个工作单元的范围是多大？一个Hibernate Session可以跨越多个数据库事务吗？还是他们是一对一的关系？应该何时打开和关闭一个Session并且怎样定义数据库事务的边界？这些问题将会在下面的章节中讲解。

#		**********************************************************************************************************
#		13.1.1. Unit of work
#		**********************************************************************************************************

title13-1-1 = 13.1.1. 工作单元
p13-1-1-1 = 首先，我们来定义一个工作单元。一个工作单元是一个设计模式，如Martin Fowler所描述的\u201C [维护中] 受业务事务影响的一组对象，并且协调变化的输出，和并发问题的解决方案。\u201D[PoEAA] 换句话说, 是我们希望一起对到数据库执行的一系列操作。最基础的，他是一个事务，尽管完成一个工作单元通常需要跨越多个物理的数据库事务。(参考 <a href="c13-1-2">Section 13.1.2, \u201C长会话\u201D</a>)。所以我们讨论的是事务的更抽象的概念。术语 "业务事务" 有时候也用于表示工作单元。
p13-1-1-2 = 不要使用session-per-operation 这种反模式: 不要在单个线程中为一个简单的数据库调用就打开和关闭一次Session。数据事务也是如此。应用中数据库的调用是按照排序好的次序；他们按照原子操作单元分组。这意味着，在应用程序中，在单个的SQL语句发送之后，自动事务提交模式失效了。这种模式撰文为SQL控制台操作设计的。 Hibernate禁止立即自动提交模式，或者期望应用服务器禁止立即自动提交模式。数据库事务绝不是可有可无的。任何与数据库之间的通讯都必须在某个事务中进行，不管你是在读还是在写数据。对数据而言，应该避免Auto-commit行为，因为很多小的事务比一个清晰定义的工作单元性能差。后者也更容易维护和扩展。
p13-1-1-3 = 在多用户的client/server 应用中，最常用的模式是每个请求一个会话。在这种模式下，来自客户端的请求被发送到服务器即Hibernate持久层运行的地方。一个新的 Hibernate <code>Session</code>被打开，并且执行这个操作单元中所有的数据库操作。一旦操作完成 同时对客户端的响应也准备就绪，同时对客户端的响应也准备就绪。你也可以使用单 个数据库事务来处理客户端请求，在你打开Session之后启动事务，在你关闭 Session之前提交事务。会话和请求之间的关系是一对一的关系，这种模式对 于大多数应用程序来说是很棒的。
p13-1-1-4 = 实现才是真正的挑战。Hibernate内置了对"当前session(current session)" 的管理，用于简化此模式。你要做的一切就是在服务器端要处理请求的时候，开启事务，在响应发送给客户之前结束事务。你可以用任何方式来完成这一操作，通常的方案有ServletFilter，在service方法中进行pointcut的AOP拦截器， 或者proxy/interception容器。 EJB容器是实现横切诸如EJB session bean上的事务分界，用CMT对事务进行声明等方面的标准手段。假若你决定使用编程式的事务分界，请参考本章后面讲到的Hibernate Transaction API，这对易用性和代码可移植性都有好处。
p13-1-1-5 = 在任何时间，任何地方，你的应用代码可以通过简单的调用<code>sessionFactory.getCurrentSession()</code>来访问"当前session"，用于处理请求。你总是会得到当前数据库事务范围内的Session。在使用本地资源或JTA环境时，必须配置它， 参考 <a href="#c2-2">Section 2.2, \u201C上下文相关的sessions\u201D</a>。
p13-1-1-6 = 有时，将Session和数据库事务的边界延伸到"展示层被渲染后"会带来便利。有些serlvet应用程序在对请求进行处理后，有个单独的渲染期，这种延伸对这种程序特别有用。假若你实现你自己的拦截器，把事务边界延伸到展示层渲染结束后非常容易。然而，假若你依赖有容器管理事务的EJB，这就不太容易了，因为事务会在EJB方法返回后结束，而那是在任何展示层渲染开始之前。请访问Hibernate网站和论坛，你可以找到Open Session in View这一模式的提示和示例。

#		**********************************************************************************************************
#		13.1.2. Long conversations
#		**********************************************************************************************************

title13-1-2 = 13.1.2. 长对话
p13-1-2-1 = session-per-request模式不仅仅是一个可以用来设计操作单元的有用概念。很多业务处理都需 要一系列完整的与用户之间的交互，而这些用户是指对数据库有交叉访问的用户。在基于web的应用和企业应用中，跨用户交互的数据库事务是无法接受的。考虑下面的例子：
li13-1-2-1-1 = 在界面的第一屏，打开对话框，用户所看到的数据是被一个特定的 Session 和数据库事务载入(load)的。用户可以随意修改对话框中的数据对象。
li13-1-2-1-2 = 5分钟后，用户点击“保存”，期望所做出的修改被持久化；同时他也期望自己是唯一修改这个信息的人，不会出现修改冲突。
p13-1-2-2 = 从用户的角度来看，我们把这个操作单元称为长时间运行的对话或者 <code>application transaction</code>应用事务。在你的应用程序中，可以有很多种方法来实现它。
p13-1-2-3 = 头一个幼稚的做法是，在用户思考的过程中，保持Session和数据库事务是打开的，保持数据库锁定，以阻止并发修改，从而保证数据库事务隔离级别和原子操作。这种方式当然是一个反模式， 因为锁争用会导致应用程序无法扩展并发用户的数目。
p13-1-2-4 = 很明显，我们必须使用多个数据库事务来实现这个对话。在这个例子中，维护业务处理的事务隔离变成了应用程序层的部分责任。一个对话通常跨越多个数据库事务。 。如果仅仅只有一 个数据库事务（最后的那个事务）保存更新过的数据，而所有其他事务只是单纯的读取数据（例如在一 个跨越多个请求/响应周期的向导风格的对话框中），那么应用程序事务将保证其原子性。这种方式比听 起来还要容易实现，特别是当你使用了Hibernate的下述特性的时候：
li13-1-2-2-1 = <code>自动版本化</code>: Hibernate能够自动进行乐观并发控制。如果在用户思考 的过程中发生并发修改，Hibernate能够自动检测到。一般我们只在对话结束时才检查。
li13-1-2-2-2 = <code>脱管对象</code>: 如果你决定采用前面已经讨论过的 session-per-request模式，所有载入的实例在用户思考的过程 中都处于与Session脱离的状态。 Hibernate允许你把与Session脱离的对象重新关联到Session 上，并且对修改进行持久化，这种模式被称为 session-per-request-with-detached-objects。自动版本化被用来隔离并发修改。
li13-1-2-2-3 = <code>扩展的 (或者长) Session</code>:Hibernate 的Session 可以在数据库事务提交之后和底层的JDBC连接断开，当一个新的客户端请求到来的时候，它又重新连接上底层的 JDBC连接。这种模式被称之为session-per-conversation，这种情况可 能会造成不必要的Session和JDBC连接的重新关联。自动版本化被用来隔离并发修改, Session通常不允许自动flush,而是明确flush。
p13-1-2-5 = <code>session-per-request-with-detached-objects</code> 和 <code>session-per-conversation</code> 各有优缺点，我们在本章后面乐观并发 控制那部分再进行讨论。

#		**********************************************************************************************************
#		13.1.3. Considering object identity
#		**********************************************************************************************************

title13-1-3 = 13.1.3. 关注对象标识
p13-1-3-1 = 应用程序可能在两个不同的Session中并发访问同一持久化状态，但是， 一个持久化类的实例无法在两个 Session中共享。因此有两种不同的标识语义：
p13-1-3-2 = 对于那些关联到 特定<code>Session</code>上的对象来说 (也就是在单个Session的范围内), 这 两种标识的语义是等价的,与数据库标识对应的JVM标识是由Hibernate来保证的. 不过，当应用程序在两个不同的session中并发访问具有同一持久化标 识的业务对象实例的时候，这个业务对象的两个实例事实上是不相同的（从 JVM识别来看）。这种冲突可以通过在同步和提交的时候使用自动版本化和乐 观锁定方法来解决。
p13-1-3-3 = 这种方式把关于并发的头疼问题留给了Hibernate和数据库； 由于在单个线程内，操作单元中的对象识别不 需要代价昂贵的锁定或其他意义上的同步，因此它同时可以提供最好的可伸缩性。只要在单个线程只持有一个 Session，应用程序就不需要同步任何业务对象。在Session 的范围内，应用程序可以放心的使用==进行对象比较。
p13-1-3-4 = 不过，应用程序在Session的外面使用==进行对象比较可能会导致无法预期的结果。在一些无法预料的场合, 例如，如果你把两个脱管对象实例放进同一个 Set的时候,就可能发生,这两个对象实例可能有同一个数据库标识 (也就是说，他们代表了表的同一行数据)。从JVM标识的定义上来说, 对脱管的对象而言，Hibernate无法保证他们 的的JVM标识一致。开发人员必须覆盖持久化类的equals()方法和 hashCode()方法，从而实现自定义的对象相等语义。警告：不要使用数据库标识 来实现对象相等，应该使用业务键值，由唯一的，通常不变的属性组成。当一个瞬时对象被持久化的时候，它的数据库标识会发生改变。如果一个瞬时对象(通常也包括脱管对象实例) 被放入一 个Set, 改变它的hashcode会导致与这个Set的关系中断。虽然业务键值的属性不象数据库主键那样稳定不变，但是你只需要保证在同一个Set 中的对象属性的稳定性就足够了。请到Hibernate网站去寻求这个问题更多的详细的讨论。请注意，这不是Hibernate的问题，而仅仅是一个关于Java对象标识和判等行为如何实现的问题。

#		**********************************************************************************************************
#		13.1.4. Common issues
#		**********************************************************************************************************

title13-1-4 = 13.1.4. 常见问题
p13-1-4-1 = 决不要使用反模式<code>session-per-user-session</code> 或者 <code>session-per-application</code> (当然，这个规定几乎没有例外)。请注意， 下述一些问题可能也会出现在我们推荐的模式中，在你作出某个设计决定之前，请务必理解该模式的应用前提：
li13-1-4-1-1 = <code>Session</code> 对象是非线程安全的。如果一个Session 实例允许共享的话，那些支持并发运行的东东，例如HTTP request，session beans,或者是 Swing workers，将会导致出现资源争用。如果在<code>HttpSession</code>中有 Hibernate 的Session的话 (稍后讨论), 你应该考虑同步访问你的Http session。否则，只要用户足够快的点击浏览器的“刷新”，就会导致两个并发运行线程使用同一个 Session。
li13-1-4-1-2 = 一个由Hibernate抛出的异常意味着你必须立即回滚数据库事务，并立即关闭Session(稍后会展开讨论)。如果你的Session绑定到一个应用程序上，你必 须停止该应用程序。回滚数据库事务并不会把你的业务对象退回到事务启动时候的状态。这意味着数据库状态和业务对象状态不同步。通常情况下，这不是什么问题，因为异常是不可恢复的,你必须在回滚之后重新开始执行。
li13-1-4-1-3 = <code>Session</code> 缓存了处于持久化状态的每个对象(Hibernate会监视和检查脏数据)。 这意味着，如果你让Session打开很长一段时间，或是仅仅载入了过多的数据，Session占用的内存会一直增长， Session占用的内存会一直增长，这个问题的一个解决方法是调用clear() 和evict()来管理 Session的缓存，但是如果你需要大批量数据操作的话，最好考虑 使用存储过程。在第 15章 批处理 中有提到一些解决方案。 在用户会话期间一直保持 Session打开也意味着出现脏数据的可能性很高。

#		**********************************************************************************************************
#		13.2. Database transaction demarcation
#		**********************************************************************************************************

title13-2 = 13.2. 数据库事务界定
p13-2-1 = 数据库，或者系统，事务的声明总是必须的。没有数据库事务，就无法和数据库交互（这对使用自动提交的用户可能会产生困扰）。永远使用清晰的事务声明，甚至对只读的操作也是一样。进行显示的事务声明不是必要的，这取决于你对事务隔离的等级以及数据库的能力，但是声明事务总不是什么坏事。当然，一个单独的数据库事务要比许多小的事务表现要好，即使是读数据也是一样。
p13-2-2 = 一个Hibernate应用程序可以在非托管环境中运行（比如，独立的，简单的web程序或桌面应用程序），也可以运行在托管的J2EE环境中。在非托管的环境中，Hibernate通常自己负责数据库连接池。应用开发者必须自己声明事务声明（开始，提交或者回滚数据库事务）。在托管环境中通常提供了容器管理事务（CMT），例如事务装配通过可声 明的方式定义在EJB session beans的部署描述符中。可编程式事务声明不再需要，即使是 Session 的同步也可以自动完成。
p13-2-3 = 让持久层具备可移植性是人们的理想,这种移植发生在非托管的本地资源环境，与依赖JTA但是使用BMT而非CMT的系统之间。在这两种情况下你都可以使用编程式的事务管理。Hibernate提供了一套称为<code>Transaction</code>的封装API，用来把你的部署环境中的本地事务管理系统转换到Hibernate事务上。这个API是可选的，但是我们强烈推荐使用除非你使用CMT session对象。
p13-2-4 = 通常情况下，结束 Session 包含了四个不同的阶段:
li13-2-1-1 = 更新session
li13-2-1-2 = 提交事务
li13-2-1-3 = 关闭session
li13-2-1-4 = 处理异常
p13-2-5 = 我们之前已经讨论过了刷新session，所以我们现在将详细讨论在托管和非托管环境下的事务声明和异常处理。

#		**********************************************************************************************************
#		13.2.1. Non-managed environment
#		**********************************************************************************************************

title13-2-1 = 13.2.1. 非管理环境
p13-2-1-1 = 如果Hibernate持久层运行在非托管环境下，数据库连接通常由简单的连接池（比如哦非DataSource）管理，session/transaction处理方式如下所示：
p13-2-1-2 = 你不需要显式的调用<code>flush()</code>来更新session：根据<a href="#c11-10">Section 11.10, \u201CFlushing the Session\u201D</a>所说，在调用<code>commit()</code>方法的同时会自动触发session的同步事件。调用<code>close()</code>方法标记这一个session的结束。<code>close()</code>方法的主要作用是释放了JDBC的连接。这段Java代码是可移植的，并且可以在非托管环境和JTA环境下运行。
p13-2-1-3 = 如同之前列出来的，更加灵活的方案是Hibernate内置的"current session"上下文管理：
p13-2-1-4 = 你可能在应用的常规代码中找不到这样的代码片段；致命的（系统）异常总是应该在最顶级被捕捉。换句话说，执行Hibernate调用的代码应该在持久层，而处理运行时异常（通常只能清理或者退出应用程序）应该在不同的层。Hibernate提供的当前上下文管理，即<code>SessionFactory</code>，可以极大的简化这一设计。异常处理会在这一章后面讨论到。
p13-2-1-5 = 你应该选择<code>org.hibernate.transaction.JDBCTransactionFactory</code>，这是默认选项，对第二个例子来说<code>hibernate.current_session_context_class</code>应该设置成thread。

#		**********************************************************************************************************
#		13.2.2. Using JTA
#		**********************************************************************************************************

title13-2-2 = 13.2.2. 使用JTA
p13-2-2-1 = 如果你的持久层运行在应用服务器上（比如，在EJB beans后面），Hibernate获取的每个数据源连接将自动成为全局JTA事务的一部分。你也可以安装一个独立的JTA实现，使用它而不使用EJB。Hibernate提供了两种用来JTA整合的策略。
p13-2-2-2 = 如果你使用bean事务管理(BTM)，那么当你使用<code>Transaction</code> API时，Hibernate将会告知应用服务器启动或关闭一个BMT事务。在非托管环境下事务管理的代码也是一样的。
p13-2-2-3 = 如果你想使用与事务绑定的Session，也就是使用<code>getCurrentSession()</code>方法来简化上下文管理，那么就要直接使用<code>JTA UserTransaction</code> API：
p13-2-2-4 = 在CMT方式下，事务声明是在session bean的部署描述符中，而不需要编程。 因此，代码被简化为:
p13-2-2-5 = 在CMT/EJB中甚至会自动rollback，因为假若有未捕获的<code>RuntimeException</code>从session bean方法中抛出，这就会通知容器把全局事务回滚。这就意味着，在BMT或者CMT中，你根本就不需要使用Hibernate Transaction API ，你自动得到了绑定到事务的“当前”Session。
p13-2-2-6 = 在配置Hibernate的事务工厂的时候，如果直接使用JTA，请选择<code>org.hibernate.transaction.JTATransactionFactory</code>，如果在CMT session bean中，使用<code>org.hibernate.transaction.CMTTransactionFactory</code>。不要忘记设置<code>hibernate.transaction.manager_lookup_class</code>。确认你没有设置<code>hibernate.current_session_context_class</code>（为了向下兼容），或者设置成"jta"。
p13-2-2-7 = 在JTA环境下<code>getCurrentSession()</code>有一个缺点。对after_statement连接释放方式有一个警告，这是被默认使用的。由于JTA规范的一个限制，Hibernate不可能自动清理任何未关闭的ScrollableResults 或者Iterator，它们是由<code>scroll()</code> or <code>iterate()</code> Due to a limitation of the JTA spec, it is not possible for Hibernate to automatically clean up any unclosed ScrollableResults or Iterator instances returned by <code>scroll()</code> 或者 <code>iterate()</code>产生的。你必须通过在finally块中，显式调用ScrollableResults.close()或者Hibernate.close(Iterator)方法来释放底层数据库游标。大多数应用程序可以轻易的在JTA或者CMT代码中避免使用<code>scroll()</code> 或者 <code>iterate()</code>。

#		**********************************************************************************************************
#		13.2.3. Exception handling
#		**********************************************************************************************************

title13-2-3 = 13.2.3. 异常处理
p13-2-3-1 = 如果Session抛出异常，包括任何SQL异常，会立即回滚数据库事务，调用<code>Session.close()</code>并丢弃这个Session实例。Session的一些方法可能会使得session处于不一致的状态。所有Hibernate抛出的异常都被认为是不可恢复的。确保在finally块中调用session的<code>close()</code>方法。
p13-2-3-2 = 可以出现在Hibernate持久层的包含了大多数错误的<code>HibernateException</code>可以出现在Hibernate持久层，是一个非检查期异常。这和老版本的Hibernate不同。在我们看来，我们不应该强制应用开发者在底层捕捉一个无法恢复的异常。在大多数的系统中，非检查期异常和指明异常都是在相应方法调用的堆栈的顶层被处理的（也就是在更高的层），并且提供一个错误信息给应用程序用户或者采取其他的某些措施。注意Hibernate也可能抛出其他不是<code>HibernateException</code>的非检查期异常。这些异常同样是不可恢复的，应该采取某些措施去处理他们。
p13-2-3-3 = 在和数据库进行交互时，Hibernate把捕获的SQLException封装为Hibernate的 JDBCException。事实上，Hibernate会识图将异常转换为更加具有意义的JDBC异常的子类。底层的SQL异常可以通过调用<code>JDBCException.getCause()</code>来获取。Hibernate通过使用关联到 SessionFactory上的SQLExceptionConverter来 把SQLException转换为一个对应的JDBCException 异常的子类。默认情况下，SQLExceptionConverter可以通过配置dialect 选项指定；此外，也可以使用用户自定义的实现类（参考javadocs SQLExceptionConverterFactory类来了解详情）。标准的 JDBCException子类型是：
li13-2-3-1-1 = <code>JDBCConnectionException</code>: 指明底层的JDBC通讯出现错误
li13-2-3-1-2 = <code>SQLGrammarException</code>:指明发送的SQL语句的语法或者格式错误
li13-2-3-1-3 = <code>ConstraintViolationException</code>: 指明某种类型的约束违例错误
li13-2-3-1-4 = <code>LockAcquisitionException</code>: 指明了在执行请求操作时，获取所需的锁级别时出现的错误。
li13-2-3-1-5 = <code>GenericJDBCException</code>: 不属于任何其他种类的原生异常

#		**********************************************************************************************************
#		13.2.4. Transaction timeout
#		**********************************************************************************************************

title13-2-4 = 13.2.4. 事务超时
p13-2-4-1 = EJB这样的托管环境有一项极为重要的特性，而它从未在非托管环境中提供过，那就是事务超时。在出现错误的事务行为的时候，超时可以确保不会无限挂起资源、对用户没有交代。在托管(JTA)环境之外，Hibernate无法完全提供这一功能。但是，Hiberante至少可以控制数据访问，确保数据库级别的死锁，和返回巨大结果集的查询被限定在一个规定的时间内。在托管环境中，Hibernate会把事务超时转交给JTA。这一功能通过Hibernate <code>Transaction</code>对象进行抽象。
p13-2-4-2 = <code>setTimeout()</code>不应该在CMT bean中调用，此时事务超时值应该是被声明式定义的。

#		**********************************************************************************************************
#		13.3. Optimistic concurrency control
#		**********************************************************************************************************

title13-3 = 13.3. 乐观并发控制
p13-3-1 = 唯一能够同时保持高并发和高可伸缩性的方法就是使用带版本化的乐观并发控制。版本检查使用版本号、 或者时间戳来检测更新冲突（并且防止更新丢失）。Hibernate为使用乐观并发控制的代码提供了三种可 能的方法，应用程序在编写这些代码时，可以采用它们。我们已经在前面应用程序对话那部分展示了 乐观并发控制的应用场景，此外，在单个数据库事务范围内，版本检查也提供了防止更新丢失的好处。

#		**********************************************************************************************************
#		13.3.1. Application version checking
#		**********************************************************************************************************

title13-3-1 = 13.3.1. 应用版本检查
p13-3-1-1 = 在未能充分利用Hibernate辅助功能的程序中，每一次和数据库的交互都需要一个新的session，而且开发者必须在操作实例之前在数据库中重新载入他们。这种方式迫使应用程序实现自己的版本控制来保证事务之间的隔离。这种方式在数据访问方面是最低效的。这种使用方式和 entity EJB最相似。
p13-3-1-2 = 使用<code>&lt;version&gt;</code>来映射version属性，当数据变更后更新时Hibernate会自动增长其版本号。
p13-3-1-3 = 如果你在低数据并发的环境下操作数据库，并且不需要版本检查，那么你可以跳过版本检查使用这个方法。在这种情况下，最晚提交生效就是你对长会话的默认处理策略。需要注意的是这种策略可能会使得使用应用程序的用户产生疑惑，因为他们可能会遇到没有任何出错信息或者合并冲突的信息，自己的更新却丢失了的情况。
p13-3-1-4 = 手动的版本控制支队小规模的场景适用，并不适合绝大多是应用程序。通常情况下不仅单个实例需要检查，整个修改过的关联关系图都需要检查。作为设计标准范例，Hibernate为扩展周期的session或者脱管对象提供自动的版本检查。

#		**********************************************************************************************************
#		13.3.2. Extended session and automatic versioning
#		**********************************************************************************************************

title13-3-2 = 13.3.2. 延长会话和自动版本控制
p13-3-2-1 = 单个的<code>Session</code>实例和它的持久化实体在整个对话中使用，这被称为<code>session-per-conversation</code>。Hibernate在更新的时候检查实例的版本，如果检测到并发修改则抛出一个异常。由用户决定是否捕捉并处理这个异常。通常的做法是为用户提供一个适当的合并更改，或者在数据无脏的情况下重新开启一个业务对话。
p13-3-2-2 = 在等待用户交互的时候，<code>Session</code>与任何底层的JDBC连接是断开的。这个方法访问数据库是最高效的。应用程序不需要检查版本或者重新管理脱离的实例，也不需要在每个数据库事务中重新加载实例。
p13-3-2-3 = <code>foo</code>对象知道它载入的是哪一个session。在一个旧的session中开启一个新的数据库事务或获取一个新连接并且回复这个session的功能。在提交了数据库事务之后，session将和JDBC连接断开，并将连接归还连接池。在重新连接之后，要强制对你没有更新的数据进行一次版本检查，你可以对所有可能被其他事务修改过的对象，使用参数<code>LockMode.READ</code>来调用<code>Session.lock()</code>。你不需要锁定任何你正在更新的数据。通常情况下你应该在扩展的session上设置<code>FlushMode.MANUAL</code>，那样只有最后一个数据库事务循环才会真正的吧整个对话中发生的修改发送到数据库。 只有最后一次数据库事务才有<code>flush()</code>操作，并且在会话结束之前调用<code>close()</code>方法关闭session。
p13-3-2-4 = 你在思考的时候，如果发现Session太大了无法保存，那么这个模式就是有问题的。（例如，<code>HttpSession</code>应该尽可能的小）。因为Session是一级缓存，并且包含所有加载进来的对象，因此我们只应该在那些少量的request/response情况下使用这种策略。 你应该只把一个Session用于单个对话，因为它很快就会出现脏数据。
nc13-3-2-1 = 早期版本的Hibernate需要明确的对Session使用disconnection和reconnection。这些方法已经弃用了，因为打开和结束事务有同样的效果。
p13-3-2-5 = 在持久层保持断开连接的Session关闭。在三层环境中使用EJB来持有Session。不要将它传递给web层，甚至把它序列化到单独一层，保存在<code>HttpSession</code>中。
p13-3-2-6 = 扩展Session模式，或者叫做<code>session-per-conversation</code>，在与自动管理当前session上下文联用的时候会更困难。你需要提供你自己的CurrentSessionContext实现。请参阅Hibernate Wiki以获得示例

#		**********************************************************************************************************
#		13.3.3. Detached objects and automatic versioning
#		**********************************************************************************************************

title13-3-3 = 13.3.3. 游离的对象和自动版本控制
p13-3-3-1 = 每一次与持久层的交互都发生在一个新Session中。然而，同一持久化实例在与数据库的每次交互中都可以重用。应用程序操纵脱管实例的状态，这个实例最初是在另一个Session中载入的，然后调用<code>Session.update()</code>, <code>Session.saveOrUpdate()</code>, 或者 <code>Session.merge()</code>来重新关联对象实例。
p13-3-3-2 = Hibernate在刷新时会再一次检查实例版本，如果更新过程中有冲突会抛出一个异常。
p13-3-3-3 = 如果你确信对象没有修改过，你可以使用<code>lock()</code>来替代<code>update()</code>方法来设置<code>LockMode.READ</code>（绕过所有缓存，执行版本检查）。
#		**********************************************************************************************************
#		13.3.4. Customizing automatic versioning
#		**********************************************************************************************************

title13-3-4 = 13.3.4. 自定义自动版本控制
p13-3-4-1 = 你可以通过将 <code>optimistic-lock</code>映射属性设置为false，来禁止Hibernate对某些属性和集合的版本自动增长。这样，当属性的数据变脏时Hibernate不会增长它的版本号。
p13-3-4-2 = 遗留数据库表通常是静态的不可修改的。或者，其他应用程序也可能访问同一数据库，根本无法得知如何处理版本号，甚至时间戳。无论哪种情况，版本信息不能依赖与表中的特定列。在<code>&lt;class&gt;</code>的映射中设置 <code>optimistic-lock="all"</code>可以在没有版本或者时间戳属性映射的情况下实现版本检查，此时Hibernate将比较一行记录的每个字段的状态。只有在Hibernate能够比较新老状态的情况下，这种方式才能生效。（比如，使用单个长生命周期Session模式，而不使用 session-per-request-with-detached-objects模式。）
p13-3-4-3 = 当更改不发生交错，那么并行修改也是允许的。当你在<code>&lt;class&gt;</code>的映射中设置<code>optimistic-lock="dirty"</code>之后，Hibernate在更新时只会比较脏数据。
p13-3-4-4 = 无论什么情况下，不管是组俺们设置一个version/timestamp列，还是进行全部字段/脏字段的比较，Hibernate都是使用带有<code>WHERE</code>查询的<code>UPDATE</code>状态来检查和更新信息。如果你使用传递持久化来级联实体关系，Hibernate可能会做一些不必要的更新。这通常不是什么问题，但是数据库中更新的触发器可能在没有更新时也会被执行。你可以通过在<code>&lt;class&gt;</code>映射中设置<code>select-before-update="true"</code>来自定义这一行为，强制Hibernate <code>SELECT</code>这个对象来保证更新记录之前，对象是更改过的。

#		**********************************************************************************************************
#		13.4. Pessimistic locking
#		**********************************************************************************************************

title13-4 = 13.4. 悲观锁
p13-4-1 = 用户不需要花太多时间担心锁定策略问题。一般情况下，为JDBC连接指定一个隔离等级然后只要让数据库去做剩下的事情就足够了。然而，高级用户可能有时候希望获得一个排它锁，或者在新事务启动时重新进行锁定。
p13-4-2 = Hibernate总是使用数据库的锁定机制，从不在内存中锁定对象。
p13-4-3 = 在<code>LockMode</code>类中定义了Hibernate需要的锁定不同等级。一个锁定可以通过一下机制来设定：
li13-4-1-1 =  当Hibernate更新或者插入一行时自动设置为<code>LockMode.WRITE</code>
li13-4-1-2 = 当用户在数据库中显示的使用<code>SELECT ...FOR UPDATE</code>时，锁定等级自动设为<code>LockMode.UPGRADE</code>。
li13-4-1-3 = 当用户显式的使用Oracle数据库的SQL语句<code>SELECT ... FOR UPDATE NOWAIT</code> 的时候，锁定级别设置<code>LockMode.UPGRADE_NOWAIT</code>
li13-4-1-4 = 当Hibernate在“可重复读”或者是“序列化”数据库隔离级别下读取数据的时候，锁定模式自动设置为<code>LockMode.READ</code>。这种模式也可以通过用户显式指定进行设置。
li13-4-1-5 = <code>LockMode.NONE</code> 代表无需锁定。在Transaction结束时， 所有的对象都切换到该模式上来。与session相关联的对象通过调用update() 或者saveOrUpdate()脱离该模式。
p13-4-4 = "显式的用户指定"可以通过以下几种方式之一来表示:
li13-4-2-1 = 调用<code>Session.load()</code>的时候指定锁定模式（<code>LockMode</code>）。
li13-4-2-2 = 调用<code>Session.lock()</code>。
li13-4-2-3 = 调用<code>Query.setLockMode()</code>。
p13-4-5 = 如果在<code>UPGRADE</code> or <code>UPGRADE_NOWAIT</code>的时候调用<code>Session.load()</code>，并且被请求的独享还没有被载入session，那么这个对象会通过<code>SELECT --- FOR UPDATE</code>的方式再付。如果一个对象在调用<code>load()</code>方法时，已经在一个较少限制的锁定模式下被载入了，Hibernate会为那个对象调用<code>lock()</code>方法。
p13-4-6 = 如果指定锁的模式是<code>READ</code>, <code>UPGRADE</code> 或者 <code>UPGRADE_NOWAIT</code>，那么<code>Session.lock()</code>就会执行版本号检查。在<code>UPGRADE</code>或者<code>UPGRADE_NOWAIT</code>模式下，会使用<code>SELECT ... FOR UPDATE</code>。
p13-4-7 = 如果数据库不支持用户所请求的锁定模式，Hibernate会使用适当的方案去替代而不是抛出异常，这样可以保证应用程序的可移植性。

#		**********************************************************************************************************
#		13.5. Connection release modes
#		**********************************************************************************************************

title13-5 = 13.5. 链接释放模式
p13-5-1 = Hibernate的其中一个旧行为，即2.x版本的时候，一个session在第一次需要的时候获取一个连接，然后一直持有这个连接知道其关闭。到了Hibernate 3.x版本，引入了连接释放模式，这个模式将会告知session如何处理一个JDBC连接。接下来的讨论只针对由<code>ConnectionProvider</code>提供连接的情况。用户自定义的连接我们不会在这里讨论到。通过<code>org.hibernate.ConnectionReleaseMode</code>的不同枚举值来决定使用不同的释放模式：
li13-5-1-1 = <code>ON_CLOSE</code>: 这就是上面提到的旧行为。Hibernate session当它第一次需要的时候获得一个连接，然后持久这个连接知道session关闭。
li13-5-1-2 = <code>AFTER_TRANSACTION</code>: 在<code>org.hibernate.Transaction</code>完成之后释放连接。
li13-5-1-3 = <code>AFTER_STATEMENT</code> (也被称为积极释放): 在每一条语句执行过后释放连接。但是如果这条语句留下了与session相关的资源，则这个连接不会被释放。当前来讲唯一出现这种情况的是在使用<code>org.hibernate.ScrollableResults</code>的时候。
p13-5-2 = <code>hibernate.connection.release_mode</code>的参数是用来指定使用哪种释放方式，可用的值有：
li3-5-2-1 = <code>auto</code> (默认): 这一选择会把释放模式委派给<code>org.hibernate.transaction.TransactionFactory.getDefaultReleaseMode()</code>方法处理。对于<code>JTATransactionFactory</code>来说，这会返回<code>ConnectionReleaseMode.AFTER_STATEMENT</code>；对于<code>JDBCTransactionFactory</code>来讲，会返回<code>ConnectionReleaseMode.AFTER_TRANSACTION</code>。尽量不要修改这一块的代码因为如果处置不当，就会给用户带来bug或者异常行为。
li3-5-2-2 = <code>on_close</code>: 使用<code>ConnectionReleaseMode.ON_CLOSE</code>。这个设定是为了向下兼容的，但是它已经过时不推荐使用。
li3-5-2-3 = <code>after_transaction</code>: 使用<code>ConnectionReleaseMode.AFTER_TRANSACTION</code>。这个设定不应该在JTA环境下使用。同样需要注意的是，使用<code>ConnectionReleaseMode.AFTER_TRANSACTION</code>的时候，如果session处于自动提交模式，连接会像<code>AFTER_STATEMENT</code>那样被释放。
li3-5-2-4 = <code>after_statement</code>: 使用<code>ConnectionReleaseMode.AFTER_STATEMENT</code>。另外，<code>ConnectionProvicer</code>会查询是否它支持这一设置（<code>supportsAggressiveRelease()</code>）。如果不支持，释放模式被重新设定为<code>ConnectionReleaseMode.AFTER_TRANSACTION</code>。只有在你每次调用<code>ConnectionProvider.getConnection()</code>获取底层JDBC连接的时候，都可以确信获得同一个连接的时候，这一设置才是安全的；或者在auto-commit环境中，你可以不管是否每次都获得同一个连接的时候，这才是安全的。
