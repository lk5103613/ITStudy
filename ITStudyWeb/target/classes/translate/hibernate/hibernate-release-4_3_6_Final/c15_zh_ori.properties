
#		**********************************************************************************************************
#		Chapter 15. Batch processing
#		**********************************************************************************************************

title15 = 第十五章. 批处理
p15-1 = 使用Hibernate将100000条记录插入到数据库的一个很自然的做法可能是这样的：
p15-2 = 这段程序大概运行到50000条记录左右会失败并抛出内存溢出异常。这是因为Hibernate在session级别缓存了所有<code>Customer</code>。在这一章我们将像你展示怎样避免这样的麻烦。
p15-3 = 如果你要执行批量处理并且想要达到一个理想的性能， 那么使用JDBC的批量。将JDBC的批量处理值设定在一个合理的范围（比如10-50）：
p15-4 = 如果你使用了identiy标识符生成器，那么Hibernate将会在JDBC级别透明的关闭插入语句批量执行。
p15-5 = 你也可能想在执行批量处理时关闭二级缓存：
p15-6 = 然而，这不是十分必要的做法，因为我们可以显示的设置缓存模式来禁用二级缓存。

#		**********************************************************************************************************
#		15.1. Batch inserts
#		**********************************************************************************************************

title15-1 = 15.1. 批量插入
p15-1-1 = 如果要将很多对象持久化，你必须通过经常的调用<code>flush()</code>以及稍后调用<code>clear()</code>来控制第一级缓存的大小。

#		**********************************************************************************************************
#		15.2. Batch updates
#		**********************************************************************************************************

title15-2 = 15.2. 批量更新
p15-2-1 = 这个方法同样适用于检索和更新数据，此外，在进行会返回很多行数据的查询时，你需要使用<code>scroll()</code>方法以便充分利用服务器端游标所带来的好处。

#		**********************************************************************************************************
#		15.3. The StatelessSession interface
#		**********************************************************************************************************

title15-3 = 15.3. StatelessSession接口
p15-3-1 = 可选的，Hibernate提供了面向命令的API，它可以通过脱离对象的形式用流的方法将数据写入或读出数据库。StatelessSession没有持久化上下文，也不提供多少高层的生命周期语义。特别的，无状态session不实现第一级cache,也不和第二级缓存，或者查询缓存交互。它不实现事务化写，也不实现脏数据检查。用stateless session进行的操作甚至不级联到关联实例。stateless session忽略集合类(Collections)。通过stateless session进行的操作不触发Hibernate的事件模型和拦截器。无状态session对数据的混淆现象免疫，因为它没有第一级缓存。无状态session是低层的抽象，和低层JDBC相当接近。
p15-3-2 = 在这个示例代码中，查询返回的Customer实例立即被脱管(detach)。它们与任何持久化上下文都没有关系。
p15-3-3 = StatelessSession接口定义的 <code>insert()</code>, <code>update()</code> 和 <code>delete()</code>操作可以认为是直接操作数据库行级别的。其结果是立即执行<code>INSERT</code>， <code>UPDATE</code>或者<code>DELETE</code>语句。它们的语义与session的<code>save()</code>, <code>saveOrUpdate()</code> 和 <code>delete()</code>有很大的不同。

#		**********************************************************************************************************
#		15.4. DML-style operations
#		**********************************************************************************************************

title15-4 = 15.4. DML风格操作
p15-4-1 = 正如我们讨论的一样，自动对象关系映射涉及到对象状态的管理。内存中对象的状态是可用的。这意味着直接操作数据库中的数据(使用SQL操纵语句(DML):<code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code>)并不会影响对象在内存的状态。然而，Hibernate提供了通过Hibernate查询语言(<a href="#c16">Chapter 16, HQL: Hibernate 查询语言</a>)来执行大批量SQL风格的DML语句的方法。
p15-4-2 =  <code>UPDATE</code> 和 <code>DELETE</code> 的语法为: ( <code>UPDATE</code> | <code>DELETE</code> ) FROM? EntityName (WHERE where_conditions)?.
p15-4-3 = 有几点需要说明:
li15-4-1-1 = 在From子句, From关键字是可选的
li15-4-1-2 = 在From子句中只能有一个是提名，也可以是别名。如果是提名是别名，那么任何被引用的属性都必须加上此别名的前缀，如果不是别名，那么任何有前缀的属性引用都是违法的。
li15-4-1-3 = 不管是显示的还是隐式的 <a href="#c16-4">Section 16.4, \u201Cjoin语法的形式\u201D</a>都不能在大批量的HQL语句中使用。在Where子句中可以使用子查询，子查询本身可以包含join。
li15-4-1-4 = Where子句也是可选的
p15-4-4 = 举个例子, 使用<code>Query.executeUpdate()</code> 方法执行HQL UPDATE语句。方法名来源于JDBC的<code>PreparedStatement.executeUpdate()</code>:
p15-4-5 = 为了符合EJB3 规范, HQL UPDATE 语句,默认情况下不会影响实体的<a href="#c5-1-3-1">Section 5.1.3.1, \u201C版本号\u201D</a> 和 <a href="#c5-1-3-2">Section 5.1.3.2, \u201C时间戳\u201D</a> 属性值。然而，但是，通过使用版本更新，你可以强制Hibernate正确的重置Version或者timestamp属性值。这是通过在在UPDATE关键字之后增加Version关键字来实现的。
p15-4-6 = 自定义版本类型, <code>org.hibernate.usertype.UserVersionType</code>, 不允许和update versioned 语句一起使用。
p15-4-7 = 执行一个HQL DELETE, 同样使用 <code>Query.executeUpdate()</code> 方法:
p15-4-8 = 由 <code>Query.executeUpdate()</code> 方法返回的整形值表明了受此操作影响的记录数量。这一这个数值可能与数据库中被影响了的行数有关，也可能没有。一个批量HQL操作可能导致多条实际的SQL语句被执行(例如，对于joined-subclass)。 这个返回值代表了实际会被语句影响了的记录数量。在joined-subclass的例子中, 对一个子类的删除实际上可能不仅仅会删除子类映射到的表而且会影响根表，还可能影响与之有继承关系的joined-subclass映射方式的子类的表。
p15-4-9 = INSERT 语句的伪代码是: INSERT INTO EntityName <code>properties_list select_statement</code>。要注意的是:
li15-4-1-1 = 只支持<code>INSERT INTO ... SELECT ... form</code>; 不支持 <code>INSERT INTO ... VALUES ... </code>的形式。<br/>The properties_list 和SQL Insert语句中的字段定义类型。对于参与继承树映射的实体而言，只有直接定义在给定的类级别的属性才能直接在properties_list中使用。超类的属性不被支持，子类的属性无意义。换句话说，Insert天生不支持多态。
li15-4-1-2 = <code>select_statement</code> 可以是任何合法的HQL选择查询，不过要保证返回类型必须和要插入的类型完全匹配。目前，这一检查是在查询编译的时候进行的，而不是把它交给数据库。注意，在HibernateType间如果只是等价（equivalent）而非相等(equal)，会导致问题。 定义为org.hibernate.type.DateType和org.hibernate.type.TimestampType的两个属性可能会产生类型不匹配错误，虽然数据库级可能不加区分或者可以处理这种转换。
li15-4-1-3 = 对id属性来说,insert语句给你两个选择。你可以明确地在properties_list表中指定id属性，这样它的值是从对应的select表达式中获得，或者在properties_list中省略它，此时使用生成值。后一种选择只有当使用在数据库中生成值的id产生器时才能使用; 如果是“内存”中计算的类型生成器，在解析时会抛出一个异常。注意，为了说明这一问题，，数据库产生值的生成器是<code>org.hibernate.id.SequenceGenerator</code>（和它的子类）。以及任何 <code>org.hibernate.id.PostInsertIdentifierGenerator</code>接口的实现。这儿最值得注意的意外是 <code>org.hibernate.id.TableHiLoGenerator</code>,它不能在此使用，因为它没有得到其值的途径。
li15-4-1-4 = 对映射为version 或 timestamp的属性来说, insert语句也给你两个选择。 你可以在properties_list表中指定，此时其值从对应的select表达式中获得, 或者在properties_list中省略它,此时，使用在org.hibernate.type.VersionType 中定义的种子值。
p15-4-10 = 执行HQL <code>INSERT</code>语句的例子如下：