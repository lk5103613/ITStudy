
#		**********************************************************************************************************
#		Chapter 7. Collection mapping
#		**********************************************************************************************************

title7 = Chapter 7. Collection mapping

#		**********************************************************************************************************
#		7.1. Persistent collections
#		**********************************************************************************************************

title7-1 = 7.1. Persistent collections
p7-1-1 = Naturally Hibernate also allows to persist collections. These persistent collections can contain almost any other Hibernate type, including: basic types, custom types, components and references to other entities. The distinction between value and reference semantics is in this context very important. An object in a collection might be handled with "value" semantics (its life cycle fully depends on the collection owner), or it might be a reference to another entity with its own life cycle. In the latter case, only the "link" between the two objects is considered to be a state held by the collection.
p7-1-2 = As a requirement persistent collection-valued fields must be declared as an interface type (see <a href="#example.collection.mapping.annotations">Example 7.2, \u201CCollection mapping</code> using <code>@OneToMany</code> and <code>@JoinColumn\u201D</code></a>). The actual interface might be <code>java.util.Set</code>, <code>java.util.Collection</code>, <code>java.util.List</code>, <code>java.util.Map</code>, <code>java.util.SortedSet</code>, <code>java.util.SortedMap</code> or anything you like ("anything you like" means you will have to write an implementation of <code>org.hibernate.usertype.UserCollectionType</code>).
p7-1-3 = Notice how in <a href="#example.collection.mapping.annotations">Example 7.2, \u201CCollection mapping using @OneToMany and @JoinColumn\u201D</a> the instance variable parts was initialized with an instance of HashSet. This is the best way to initialize collection valued properties of newly instantiated (non-persistent) instances. When you make the instance persistent, by calling <code>persist()</code>, Hibernate will actually replace the HashSet with an instance of Hibernate's own implementation of Set. Be aware of the following error:
p7-1-4 = The persistent collections injected by Hibernate behave like <code>HashMap</code>, <code>HashSet</code>, <code>TreeMap</code>, <code>TreeSet</code> or <code>ArrayList</code>, depending on the interface type.
p7-1-5 = Collections instances have the usual behavior of value types. They are automatically persisted when referenced by a persistent object and are automatically deleted when unreferenced. If a collection is passed from one persistent object to another, its elements might be moved from one table to another. Two entities cannot share a reference to the same collection instance. Due to the underlying relational model, collection-valued properties do not support null value semantics. Hibernate does not distinguish between a null collection reference and an empty collection.
nc7-1-1 = Use persistent collections the same way you use ordinary Java collections. However, ensure you understand the semantics of bidirectional associations (see <a href="#c7-3-2">Section 7.3.2, \u201CBidirectional associations\u201D</a>).

#		**********************************************************************************************************
#		7.2. How to map collections
#		**********************************************************************************************************

title7-2 = 7.2. How to map collections
p7-2-1 = Using annotations you can map Collections, Lists, Maps and Sets of associated entities using <code>@OneToMany</code> and <code>@ManyToMany</code>. For collections of a basic or embeddable type use <code>@ElementCollection</code>. In the simplest case a collection mapping looks like this:
p7-2-2 = Product describes a unidirectional relationship with Part using the join column PART_ID. In this unidirectional one to many scenario you can also use a join table as seen in <a href="#example-one-to-many-with-join-table">Example 7.3, \u201CCollection mapping using @OneToMany and @JoinTable\u201D</a>.
p7-2-3 = Without describing any physical mapping (no <code>@JoinColumn</code> or <code>@JoinTable</code>), a unidirectional one to many with join table is used. The table name is the concatenation of the owner table name, _, and the other side table name. The foreign key name(s) referencing the owner table is the concatenation of the owner table, _, and the owner primary key column(s) name. The foreign key name(s) referencing the other side is the concatenation of the owner property name, _, and the other side primary key column(s) name. A unique constraint is added to the foreign key referencing the other side table to reflect the one to many.
p7-2-4 = Lets have a look now how collections are mapped using Hibernate mapping files. In this case the first step is to chose the right mapping element. It depends on the type of interface. For example, a <code>&lt;set&gt;</code> element is used for mapping properties of type Set.
p7-2-5 = In <a href="#example.collections.set">Example 7.4, \u201CMapping a Set using &lt;set&gt;\u201D</a> a one-to-many association links the Product and Part entities. This association requires the existence of a foreign key column and possibly an index column to the Part table. This mapping loses certain semantics of normal Java collections:
li7-2-1-1 = An instance of the contained entity class cannot belong to more than one instance of the collection.
li7-2-1-2 = An instance of the contained entity class cannot appear at more than one value of the collection index.
p7-2-6 = Looking closer at the used <code>&lt;one-to-many&gt;</code> tag we see that it has the following options.
td7-2-1-1 = <code>class</code> (required): the name of the associated class.
td7-2-1-2 = <code>not-found</code> (optional - defaults to exception): specifies how cached identifiers that reference missing rows will be handled. ignore will treat a missing row as a null association.
td7-2-1-3 = <code>entity-name</code> (optional): the entity name of the associated class, as an alternative to class.
p7-2-7 = The <code>&lt;one-to-many&gt;</code> element does not need to declare any columns. Nor is it necessary to specify the table name anywhere.
wc7-2-1 = If the foreign key column of a <code>&lt;one-to-many&gt;</code> association is declared NOT NULL, you must declare the <code>&lt;key&gt;</code> mapping <code>not-null="true"</code> or use a bidirectional association with the collection mapping marked <code>inverse="true"</code>. See <a href="#c7-3-2">Section 7.3.2, \u201CBidirectional associations\u201D</a>.
p7-2-8 = Apart from the <code>&lt;set&gt;</code> tag as shown in <a href="#example-one-to-many-with-join-table">Example 7.4, \u201CMapping a Set using <set>\u201D</a>, there is also <code>&lt;list&gt;</code>, <code>&lt;map&gt;</code>, <code>&lt;bag&gt;</code>, <code>&lt;array&gt;</code> and <code>&lt;primitive-array&gt;</code> mapping elements. The <code>&lt;map&gt;</code> element is representative:
td7-2-2-1 = <code>name</code>: the collection property name
td7-2-2-2 = <code>table</code> (optional - defaults to property name): the name of the collection table. It is not used for one-to-many associations.
td7-2-2-3 = <code>schema</code> (optional): the name of a table schema to override the schema declared on the root element
td7-2-2-4 = <code>lazy</code> (optional - defaults to true): disables lazy fetching and specifies that the association is always eagerly fetched. It can also be used to enable "extra-lazy" fetching where most operations do not initialize the collection. This is suitable for large collections.
td7-2-2-5 = <code>inverse</code> (optional - defaults to false): marks this collection as the "inverse" end of a bidirectional association.
td7-2-2-6 = <code>cascade</code> (optional - defaults to none): enables operations to cascade to child entities.
td7-2-2-7 = <code>sort</code> (optional): specifies a sorted collection with natural sort order or a given comparator class.
td7-2-2-8 = <code>order-by</code> (optional): specifies a table column or columns that define the iteration order of the Map, Set or bag, together with an optional asc or desc.
td7-2-2-9 = <code>where</code> (optional): specifies an arbitrary SQL <code>WHERE</code> condition that is used when retrieving or removing the collection. This is useful if the collection needs to contain only a subset of the available data.
td7-2-2-10 = <code>fetch</code> (optional, defaults to select): chooses between outer-join fetching, fetching by sequential select, and fetching by sequential subselect.
td7-2-2-11 = <code>batch-size</code> (optional, defaults to 1): specifies a "batch size" for lazily fetching instances of this collection.
td7-2-2-12 = <code>access</code> (optional - defaults to property): the strategy Hibernate uses for accessing the collection property value.
td7-2-2-13 = <code>optimistic-lock</code> (optional - defaults to true): specifies that changes to the state of the collection results in increments of the owning entity's version. For one-to-many associations you may want to disable this setting.
td7-2-2-14 = <code>mutable</code> (optional - defaults to true): a value of false specifies that the elements of the collection never change. This allows for minor performance optimization in some cases.
p7-2-9 = After exploring the basic mapping of collections in the preceding paragraphs we will now focus details like physical mapping considerations, indexed collections and collections of value types.

#		**********************************************************************************************************
#		7.2.1. Collection foreign keys
#		**********************************************************************************************************

title7-2-1 = 7.2.1. Collection foreign keys
p7-2-1-1 = On the database level collection instances are distinguished by the foreign key of the entity that owns the collection. This foreign key is referred to as the collection key column, or columns, of the collection table. The collection key column is mapped by the <code>@JoinColumn</code> annotation respectively the <code>&lt;key&gt;</code> XML element.
p7-2-1-2 = There can be a nullability constraint on the foreign key column. For most collections, this is implied. For unidirectional one-to-many associations, the foreign key column is nullable by default, so you may need to specify
p7-2-1-3 = or
p7-2-1-4 = The foreign key constraint can use <code>ON DELETE CASCADE</code>. In XML this can be expressed via:
p7-2-1-5 = In annotations the Hibernate specific annotation <code>@OnDelete</code> has to be used.
p7-2-1-6 = See <a href="#c5-1-11-3">Section 5.1.11.3, \u201CKey\u201D</a> for more information about the <code>&lt;key&gt;</code> element.

#		**********************************************************************************************************
#		7.2.2. Indexed collections
#		**********************************************************************************************************

title7-2-2 = 7.2.2. Indexed collections
p7-2-2-1 = In the following paragraphs we have a closer look at the indexed collections List and Map how the their index can be mapped in Hibernate.

#		**********************************************************************************************************
#		7.2.2.1. Lists
#		**********************************************************************************************************

title7-2-2-1 = 7.2.2.1. Lists
p7-2-2-1-1 = Lists can be mapped in two different ways:
li7-2-2-1-1-1 = as ordered lists, where the order is not materialized in the database
li7-2-2-1-1-2 = as indexed lists, where the order is materialized in the database
p7-2-2-1-2 = To order lists in memory, add @javax.persistence.OrderBy to your property. This annotation takes as parameter a list of comma separated properties (of the target entity) and orders the collection accordingly (eg firstname asc, age desc, weight asc nulls last), if the string is empty, the collection will be ordered by the primary key of the target entity.
p7-2-2-1-3 = To store the index value in a dedicated column, use the <code>@javax.persistence.OrderColumn</code> annotation on your property. This annotations describes the column name and attributes of the column keeping the index value. This column is hosted on the table containing the association foreign key. If the column name is not specified, the default is the name of the referencing property, followed by underscore, followed by ORDER (in the following example, it would be orders_ORDER).
nc7-2-2-1-1 = We recommend you to convert the legacy <code>@org.hibernate.annotations.IndexColumn</code> usages to the JPA standard <code>@javax.persistence.OrderColumn</code>.<br/>If you are leveraging a custom list index base (maybe currently using the org.hibernate.annotations.IndexColumn.literal attribute), you can specify this using the <code>@org.hibernate.annotations.ListIndexBase</code> in conjunction with <code>@javax.persistence.OrderColumn</code>. The default base is 0 like in Java.
p7-2-2-1-4 = Looking again at the Hibernate mapping file equivalent, the index of an array or list is always of type integer and is mapped using the <code>&lt;list-index&gt;</code> element. The mapped column contains sequential integers that are numbered from zero by default.
td7-2-2-1-1-1 = <code>column_name</code> (required): the name of the column holding the collection index values. 
td7-2-2-1-1-2 = <code>base</code> (optional - defaults to 0): the value of the index column that corresponds to the first element of the list or array.
p7-2-2-1-5 = If your table does not have an index column, and you still wish to use List as the property type, you can map the property as a Hibernate <code>&lt;bag&gt;</code>. A bag does not retain its order when it is retrieved from the database, but it can be optionally sorted or ordered.

#		**********************************************************************************************************
#		7.2.2.2. Maps
#		**********************************************************************************************************

title7-2-2-2 = 7.2.2.2. Maps
p7-2-2-2-1 = The question with Maps is where the key value is stored. There are several options. Maps can borrow their keys from one of the associated entity properties or have dedicated columns to store an explicit key.
p7-2-2-2-2 = To use one of the target entity property as a key of the map, use <code>@MapKey</code>(name="myProperty"), where myProperty is a property name in the target entity. When using @MapKey without the name attribute, the target entity primary key is used. The map key uses the same column as the property pointed out. There is no additional column defined to hold the map key, because the map key represent a target property. Be aware that once loaded, the key is no longer kept in sync with the property. In other words, if you change the property value, the key will not change automatically in your Java model.
p7-2-2-2-3 = Alternatively the map key is mapped to a dedicated column or columns. In order to customize the mapping use one of the following annotations:
li7-2-2-2-1-1 = <code>@MapKeyColumn</code> if the map key is a basic type. If you don't specify the column name, the name of the property followed by underscore followed by KEY is used (for example <code>orders_KEY</code>). 
li7-2-2-2-1-2 = <code>@MapKeyEnumerated / @MapKeyTemporal</code> if the map key type is respectively an enum or a Date.
li7-2-2-2-1-3 = <code>@MapKeyJoinColumn/@MapKeyJoinColumns</code> if the map key type is another entity.
li7-2-2-2-1-4 = <code>@AttributeOverride/@AttributeOverrides</code> when the map key is a embeddable object. Use key. as a prefix for your embeddable object property names.
p7-2-2-2-4 = You can also use <code>@MapKeyClass</code> to define the type of the key if you don't use generics.
nc7-2-2-2-1-1 = We recommend you to migrate from <code>@org.hibernate.annotations.MapKey</code> / <code>@org.hibernate.annotation.MapKeyManyToMany</code> to the new standard approach described above
p7-2-2-2-5 = Using Hibernate mapping files there exists equivalent concepts to the descibed annotations. You have to use <code>&lt;map-key&gt;</code>, <code>&lt;map-key-many-to-many&gt;</code> and <code>&lt;composite-map-key&gt;</code>. <code>&lt;map-key&gt;</code> is used for any basic type, <code>&lt;map-key-many-to-many&gt;</code> for an entity reference and <code>&lt;composite-map-key&gt;</code> for a composite type.
td7-2-2-2-1-1 = <code>column</code> (optional): the name of the column holding the collection index values. 
td7-2-2-2-1-2 = <code>formula</code> (optional): a SQL formula used to evaluate the key of the map.
td7-2-2-2-1-3 = <code>type</code> (required): the type of the map keys.
td7-2-2-2-2-1 = <code>column</code> (optional): the name of the foreign key column for the collection index values. 
td7-2-2-2-2-2 = <code>formula</code> (optional): a SQ formula used to evaluate the foreign key of the map key.
td7-2-2-2-2-3 = <code>class</code> (required): the entity class used as the map key.

#		**********************************************************************************************************
#		7.2.3. Collections of basic types and embeddable objects
#		**********************************************************************************************************

title7-2-3 = 7.2.3. Collections of basic types and embeddable objects
p7-2-3-1 = In some situations you don't need to associate two entities but simply create a collection of basic types or embeddable objects. Use the <code>@ElementCollection</code> for this case.
p7-2-3-2 = The collection table holding the collection data is set using the <code>@CollectionTable</code> annotation. If omitted the collection table name defaults to the concatenation of the name of the containing entity and the name of the collection attribute, separated by an underscore. In our example, it would be User_nicknames.
p7-2-3-3 = The column holding the basic type is set using the <code>@Column</code> annotation. If omitted, the column name defaults to the property name: in our example, it would be nicknames.
p7-2-3-4 = But you are not limited to basic types, the collection type can be any embeddable object. To override the columns of the embeddable object in the collection table, use the <code>@AttributeOverride</code> annotation.
p7-2-3-5 = Such an embeddable object cannot contains a collection itself.
nc7-2-3-1 = in <code>@AttributeOverride</code>, you must use the value. prefix to override properties of the embeddable object used in the map value and the key. prefix to override properties of the embeddable object used in the map key.
nc7-2-3-2 = We recommend you to migrate from <code>@org.hibernate.annotations.CollectionOfElements</code> to the new <code>@ElementCollection</code> annotation.
p7-2-3-6 = Using the mapping file approach a collection of values is mapped using the <code>&lt;element&gt;</code> tag. For example:
td7-2-3-1-1 = <code>column</code> (optional): the name of the column holding the collection element values. 
td7-2-3-1-2 = <code>formula</code> (optional): an SQL formula used to evaluate the element.
td7-2-3-1-3 = <code>type</code> (required): the type of the collection element.

#		**********************************************************************************************************
#		7.3. Advanced collection mappings
#		**********************************************************************************************************

title7-3 = 7.3. Advanced collection mappings

#		**********************************************************************************************************
#		7.3.1. Sorted collections
#		**********************************************************************************************************

title7-3-1 = 7.3.1. Sorted collections
p7-3-1-1 = Hibernate supports collections implementing <code>java.util.SortedMap</code> and <code>java.util.SortedSet</code>. With annotations you declare a sort comparator using <code>@Sort</code>. You chose between the comparator types unsorted, natural or custom. If you want to use your own comparator implementation, you'll also have to specify the implementation class using the comparator attribute. Note that you need to use either a SortedSet or a SortedMap interface.
p7-3-1-2 = Using Hibernate mapping files you specify a comparator in the mapping file with <code>&lt;sort&gt;</code>:
p7-3-1-3 = Allowed values of the sort attribute are unsorted, natural and the name of a class implementing <code>java.util.Comparator</code>.
tc7-3-1-1 = Sorted collections actually behave like <code>java.util.TreeSet</code> or <code>java.util.TreeMap</code>.
p7-3-1-4 = If you want the database itself to order the collection elements, use the order-by attribute of set, bag or map mappings. This solution is implemented using LinkedHashSet or LinkedHashMap and performs the ordering in the SQL query and not in the memory.
nc7-3-1-1 = The value of the order-by attribute is an SQL ordering, not an HQL ordering.
p7-3-1-5 = Associations can even be sorted by arbitrary criteria at runtime using a collection <code>filter()</code>:

#		**********************************************************************************************************
#		7.3.2. Bidirectional associations
#		**********************************************************************************************************

title7-3-2 = 7.3.2. Bidirectional associations
p7-3-2-1 = A bidirectional association allows navigation from both "ends" of the association. Two kinds of bidirectional association are supported:
dd7-3-2-1-1 = set or bag valued at one end and single-valued at the other 
dd7-3-2-1-2 = set or bag valued at both ends
p7-3-2-2 = Often there exists a many to one association which is the owner side of a bidirectional relationship. The corresponding one to many association is in this case annotated by <code>@OneToMany(mappedBy=...)</code>
p7-3-2-3 = <code>Troop</code> has a bidirectional one to many relationship with Soldier through the troop property. You don't have to (must not) define any physical mapping in the mappedBy side.
p7-3-2-4 = To map a bidirectional one to many, with the <code>one-to-many</code> side as the owning side, you have to remove the mappedBy element and set the many to one <code>@JoinColumn</code> as insertable and updatable to false. This solution is not optimized and will produce additional <code>UPDATE</code> statements.
p7-3-2-5 = How does the mappping of a bidirectional mapping look like in Hibernate mapping xml? There you define a bidirectional one-to-many association by mapping a one-to-many association to the same table column(s) as a many-to-one association and declaring the many-valued end <code>inverse="true"</code>.
p7-3-2-6 = Mapping one end of an association with <code>inverse="true"</code> does not affect the operation of cascades as these are orthogonal concepts.
p7-3-2-7 = A many-to-many association is defined logically using the @ManyToMany annotation. You also have to describe the association table and the join conditions using the @JoinTable annotation. If the association is bidirectional, one side has to be the owner and one side has to be the inverse end (ie. it will be ignored when updating the relationship values in the association table):
p7-3-2-8 = In this example <code>@JoinTable</code> defines a name, an array of join columns, and an array of inverse join columns. The latter ones are the columns of the association table which refer to the Employee primary key (the "other side"). As seen previously, the other side don't have to (must not) describe the physical mapping: a simple mappedBy argument containing the owner side property name bind the two.
p7-3-2-9 = As any other annotations, most values are guessed in a many to many relationship. Without describing any physical mapping in a unidirectional many to many the following rules applied. The table name is the concatenation of the owner table name, _ and the other side table name. The foreign key name(s) referencing the owner table is the concatenation of the owner table name, _ and the owner primary key column(s). The foreign key name(s) referencing the other side is the concatenation of the owner property name, _, and the other side primary key column(s). These are the same rules used for a unidirectional one to many relationship.
p7-3-2-10 = A <code>Store_City</code> is used as the join table. The <code>Store_id</code> column is a foreign key to the Store table. The <code>implantedIn_id</code> column is a foreign key to the City table.
p7-3-2-11 = Without describing any physical mapping in a bidirectional many to many the following rules applied. The table name is the concatenation of the owner table name, _ and the other side table name. The foreign key name(s) referencing the owner table is the concatenation of the other side property name, _, and the owner primary key column(s). The foreign key name(s) referencing the other side is the concatenation of the owner property name, _, and the other side primary key column(s). These are the same rules used for a unidirectional one to many relationship.
p7-3-2-12 = A <code>Store_Customer</code> is used as the join table. The <code>stores_id</code> column is a foreign key to the Store table. The <code>customers_id</code> column is a foreign key to the Customer table.
p7-3-2-13 = Using Hibernate mapping files you can map a bidirectional many-to-many association by mapping two many-to-many associations to the same database table and declaring one end as inverse. 
nc7-3-2-1 = You cannot select an indexed collection.
p7-3-2-14 = <a href="##example-many-to-many-mapping-file">Example 7.27, \u201CMany to many association using Hibernate mapping files\u201D</a> shows a bidirectional many-to-many association that illustrates how each category can have many items and each item can be in many categories:
p7-3-2-15 = Changes made only to the inverse end of the association are not persisted. This means that Hibernate has two representations in memory for every bidirectional association: one link from A to B and another link from B to A. This is easier to understand if you think about the Java object model and how a many-to-many relationship in Javais created:
p7-3-2-16 = The non-inverse side is used to save the in-memory representation to the database.

#		**********************************************************************************************************
#		7.3.3. Bidirectional associations with indexed collections
#		**********************************************************************************************************

title7-3-3 = 7.3.3. Bidirectional associations with indexed collections
p7-3-3-1 = There are some additional considerations for bidirectional mappings with indexed collections (where one end is represented as a <code>&lt;list&gt;</code> or <code>&lt;map&gt;</code>) when using Hibernate mapping files. If there is a property of the child class that maps to the index column you can use <code>inverse="true"</code> on the collection mapping:
p7-3-3-2 = If there is no such property on the child class, the association cannot be considered truly bidirectional. That is, there is information available at one end of the association that is not available at the other end. In this case, you cannot map the collection inverse="true". Instead, you could use the following mapping:
p7-3-3-3 = Note that in this mapping, the collection-valued end of the association is responsible for updates to the foreign key.

#		**********************************************************************************************************
#		7.3.4. Ternary associations
#		**********************************************************************************************************

title7-3-4 = 7.3.4. Ternary associations
p7-3-4-1 = There are three possible approaches to mapping a ternary association. One approach is to use a Map with an association as its index:
p7-3-4-2 = A second approach is to remodel the association as an entity class. This is the most common approach. A final alternative is to use composite elements, which will be discussed later.

#		**********************************************************************************************************
#		7.3.5. Using an <idbag>
#		**********************************************************************************************************

title7-3-5 = 7.3.5. Using an &lt;idbag&gt;
p7-3-5-1 = The majority of the many-to-many associations and collections of values shown previously all map to tables with composite keys, even though it has been suggested that entities should have synthetic identifiers (surrogate keys). A pure association table does not seem to benefit much from a surrogate key, although a collection of composite values might. For this reason Hibernate provides a feature that allows you to map many-to-many associations and collections of values to a table with a surrogate key.
p7-3-5-2 = The <code>&lt;idbag&gt;</code> element lets you map a List (or Collection) with bag semantics. For example:
p7-3-5-3 = An <code>&lt;idbag&gt;</code> has a synthetic id generator, just like an entity class. A different surrogate key is assigned to each collection row. Hibernate does not, however, provide any mechanism for discovering the surrogate key value of a particular row.
p7-3-5-4 = The update performance of an <code>&lt;idbag&gt;</code> supersedes a regular <code>&lt;bag&gt;</code>. Hibernate can locate individual rows efficiently and update or delete them individually, similar to a list, map or set.
p7-3-5-5 = In the current implementation, the native identifier generation strategy is not supported for <code>&lt;idbag&gt;</code> collection identifiers.

#		**********************************************************************************************************
#		7.4. Collection examples
#		**********************************************************************************************************

title7-4 = 7.4. Collection examples
p7-4-1 = This section covers collection examples.
p7-4-2 = The following class has a collection of Child instances:
p7-4-3 = If each child has, at most, one parent, the most natural mapping is a one-to-many association:
p7-4-4 = This maps to the following table definitions:
p7-4-5 = If the parent is required, use a bidirectional one-to-many association:
p7-4-6 = Notice the <code>NOT NULL</code> constraint:
p7-4-7 = Alternatively, if this association must be unidirectional you can enforce the <code>NOT NULL</code> constraint.
p7-4-8 = On the other hand, if a child has multiple parents, a many-to-many association is appropriate.
p7-4-9 = Table definitions:
p7-4-10 = For more examples and a complete explanation of a parent/child relationship mapping, see <a href="#c23">Chapter 23, Example: Parent/Child</a> for more information. Even more complex association mappings are covered in the next chapter.




















