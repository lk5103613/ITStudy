
#		**********************************************************************************************************
#		Chapter 12. Read-only entities
#		**********************************************************************************************************

title12 = Chapter 12. Read-only entities
ic12-1 = Hibernate's treatment of read-only entities may differ from what you may have encountered elsewhere. Incorrect usage may cause unexpected results.
p12-1 = When an entity is read-only:
li12-1-1 = Hibernate does not dirty-check the entity's simple properties or single-ended associations;
li12-1-2 = Hibernate will not update simple properties or updatable single-ended associations;
li12-1-3 = Hibernate will not update the version of the read-only entity if only simple properties or single-ended updatable associations are changed;
p12-2 = In some ways, Hibernate treats read-only entities the same as entities that are not read-only:
li12-2-1 = Hibernate cascades operations to associations as defined in the entity mapping.
li12-2-2 = Hibernate updates the version if the entity has a collection with changes that dirties the entity;
li12-2-3 = A read-only entity can be deleted.
p12-3 = Even if an entity is not read-only, its collection association can be affected if it contains a read-only entity.
p12-4 = For details about the affect of read-only entities on different property and association types, see <a href="#c12-2">Section 12.2, \u201CRead-only affect on property type\u201D</a>.
p12-5 = For details about how to make entities read-only, see <a href="#c12-1">Section 12.1, \u201CMaking persistent entities read-only\u201D</a>
p12-6 = Hibernate does some optimizing for read-only entities:
li12-3-1 = It saves execution time by not dirty-checking simple properties or single-ended associations.
li12-3-2 = It saves memory by deleting database snapshots.

#		**********************************************************************************************************
#		12.1. Making persistent entities read-only
#		**********************************************************************************************************

title12-1 = 12.1. Making persistent entities read-only
p12-1-1 = Only persistent entities can be made read-only. Transient and detached entities must be put in persistent state before they can be made read-only.
p12-1-2 = Hibernate provides the following ways to make persistent entities read-only:
li12-1-1-1 = you can map an entity class as <code>immutable</code>; when an entity of an immutable class is made persistent, Hibernate automatically makes it read-only. see <a href="#c12-1-1">Section 12.1.1, \u201CEntities of immutable classes\u201D</a> for details 
li12-1-1-2 = you can change a default so that entities loaded into the session by Hibernate are automatically made read-only; see <a href="#c12-1-2">Section 12.1.2, \u201CLoading persistent entities as read-only\u201D</a> for details
li12-1-1-3 = you can make an HQL query or criteria read-only so that entities loaded when the query or criteria executes, scrolls, or iterates, are automatically made read-only; see <a href="#c12-1-3">Section 12.1.3, \u201CLoading read-only entities from an HQL query/criteria\u201D</a> for details
li12-1-1-4 = you can make a persistent entity that is already in the in the session read-only; see <a href="#c12-1-4">Section 12.1.4, \u201CMaking a persistent entity read-only\u201D</a> for details

#		**********************************************************************************************************
#		12.1.1. Entities of immutable classes
#		**********************************************************************************************************

title12-1-1 = 12.1.1. Entities of immutable classes
p12-1-1-1 = When an entity instance of an immutable class is made persistent, Hibernate automatically makes it read-only.
p12-1-1-2 = An entity of an immutable class can created and deleted the same as an entity of a mutable class.
p12-1-1-3 = Hibernate treats a persistent entity of an immutable class the same way as a read-only persistent entity of a mutable class. The only exception is that Hibernate will not allow an entity of an immutable class to be changed so it is not read-only.

#		**********************************************************************************************************
#		12.1.2. Loading persistent entities as read-only
#		**********************************************************************************************************

title12-1-2 = 12.1.2. Loading persistent entities as read-only
nc12-1-2-1 = Entities of immutable classes are automatically loaded as read-only.
p12-1-2-1 = To change the default behavior so Hibernate loads entity instances of mutable classes into the session and automatically makes them read-only, call:
p12-1-2-2 = To change the default back so entities loaded by Hibernate are not made read-only, call:
p12-1-2-3 = You can determine the current setting by calling:
p12-1-2-4 = If <code>Session.isDefaultReadOnly()</code> returns true, entities loaded by the following are automatically made read-only:
li12-1-2-1-1 = <code>Session.load()</code>
li12-1-2-1-2 = <code>Session.get()</code>
li12-1-2-1-3 = <code>Session.merge()</code>
li12-1-2-1-4 = executing, scrolling, or iterating HQL queries and criteria; to override this setting for a particular HQL query or criteria see <a href="#c12-1-3">Section 12.1.3, \u201CLoading read-only entities from an HQL query/criteria\u201D</a>
p12-1-2-5 = Changing this default has no effect on:
li12-1-2-2-1 = persistent entities already in the session when the default was changed
li12-1-2-2-2 = persistent entities that are refreshed via <code>Session.refresh()</code>; a refreshed persistent entity will only be read-only if it was read-only before refreshing
li12-1-2-2-3 = persistent entities added by the application via <code>Session.persist()</code>, <code>Session.save()</code>, and <code>Session.update()</code> <code>Session.saveOrUpdate()</code>

#		**********************************************************************************************************
#		12.1.3. Loading read-only entities from an HQL query/criteria
#		**********************************************************************************************************

title12-1-3 = 12.1.3. Loading read-only entities from an HQL query/criteria
nc12-1-3-1 = Entities of immutable classes are automatically loaded as read-only.
p12-1-3-1 = If <code>Session.isDefaultReadOnly()</code> returns false (the default) when an HQL query or criteria executes, then entities and proxies of mutable classes loaded by the query will not be read-only.
p12-1-3-2 = You can override this behavior so that entities and proxies loaded by an HQL query or criteria are automatically made read-only.
p12-1-3-3 = For an HQL query, call:
p12-1-3-4 = <code>Query.setReadOnly( true )</code> must be called before <code>Query.list()</code>, <code>Query.uniqueResult()</code>, <code>Query.scroll()</code>, or <code>Query.iterate()</code>
p12-1-3-5 = For an HQL criteria, call:
p12-1-3-6 = <code>Criteria.setReadOnly( true )</code> must be called before <code>Criteria.list()</code>, <code>Criteria.uniqueResult()</code>, or <code>Criteria.scroll()</code>
p12-1-3-7 = Entities and proxies that exist in the session before being returned by an HQL query or criteria are not affected.
p12-1-3-8 = Uninitialized persistent collections returned by the query are not affected. Later, when the collection is initialized, entities loaded into the session will be read-only if <code>Session.isDefaultReadOnly()</code> returns true.
p12-1-3-9 = Using <code>Query.setReadOnly( true )</code> or <code>Criteria.setReadOnly( true )</code> works well when a single HQL query or criteria loads all the entities and intializes all the proxies and collections that the application needs to be read-only.
p12-1-3-10 = When it is not possible to load and initialize all necessary entities in a single query or criteria, you can temporarily change the session default to load entities as read-only before the query is executed. Then you can explicitly initialize proxies and collections before restoring the session default.
p12-1-3-11 = If <code>Session.isDefaultReadOnly()</code> returns true, then you can use <code>Query.setReadOnly( false )</code> and <code>Criteria.setReadOnly( false )</code> to override this session setting and load entities that are not read-only.

#		**********************************************************************************************************
#		12.1.4. Making a persistent entity read-only
#		**********************************************************************************************************

title12-1-4 = 12.1.4. Making a persistent entity read-only
nc12-1-4-1 = Persistent entities of immutable classes are automatically made read-only.
p12-1-4-1 = To make a persistent entity or proxy read-only, call:
p12-1-4-2 = To change a read-only entity or proxy of a mutable class so it is no longer read-only, call:
ic12-1-4-1 = When a read-only entity or proxy is changed so it is no longer read-only, Hibernate assumes that the current state of the read-only entity is consistent with its database representation. If this is not true, then any non-flushed changes made before or while the entity was read-only, will be ignored.
p12-1-4-3 = To throw away non-flushed changes and make the persistent entity consistent with its database representation, call:
p12-1-4-4 = To flush changes made before or while the entity was read-only and make the database representation consistent with the current state of the persistent entity:

#		**********************************************************************************************************
#		12.2. Read-only affect on property type
#		**********************************************************************************************************

title12-2 = 12.2. Read-only affect on property type
p12-2-1 = The following table summarizes how different property types are affected by making an entity read-only.
p12-2-2 = <strong>Table 12.1. Affect of read-only entity on property types</strong>
th12-2-1-1 = Property/Association Type
th12-2-1-2 = Changes flushed to DB?
td12-2-1-1 = Simple (<a href="#c12-2-1">Section 12.2.1, \u201CSimple properties\u201D</a>) 
td12-2-1-2 = no*
td12-2-1-3 = <p>Unidirectional one-to-one</p><p>Unidirectional many-to-one</p><p>(<a href="#c12-2-2-1">Section 12.2.2.1, \u201CUnidirectional one-to-one and many-to-one\u201D</a>)</p>
td12-2-1-4 = <p>no*</p><p>no*</p>
td12-2-1-5 = <p>Unidirectional one-to-many</p><p>Unidirectional many-to-many</p><p>(<a href="#c12-2-2-2">Section 12.2.2.2, \u201CUnidirectional one-to-many and many-to-many\u201D</a>)</p>
td12-2-1-6 = <p>yes</p><p>yes</p>
td12-2-1-7 =  <p>Bidirectional one-to-one</p><p>(<a href="#c12-2-3-1">Section&nbsp;12.2.3.1, \u201CBidirectional one-to-one\u201D</a>)</p>
td12-2-1-8 = only if the owning entity is not read-only*
td12-2-1-9 = <p>Bidirectional one-to-many/many-to-one</p><p>inverse collection</p><p>non-inverse collection</p><p>(<a href="#c12-2-3-2">Section&nbsp;12.2.3.2, \u201CBidirectional one-to-many/many-to-one\u201D</a>)</p>
td12-2-1-10 = <p></p><p>only added/removed entities that are not read-only*</p><p>yes</p>
td12-2-1-11 = <p>Bidirectional many-to-many</p><p>(<a href="#c12-2-3-3">Section&nbsp;12.2.3.3, \u201CBidirectional many-to-many\u201D</a>)</p>
td12-2-1-12 = yes
p12-2-3 = * Behavior is different when the entity having the property/association is read-only, compared to when it is not read-only.

#		**********************************************************************************************************
#		12.2.1. Simple properties
#		**********************************************************************************************************

title12-2-1 = 12.2.1. Simple properties
p12-2-1-1 = When a persistent object is read-only, Hibernate does not dirty-check simple properties.
p12-2-1-2 = Hibernate will not synchronize simple property state changes to the database. If you have automatic versioning, Hibernate will not increment the version if any simple properties change.

#		**********************************************************************************************************
#		12.2.2. Unidirectional associations
#		**********************************************************************************************************

title12-2-2 = 12.2.2. Unidirectional associations

#		**********************************************************************************************************
#		12.2.2.1. Unidirectional one-to-one and many-to-one
#		**********************************************************************************************************

title12-2-2-1 = 12.2.2.1. Unidirectional one-to-one and many-to-one
p12-2-2-1-1 = Hibernate treats unidirectional one-to-one and many-to-one associations in the same way when the owning entity is read-only. 
p12-2-2-1-2 = We use the term unidirectional single-ended association when referring to functionality that is common to unidirectional one-to-one and many-to-one associations.
p12-2-2-1-3 = Hibernate does not dirty-check unidirectional single-ended associations when the owning entity is read-only.
p12-2-2-1-4 = If you change a read-only entity's reference to a unidirectional single-ended association to null, or to refer to a different entity, that change will not be flushed to the database.
nc12-2-2-1-1 = If an entity is of an immutable class, then its references to unidirectional single-ended associations must be assigned when that entity is first created. Because the entity is automatically made read-only, these references can not be updated.
p12-2-2-1-5 = If automatic versioning is used, Hibernate will not increment the version due to local changes to unidirectional single-ended associations.
p12-2-2-1-6 = In the following examples, Contract has a unidirectional many-to-one association with Plan. Contract cascades save and update operations to the association.
p12-2-2-1-7 = The following shows that changing a read-only entity's many-to-one association reference to null has no effect on the entity's database representation.
p12-2-2-1-8 = The following shows that, even though an update to a read-only entity's many-to-one association has no affect on the entity's database representation, flush still cascades the save-update operation to the locally changed association.

#		**********************************************************************************************************
#		12.2.2.2. Unidirectional one-to-many and many-to-many
#		**********************************************************************************************************

title12-2-2-2 = 12.2.2.2. Unidirectional one-to-many and many-to-many
p12-2-2-2-1 = Hibernate treats unidirectional one-to-many and many-to-many associations owned by a read-only entity the same as when owned by an entity that is not read-only.
p12-2-2-2-2 = Hibernate dirty-checks unidirectional one-to-many and many-to-many associations;
p12-2-2-2-3 = The collection can contain entities that are read-only, as well as entities that are not read-only.
p12-2-2-2-4 = Entities can be added and removed from the collection; changes are flushed to the database.
p12-2-2-2-5 = If automatic versioning is used, Hibernate will update the version due to changes in the collection if they dirty the owning entity.

#		**********************************************************************************************************
#		12.2.3. Bidirectional associations
#		**********************************************************************************************************

title12-2-3 = 12.2.3. Bidirectional associations

#		**********************************************************************************************************
#		12.2.3.1. Bidirectional one-to-one
#		**********************************************************************************************************

title12-2-3-1 = 12.2.3.1. Bidirectional one-to-one
p12-2-3-1-1 = If a read-only entity owns a bidirectional one-to-one association:
li12-2-3-1-1-1 = Hibernate does not dirty-check the association. 
li12-2-3-1-1-2 = updates that change the association reference to null or to refer to a different entity will not be flushed to the database.
li12-2-3-1-1-3 = If automatic versioning is used, Hibernate will not increment the version due to local changes to the association.
nc12-2-3-1-1 = If an entity is of an immutable class, and it owns a bidirectional one-to-one association, then its reference must be assigned when that entity is first created. Because the entity is automatically made read-only, these references cannot be updated.
p12-2-3-1-2 = When the owner is not read-only, Hibernate treats an association with a read-only entity the same as when the association is with an entity that is not read-only.

#		**********************************************************************************************************
#		12.2.3.2. Bidirectional one-to-many/many-to-one
#		**********************************************************************************************************

title12-2-3-2 = 12.2.3.2. Bidirectional one-to-many/many-to-one
p12-2-3-2-1 = A read-only entity has no impact on a bidirectional one-to-many/many-to-one association if:
li12-2-3-2-1-1 = the read-only entity is on the one-to-many side using an inverse collection;
li12-2-3-2-1-2 = the read-only entity is on the one-to-many side using a non-inverse collection;
li12-2-3-2-1-3 = the one-to-many side uses a non-inverse collection that contains the read-only entity
p12-2-3-2-2 = When the one-to-many side uses an inverse collection:
li12-2-3-2-2-1 = a read-only entity can only be added to the collection when it is created;
li12-2-3-2-2-2 = a read-only entity can only be removed from the collection by an orphan delete or by explicitly deleting the entity.

#		**********************************************************************************************************
#		12.2.3.3. Bidirectional many-to-many
#		**********************************************************************************************************

title12-2-3-3 = 12.2.3.3. Bidirectional many-to-many
p12-2-3-3-1 = Hibernate treats bidirectional many-to-many associations owned by a read-only entity the same as when owned by an entity that is not read-only.
p12-2-3-3-2 = Hibernate dirty-checks bidirectional many-to-many associations.
p12-2-3-3-3 = The collection on either side of the association can contain entities that are read-only, as well as entities that are not read-only. 
p12-2-3-3-4 = Entities are added and removed from both sides of the collection; changes are flushed to the database.
p12-2-3-3-5 = If automatic versioning is used, Hibernate will update the version due to changes in both sides of the collection if they dirty the entity owning the respective collections.















