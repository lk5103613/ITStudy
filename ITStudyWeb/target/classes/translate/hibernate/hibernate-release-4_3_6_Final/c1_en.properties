
#		**********************************************************************************************************
#		Chapter 1. Tutorial
#		p1
#		important-content
#		note-content
#		**********************************************************************************************************

title1 = Chapter 1. Tutorial
p1 = Intended for new users, this chapter provides an step-by-step introduction to Hibernate, starting with a simple application using an in-memory database. The tutorial is based on an earlier tutorial developed by Michael Gloegl. All code is contained in the tutorials/web directory of the project source.
import-content = This tutorial expects the user have knowledge of both Java and SQL. If you have a limited knowledge of JAVA or SQL, it is advised that you start with a good introduction to that technology prior to attempting to learn Hibernate.
note-content = The distribution contains another example application under the tutorial/eg project source directory.

#		**********************************************************************************************************
#		1.1. Part 1 - The first Hibernate Application
#		p2
#		note-content2
#		**********************************************************************************************************

title2 = 1.1. Part 1 - The first Hibernate Application
p2 = For this example, we will set up a small database application that can store events we want to attend and information about the host(s) of these events.
note-content2 = Although you can use whatever database you feel comfortable using, we will use HSQLDB (an in-memory, Java database) to avoid describing installation/setup of any particular database servers.

#		**********************************************************************************************************
#		1.1.1. Setup
#		p5
#		tip-content
#		**********************************************************************************************************

title3 = 1.1.1. Setup
p3 = The first thing we need to do is to set up the development environment. We will be using the "standard layout" advocated by alot of build tools such as Maven. Maven, in particular, has a good resource describing this layout. As this tutorial is to be a web application, we will be creating and making use of src/main/java, src/main/resources and src/main/webapp directories.
p4 = We will be using Maven in this tutorial, taking advantage of its transitive dependency management capabilities as well as the ability of many IDEs to automatically set up a project for us based on the maven descriptor.
tip-content = It is not a requirement to use Maven. If you wish to use something else to build this tutorial (such as Ant), the layout will remain the same. The only change is that you will need to manually account for all the needed dependencies. If you use something like Ivy providing transitive dependency management you would still use the dependencies mentioned below. Otherwise, you'd need to grab all dependencies, both explicit and transitive, and add them to the project's classpath. If working from the Hibernate distribution bundle, this would mean hibernate3.jar, all artifacts in the lib/required directory and all files from either the lib/bytecode/cglib or lib/bytecode/javassist directory; additionally you will need both the servlet-api jar and one of the slf4j logging backends.
p5 = Save this file as pom.xml in the project root directory.

#		**********************************************************************************************************
#		1.1.2. The first class
#		p10
#		**********************************************************************************************************

title4 = 1.1.2. The first class
p6 = Next, we create a class that represents the event we want to store in the database; it is a simple JavaBean class with some properties: 
p7 = This class uses standard JavaBean naming conventions for property getter and setter methods, as well as private visibility for the fields. Although this is the recommended design, it is not required. Hibernate can also access fields directly, the benefit of accessor methods is robustness for refactoring.
p8 = The id property holds a unique identifier value for a particular event. All persistent entity classes (there are less important dependent classes as well) will need such an identifier property if we want to use the full feature set of Hibernate. In fact, most applications, especially web applications, need to distinguish objects by identifier, so you should consider this a feature rather than a limitation. However, we usually do not manipulate the identity of an object, hence the setter method should be private. Only Hibernate will assign identifiers when an object is saved. Hibernate can access public, private, and protected accessor methods, as well as public, private and protected fields directly. The choice is up to you and you can match it to fit your application design.
p9 = The no-argument constructor is a requirement for all persistent classes; Hibernate has to create objects for you, using Java Reflection. The constructor can be private, however package or public visibility is required for runtime proxy generation and efficient data retrieval without bytecode instrumentation.
p10 = Save this file to the <small>src/main/java/org/hibernate/tutorial/domain</small> directory.

#		**********************************************************************************************************
#		1.1.3. The mapping file
#		p21
#		import-content2
#		tip-content3
#		note-content3
#		**********************************************************************************************************

title5 = 1.1.3. The mapping file
p11 = Hibernate needs to know how to load and store objects of the persistent class. This is where the Hibernate mapping file comes into play. The mapping file tells Hibernate what table in the database it has to access, and what columns in that table it should use.
p12 = The basic structure of a mapping file looks like this:
p13 = Hibernate DTD is sophisticated. You can use it for auto-completion of XML mapping elements and attributes in your editor or IDE. Opening up the DTD file in your text editor is the easiest way to get an overview of all elements and attributes, and to view the defaults, as well as some comments. Hibernate will not load the DTD file from the web, but first look it up from the classpath of the application. The DTD file is included in hibernate-core.jar (it is also included in the hibernate3.jar, if using the distribution bundle).
import-content2 = We will omit the DTD declaration in future examples to shorten the code. It is, of course, not optional.
p14 = Between the two hibernate-mapping tags, include a class element. All persistent entity classes (again, there might be dependent classes later on, which are not first-class entities) need a mapping to a table in the SQL database:
p15 = So far we have told Hibernate how to persist and load object of class Event to the table EVENTS. Each instance is now represented by a row in that table. Now we can continue by mapping the unique identifier property to the tables primary key. As we do not want to care about handling this identifier, we configure Hibernate's identifier generation strategy for a surrogate primary key column:
p16 = The id element is the declaration of the identifier property. The name="id" mapping attribute declares the name of the JavaBean property and tells Hibernate to use the getId() and setId() methods to access the property. The column attribute tells Hibernate which column of the EVENTS table holds the primary key value.
p17 = The nested generator element specifies the identifier generation strategy (aka how are identifier values generated?). In this case we choose native, which offers a level of portability depending on the configured database dialect. Hibernate supports database generated, globally unique, as well as application assigned, identifiers. Identifier value generation is also one of Hibernate's many extension points and you can plugin in your own strategy.
tip-content2 = <small>native</small> is no longer consider the best strategy in terms of portability. for further discussion, see Section 27.4, \u201CIdentifier generation\u201D
p18 = Lastly, we need to tell Hibernate about the remaining entity class properties. By default, no properties of the class are considered persistent:
p19 = Similar to the id element, the name attribute of the property element tells Hibernate which getter and setter methods to use. In this case, Hibernate will search for <small>getDate()</small>, <small>setDate()</small>, <small>getTitle()</small> and <small>setTitle()</small> methods.
note-content3 = Why does the date property mapping include the column attribute, but the title does not? Without the column attribute, Hibernate by default uses the property name as the column name. This works for title, however, date is a reserved keyword in most databases so you will need to map it to a different name.
p20 = The <small>title</small> mapping also lacks a <small>type</small> attribute. The types declared and used in the mapping files are not Java data types; they are not SQL database types either. These types are called <small>Hibernate mapping types</small>, converters which can translate from Java to SQL data types and vice versa. Again, Hibernate will try to determine the correct conversion and mapping type itself if the type attribute is not present in the mapping. In some cases this automatic detection using Reflection on the Java class might not have the default you expect or need. This is the case with the date property. Hibernate cannot know if the property, which is of <code>java.util.Date</code>, should map to a SQL date, timestamp, or time column. Full date and time information is preserved by mapping the property with a timestamp converter.
tip-content3 = Hibernate makes this mapping type determination using reflection when the mapping files are processed. This can take time and resources, so if startup performance is important you should consider explicitly defining the type to use.
p21 = Save this mapping file as <small>src/main/resources/org/hibernate/tutorial/domain/Event.hbm.xml.</small>

#		**********************************************************************************************************
#		1.1.4. Hibernate configuration
#		p29
#		tip-content4
#		note-content4
#		caution-content
#		**********************************************************************************************************

title6 = 1.1.4. Hibernate configuration
p22 = At this point, you should have the persistent class and its mapping file in place. It is now time to configure Hibernate. First let's set up HSQLDB to run in "server mode"
note-content4 = We do this so that the data remains between runs.
p23 = We will utilize the Maven exec plugin to launch the HSQLDB server by running: <strong>mvn exec:java -Dexec.mainClass="org.hsqldb.Server" -Dexec.args="-database.0 file:target/data/tutorial</strong>" You will see it start up and bind to a TCP/IP socket; this is where our application will connect later. If you want to start with a fresh database during this tutorial, shutdown HSQLDB, delete all files in the target/data directory, and start HSQLDB again.
p24 = Hibernate will be connecting to the database on behalf of your application, so it needs to know how to obtain connections. For this tutorial we will be using a standalone connection pool (as opposed to a javax.sql.DataSource). Hibernate comes with support for two third-party open source JDBC connection pools: c3p0 and proxool. However, we will be using the Hibernate built-in connection pool for this tutorial.
caution-content = The built-in Hibernate connection pool is in no way intended for production use. It lacks several features found on any decent connection pool.
p25 = For Hibernate's configuration, we can use a simple <small>hibernate.properties</small> file, a more sophisticated <small>hibernate.cfg.xml</small> file, or even complete programmatic setup. Most users prefer the XML configuration file:
note-content5 = Notice that this configuration file specifies a different DTD
p26 = You configure Hibernate's <var>SessionFactory</var>. SessionFactory is a global factory responsible for a particular database. If you have several databases, for easier startup you should use several <code>&lt;session-factory&gt;</code> configurations in several configuration files.
p27 = The first four <small>property</small> elements contain the necessary configuration for the JDBC connection. The dialect <small>property</small> element specifies the particular SQL variant Hibernate generates.
tip-content4 = In most cases, Hibernate is able to properly determine which dialect to use. See Section 27.3, \u201CDialect resolution\u201D for more information.
p28 = Hibernate's automatic session management for persistence contexts is particularly useful in this context. The <small>hbm2ddl.auto</small> option turns on automatic generation of database schemas directly into the database. This can also be turned off by removing the configuration option, or redirected to a file with the help of the <small>SchemaExport</small> Ant task. Finally, add the mapping file(s) for persistent classes to the configuration.
p29 = Save this file as hibernate.cfg.xml into the <var>src/main/resources</var> directory.

#		**********************************************************************************************************
#		1.1.5. Building with Maven
#		p30
#		tip-content4
#		note-content5
#		caution-content
#		**********************************************************************************************************

title7 = 1.1.5. Building with Maven
p30 = We will now build the tutorial with Maven. You will need to have Maven installed; it is available from the <a href="http://maven.apache.org/download.cgi">Maven download page</a>. Maven will read the <small>/pom.xml</small> file we created earlier and know how to perform some basic project tasks. First, lets run the <small>compile</small> goal to make sure we can compile everything so far:

#		**********************************************************************************************************
#		1.1.6. Startup and helpers
#		p37
#		tip-content4
#		note-content5
#		caution-content
#		**********************************************************************************************************

title8 = 1.1.6. Startup and helpers
p31 = It is time to load and store some Event objects, but first you have to complete the setup with some infrastructure code. You have to startup Hibernate by building a global <code>org.hibernate.SessionFactory</code> object and storing it somewhere for easy access in application code. A <code>org.hibernate.SessionFactory</code> is used to obtain <code>org.hibernate.Session</code> instances. A <code>org.hibernate.Session</code> represents a single-threaded unit of work. The <code>org.hibernate.SessionFactory</code> is a thread-safe global object that is instantiated once.
p32 = We will create a <small>HibernateUtil</small> helper class that takes care of startup and makes accessing the <code>org.hibernate.SessionFactory</code> more convenient.
p33 = Save this code as <small>src/main/java/org/hibernate/tutorial/util/HibernateUtil.java</small>
p34 = This class not only produces the global <code>org.hibernate.SessionFactory</code> reference in its static initializer; it also hides the fact that it uses a static singleton. We might just as well have looked up the <code>org.hibernate.SessionFactory</code> reference from JNDI in an application server or any other location for that matter.
p35 = If you give the <code>org.hibernate.SessionFactory</code> a name in your configuration, Hibernate will try to bind it to JNDI under that name after it has been built. Another, better option is to use a JMX deployment and let the JMX-capable container instantiate and bind a HibernateService to JNDI. Such advanced options are discussed later.
p36 = You now need to configure a logging system. Hibernate uses commons logging and provides two choices: Log4j and JDK 1.4 logging. Most developers prefer Log4j: copy log4j.properties from the Hibernate distribution in the etc/ directory to your src directory, next to hibernate.cfg.xml. If you prefer to have more verbose output than that provided in the example configuration, you can change the settings. By default, only the Hibernate startup message is shown on stdout.
p37 = The tutorial infrastructure is complete and you are now ready to do some real work with Hibernate.

#		**********************************************************************************************************
#		1.1.7. Loading and storing objects
#		p51
#		tip-content4
#		note-content6
#		caution-content
#		important-content2
#		**********************************************************************************************************

title9 = 1.1.7. Loading and storing objects
p38 = We are now ready to start doing some real work with Hibernate. Let's start by writing an EventManager class with a <small>main()</small> method:
p39 = In <small>createAndStoreEvent()</small> we created a new <small>Event</small> object and handed it over to Hibernate. At that point, Hibernate takes care of the SQL and executes an INSERT on the database.
p40 = A <code>org.hibernate.Session</code> is designed to represent a single unit of work (a single atomic piece of work to be performed). For now we will keep things simple and assume a one-to-one granularity between a Hibernate <code>org.hibernate.Session</code> and a database transaction. To shield our code from the actual underlying transaction system we use the Hibernate <code>org.hibernate.Transaction</code> API. In this particular case we are using JDBC-based transactional semantics, but it could also run with JTA.
p41 = What does <code>sessionFactory.getCurrentSession()</code> do? First, you can call it as many times and anywhere you like once you get hold of your <code>org.hibernate.SessionFactory</code>. The <code>getCurrentSession()</code> method always returns the "current" unit of work. Remember that we switched the configuration option for this mechanism to "thread" in our <small>src/main/resources/hibernate.cfg.xml</small>? Due to that setting, the context of a current unit of work is bound to the current Java thread that executes the application.
important-content2 = Hibernate offers three methods of current session tracking. The "thread" based method is not intended for production use; it is merely useful for prototyping and tutorials such as this one. Current session tracking is discussed in more detail later on.
p42 = A <code>org.hibernate.Session</code> begins when the first call to <code>getCurrentSession()</code> is made for the current thread. It is then bound by Hibernate to the current thread. When the transaction ends, either through commit or rollback, Hibernate automatically unbinds the <code>org.hibernate.Session</code> from the thread and closes it for you. If you call <code>getCurrentSession()</code> again, you get a new <code>org.hibernate.Session</code> and can start a new unit of work.
p43 = Related to the unit of work scope, should the Hibernate <code>org.hibernate.Session</code> be used to execute one or several database operations? The above example uses one <code>org.hibernate.Session</code> for one operation. However this is pure coincidence; the example is just not complex enough to show any other approach. The scope of a Hibernate <code>org.hibernate.Session</code> is flexible but you should never design your application to use a new Hibernate <code>org.hibernate.Session</code> for every database operation. Even though it is used in the following examples, consider session-per-operation an anti-pattern. A real web application is shown later in the tutorial which will help illustrate this.
p44 = See Chapter 13, Transactions and Concurrency for more information about transaction handling and demarcation. The previous example also skipped any error handling and rollback.
p45 = To run this, we will make use of the Maven exec plugin to call our class with the necessary classpath setup: <strong>mvn exec:java -Dexec.mainClass="org.hibernate.tutorial.EventManager" -Dexec.args="store"</strong>
note-content6 = You may need to perform mvn compile first.
p46 = You should see Hibernate starting up and, depending on your configuration, lots of log output. Towards the end, the following line will be displayed:
p47 = This is the INSERT executed by Hibernate.
p48 = To list stored events an option is added to the main method:
p49 = A new <small>listEvents()</small> method is also added:
p50 = Here, we are using a Hibernate Query Language (HQL) query to load all existing Event objects from the database. Hibernate will generate the appropriate SQL, send it to the database and populate Event objects with the data. You can create more complex queries with HQL. See Chapter 16, HQL: The Hibernate Query Language for more information.
p51 = Now we can call our new functionality, again using the Maven exec plugin: <strong>mvn exec:java -Dexec.mainClass="org.hibernate.tutorial.EventManager" -Dexec.args="list"</strong>

#		**********************************************************************************************************
#		1.2. Part 2 - Mapping associations
#		p52
#		tip-content4
#		note-content6
#		caution-content
#		important-content2
#		**********************************************************************************************************

title10 = 1.2. Part 2 - Mapping associations
p52 = So far we have mapped a single persistent entity class to a table in isolation. Let's expand on that a bit and add some class associations. We will add people to the application and store a list of events in which they participate.

#		**********************************************************************************************************
#		1.2.1. Mapping the Person class
#		p56
#		tip-content4
#		note-content6
#		caution-content
#		important-content2
#		**********************************************************************************************************

title11 = 1.2.1. Mapping the Person class
p53 = The first cut of the Person class looks like this:
p54 = Save this to a file named <small>src/main/java/org/hibernate/tutorial/domain/Person.java</small><br/>Next, create the new mapping file as <small>src/main/resources/org/hibernate/tutorial/domain/Person.hbm.xml</small>
p55 = Finally, add the new mapping to Hibernate's configuration:
p56 = Create an association between these two entities. Persons can participate in events, and events have participants. The design questions you have to deal with are: directionality, multiplicity, and collection behavior.

#		**********************************************************************************************************
#		1.2.2. A unidirectional Set-based association
#		p56
#		tip-content4
#		note-content6
#		caution-content
#		important-content2
#		**********************************************************************************************************

title12 = 1.2.2. A unidirectional Set-based association
p57 = By adding a collection of events to the Person class, you can easily navigate to the events for a particular person, without executing an explicit query - by calling Person#getEvents. Multi-valued associations are represented in Hibernate by one of the Java Collection Framework contracts; here we choose a <code>java.util.Set</code> because the collection will not contain duplicate elements and the ordering is not relevant to our examples:
p58 = Before mapping this association, let's consider the other side. We could just keep this unidirectional or create another collection on the Event, if we wanted to be able to navigate it from both directions. This is not necessary, from a functional perspective. You can always execute an explicit query to retrieve the participants for a particular event. This is a design choice left to you, but what is clear from this discussion is the multiplicity of the association: "many" valued on both sides is called a many-to-many association. Hence, we use Hibernate's many-to-many mapping:
p59 = Hibernate supports a broad range of collection mappings, a set being most common. For a many-to-many association, or n:m entity relationship, an association table is required. Each row in this table represents a link between a person and an event. The table name is declared using the table attribute of the set element. The identifier column name in the association, for the person side, is defined with the key element, the column name for the event's side with the column attribute of the many-to-many. You also have to tell Hibernate the class of the objects in your collection (the class on the other side of the collection of references).
p60 = The database schema for this mapping is therefore:

#		**********************************************************************************************************
#		1.2.3. Working the association
#		p67
#		tip-content4
#		note-content6
#		caution-content
#		important-content2
#		**********************************************************************************************************

title13 = 1.2.3. Working the association
p61 = Now we will bring some people and events together in a new method in EventManager:
p62 = After loading a <small>Person</small> and an <small>Event</small>, simply modify the collection using the normal collection methods. There is no explicit call to <small>update()</small> or <small>save()</small>; Hibernate automatically detects that the collection has been modified and needs to be updated. This is called automatic dirty checking. You can also try it by modifying the name or the date property of any of your objects. As long as they are in persistent state, that is, bound to a particular Hibernate <code>org.hibernate.Session</code>, Hibernate monitors any changes and executes SQL in a write-behind fashion. The process of synchronizing the memory state with the database, usually only at the end of a unit of work, is called flushing. In our code, the unit of work ends with a commit, or rollback, of the database transaction.
p63 = You can load person and event in different units of work. Or you can modify an object outside of a <code>org.hibernate.Session</code>, when it is not in persistent state (if it was persistent before, this state is called detached). You can even modify a collection when it is detached:
p64 = The call to <small>update</small> makes a detached object persistent again by binding it to a new unit of work, so any modifications you made to it while detached can be saved to the database. This includes any modifications (additions/deletions) you made to a collection of that entity object.
p65 = This is not much use in our example, but it is an important concept you can incorporate into your own application. Complete this exercise by adding a new action to the main method of the EventManager and call it from the command line. If you need the identifiers of a person and an event - the save() method returns it (you might have to modify some of the previous methods to return that identifier):
p66 = This is an example of an association between two equally important classes : two entities. As mentioned earlier, there are other classes and types in a typical model, usually "less important". Some you have already seen, like an <code>int</code> or a <code>java.lang.String</code>. We call these classes value types, and their instances depend on a particular entity. Instances of these types do not have their own identity, nor are they shared between entities. Two persons do not reference the same firstname object, even if they have the same first name. Value types cannot only be found in the JDK , but you can also write dependent classes yourself such as an Address or MonetaryAmount class. In fact, in a Hibernate application all JDK classes are considered value types.
p67 = You can also design a collection of value types. This is conceptually different from a collection of references to other entities, but looks almost the same in Java.

#		**********************************************************************************************************
#		1.2.4. Collection of values
#		p74
#		tip-content4
#		note-content6
#		caution-content
#		important-content2
#		**********************************************************************************************************

title14 = 1.2.4. Collection of values
p68 = Let's add a collection of email addresses to the Person entity. This will be represented as a <code>java.util.Set</code> of <code>java.lang.String</code> instances:
p69 = The mapping of this Set is as follows:
p70 = The difference compared with the earlier mapping is the use of the element part which tells Hibernate that the collection does not contain references to another entity, but is rather a collection whose elements are values types, here specifically of type string. The lowercase name tells you it is a Hibernate mapping type/converter. Again the table attribute of the set element determines the table name for the collection. The key element defines the foreign-key column name in the collection table. The column attribute in the element element defines the column name where the email address values will actually be stored.
p71 = Here is the updated schema:
p72 = You can see that the primary key of the collection table is in fact a composite key that uses both columns. This also implies that there cannot be duplicate email addresses per person, which is exactly the semantics we need for a set in Java.
p73 = You can now try to add elements to this collection, just like we did before by linking persons and events. It is the same code in Java:
p74 = This time we did not use a fetch query to initialize the collection. Monitor the SQL log and try to optimize this with an eager fetch.

#		**********************************************************************************************************
#		1.2.5. Bi-directional associations
#		p74
#		tip-content4
#		note-content7
#		caution-content
#		important-content2
#		**********************************************************************************************************

title15 = 1.2.5. Bi-directional associations
p75 = Next you will map a bi-directional association. You will make the association between person and event work from both sides in Java. The database schema does not change, so you will still have many-to-many multiplicity.
note-content7 = A relational database is more flexible than a network programming language, in that it does not need a navigation direction; data can be viewed and retrieved in any possible way.
p76 = First, add a collection of participants to the <code>Event</code> class:
p77 = Now map this side of the association in <code>Event.hbm.xml</code>.
p78 = These are normal set mappings in both mapping documents. Notice that the column names in key and many-to-many swap in both mapping documents. The most important addition here is the <code>inverse="true"</code> attribute in the set element of the Event's collection mapping.
p79 = What this means is that Hibernate should take the other side, the Person class, when it needs to find out information about the link between the two. This will be a lot easier to understand once you see how the bi-directional link between our two entities is created.

#		**********************************************************************************************************
#		1.2.6. Working bi-directional links
#		p79
#		tip-content4
#		note-content7
#		caution-content
#		important-content2
#		**********************************************************************************************************

title16 = 1.2.6. Working bi-directional links
p80 = First, keep in mind that Hibernate does not affect normal Java semantics. How did we create a link between a Person and an Event in the unidirectional example? You add an instance of Event to the collection of event references, of an instance of Person. If you want to make this link bi-directional, you have to do the same on the other side by adding a Person reference to the collection in an Event. This process of "setting the link on both sides" is absolutely necessary with bi-directional links.
p81 = Many developers program defensively and create link management methods to correctly set both sides (for example, in <code>Person</code>):
p82 = The get and set methods for the collection are now protected. This allows classes in the same package and subclasses to still access the methods, but prevents everybody else from altering the collections directly. Repeat the steps for the collection on the other side.
p83 = What about the inverse mapping attribute? For you, and for Java, a bi-directional link is simply a matter of setting the references on both sides correctly. Hibernate, however, does not have enough information to correctly arrange SQL <var>INSERT</var> and <var>UPDATE</var> statements (to avoid constraint violations). Making one side of the association inverse tells Hibernate to consider it a mirror of the other side. That is all that is necessary for Hibernate to resolve any issues that arise when transforming a directional navigation model to a SQL database schema. The rules are straightforward: all bi-directional associations need one side as inverse. In a one-to-many association it has to be the many-side, and in many-to-many association you can select either side.

#		**********************************************************************************************************
#		1.3. Part 3 - The EventManager web application
#		p84
#		tip-content4
#		note-content7
#		caution-content
#		important-content2
#		**********************************************************************************************************

title17 = 1.3. Part 3 - The EventManager web application
p84 = A Hibernate web application uses <code>Session</code> and <code>Transaction</code> almost like a standalone application. However, some common patterns are useful. You can now write an EventManagerServlet. This servlet can list all events stored in the database, and it provides an HTML form to enter new events.

#		**********************************************************************************************************
#		1.3.1. Writing the basic servlet
#		p90
#		tip-content4
#		note-content7
#		caution-content
#		important-content2
#		**********************************************************************************************************

title18 = 1.3.1. Writing the basic servlet
p85 = First we need create our basic processing servlet. Since our servlet only handles HTTP <var>GET</var> requests, we will only implement the doGet() method:
p86 = Save this servlet as <var>src/main/java/org/hibernate/tutorial/web/EventManagerServlet.java</var>
p87 = The pattern applied here is called <var>session-per-request</var>. When a request hits the servlet, a new Hibernate Session is opened through the first call to <code>getCurrentSession()</code> on the SessionFactory. A database transaction is then started. All data access occurs inside a transaction irrespective of whether the data is read or written. Do not use the auto-commit mode in applications.
p88 = Do not use a new Hibernate Session for every database operation. Use one Hibernate Session that is scoped to the whole request. Use getCurrentSession(), so that it is automatically bound to the current Java thread.
p89 = Next, the possible actions of the request are processed and the response HTML is rendered. We will get to that part soon.
p90 = Finally, the unit of work ends when processing and rendering are complete. If any problems occurred during processing or rendering, an exception will be thrown and the database transaction rolled back. This completes the <var>session-per-request</var> pattern. Instead of the transaction demarcation code in every servlet, you could also write a servlet filter. See the Hibernate website and Wiki for more information about this pattern called Open Session in View. You will need it as soon as you consider rendering your view in JSP, not in a servlet.

#		**********************************************************************************************************
#		1.3.2. Processing and rendering
#		p95
#		tip-content4
#		note-content7
#		caution-content
#		important-content2
#		**********************************************************************************************************

title19 = 1.3.2. Processing and rendering
p91 = Now you can implement the processing of the request and the rendering of the page.
p92 = This coding style, with a mix of Java and HTML, would not scale in a more complex application;keep in mind that we are only illustrating basic Hibernate concepts in this tutorial. The code prints an HTML header and a footer. Inside this page, an HTML form for event entry and a list of all events in the database are printed. The first method is trivial and only outputs HTML:
p93 = The <code>listEvents()</code> method uses the Hibernate Session bound to the current thread to execute a query:
p94 = Finally, the store action is dispatched to the <code>createAndStoreEvent()</code> method, which also uses the Session of the current thread:
p95 = The servlet is now complete. A request to the servlet will be processed in a single <var>Session</var> and <var>Transaction</var>. As earlier in the standalone application, Hibernate can automatically bind these objects to the current thread of execution. This gives you the freedom to layer your code and access the <var>SessionFactory</var> in any way you like. Usually you would use a more sophisticated design and move the data access code into data access objects (the DAO pattern). See the Hibernate Wiki for more examples.

#		**********************************************************************************************************
#		1.3.3. Deploying and testing
#		p91
#		tip-content4
#		note-content8
#		caution-content
#		important-content2
#		**********************************************************************************************************

title20 = 1.3.3. Deploying and testing
p96 = To deploy this application for testing we must create a Web ARchive (WAR). First we must define the WAR descriptor as <var>src/main/webapp/WEB-INF/web.xml</var>
p97 = To build and deploy call mvn package in your project directory and copy the hibernate-tutorial.war file into your Tomcat webapps directory.
note-content8 = If you do not have Tomcat installed, download it from <a href="http://tomcat.apache.org/">http://tomcat.apache.org/</a> and follow the installation instructions. Our application requires no changes to the standard Tomcat configuration.
p98 = Once deployed and Tomcat is running, access the application at <code>http://localhost:8080/hibernate-tutorial/eventmanager</code>. Make sure you watch the Tomcat log to see Hibernate initialize when the first request hits your servlet (the static initializer in HibernateUtil is called) and to get the detailed output if any exceptions occurs.

#		**********************************************************************************************************
#		1.4. Summary
#		p98
#		tip-content4
#		note-content8
#		caution-content
#		important-content2
#		**********************************************************************************************************

title21 = 1.4. Summary
p99 = This tutorial covered the basics of writing a simple standalone Hibernate application and a small web application. More tutorials are available from the Hibernate <a href="http://hibernate.org/">website</a>.








