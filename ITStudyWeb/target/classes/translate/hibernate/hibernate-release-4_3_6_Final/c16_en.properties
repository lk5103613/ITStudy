
#		**********************************************************************************************************
#		Chapter 16. HQL: The Hibernate Query Language
#		**********************************************************************************************************

title16 = Chapter 16. HQL: The Hibernate Query Language
p16-1 = Hibernate uses a powerful query language (HQL) that is similar in appearance to SQL. Compared with SQL, however, HQL is fully object-oriented and understands notions like inheritance, polymorphism and association.

#		**********************************************************************************************************
#		16.1. Case Sensitivity
#		**********************************************************************************************************

title16-1 = 16.1. Case Sensitivity
p16-1-1 = With the exception of names of Java classes and properties, queries are case-insensitive. So <code>SeLeCT</code> is the same as <code>sELEct</code> is the same as <code>SELECT</code>, but <code>org.hibernate.eg.FOO</code> is not <code>org.hibernate.eg.Foo</code>, and <code>foo.barSet</code> is not <code>foo.BARSET</code>.
p16-1-2 = This manual uses lowercase HQL keywords. Some users find queries with uppercase keywords more readable, but this convention is unsuitable for queries embedded in Java code.

#		**********************************************************************************************************
#		16.2. The from clause
#		**********************************************************************************************************

title16-2 = 16.2. The from clause
p16-2-1 = The simplest possible Hibernate query is of the form:
p16-2-2 = This returns all instances of the class eg.Cat. You do not usually need to qualify the class name, since <code>auto-import</code> is the default. For example:
p16-2-3 = Multiple classes can appear, resulting in a cartesian product or "cross" join.
p16-2-4 = It is good practice to name query aliases using an initial lowercase as this is consistent with Java naming standards for local variables (e.g. <code>domesticCat</code>).

#		**********************************************************************************************************
#		16.3. Associations and joins
#		**********************************************************************************************************

title16-3 = 16.3. Associations and joins
p16-3-1 = You can also assign aliases to associated entities or to elements of a collection of values using a join. For example:
p16-3-2 = The supported join types are borrowed from ANSI SQL:
li16-3-1-1 = inner join
li16-3-1-2 = left outer join
li16-3-1-3 = right outer join
li16-3-1-4 = full join (not usually useful)
p16-3-3 = The <code>inner join</code>, <code>left outer join</code> and <code>right outer join</code> constructs may be abbreviated.
p16-3-4 = You may supply extra join conditions using the HQL with keyword.
p16-3-5 = A "fetch" join allows associations or collections of values to be initialized along with their parent objects using a single select. This is particularly useful in the case of a collection. It effectively overrides the outer join and lazy declarations of the mapping file for associations and collections. See <a href="#c20-1">Section 20.1, \u201CFetching strategies\u201D</a> for more information.
p16-3-6 = A fetch join does not usually need to assign an alias, because the associated objects should not be used in the where clause (or any other clause). The associated objects are also not returned directly in the query results. Instead, they may be accessed via the parent object. The only reason you might need an alias is if you are recursively join fetching a further collection:
p16-3-7 = The fetch construct cannot be used in queries called using <code>iterate()</code> (though <code>scroll()</code> can be used). Fetch should not be used together with <code>setMaxResults()</code> or <code>setFirstResult()</code>, as these operations are based on the result rows which usually contain duplicates for eager collection fetching, hence, the number of rows is not what you would expect. Fetch should also not be used together with impromptu with condition. It is possible to create a cartesian product by join fetching more than one collection in a query, so take care in this case. Join fetching multiple collection roles can produce unexpected results for bag mappings, so user discretion is advised when formulating queries in this case. Finally, note that full join fetch and right join fetch are not meaningful.
p16-3-8 = If you are using property-level lazy fetching (with bytecode instrumentation), it is possible to force Hibernate to fetch the lazy properties in the first query immediately using fetch all properties.

#		**********************************************************************************************************
#		16.4. Forms of join syntax
#		**********************************************************************************************************

title16-4 = 16.4. Forms of join syntax
p16-4-1 = HQL supports two forms of association joining: <code>implicit</code> and <code>explicit</code>.
p16-4-2 = The queries shown in the previous section all use the <code>explicit</code> form, that is, where the join keyword is explicitly used in the from clause. This is the recommended form.
p16-4-3 = The <code>implicit</code> form does not use the join keyword. Instead, the associations are "dereferenced" using dot-notation. implicit joins can appear in any of the HQL clauses. implicit join result in inner joins in the resulting SQL statement.

#		**********************************************************************************************************
#		16.5. Referring to identifier property
#		**********************************************************************************************************

title16-5 = 16.5. Referring to identifier property
p16-5-1 = There are 2 ways to refer to an entity's identifier property:
li16-5-1-1 = The special property (lowercase) id may be used to reference the identifier property of an entity provided that the entity does not define a non-identifier property named id.
li16-5-1-2 = If the entity defines a named identifier property, you can use that property name.
p16-5-2 = References to composite identifier properties follow the same naming rules. If the entity has a non-identifier property named id, the composite identifier property can only be referenced by its defined named. Otherwise, the special id property can be used to reference the identifier property.
ic16-5-1 = Please note that, starting in version 3.2.2, this has changed significantly. In previous versions, id always referred to the identifier property regardless of its actual name. A ramification of that decision was that non-identifier properties named id could never be referenced in Hibernate queries.

#		**********************************************************************************************************
#		16.6. The select clause
#		**********************************************************************************************************

title16-6 = 16.6. The select clause
p16-6-1 = The <code>select</code> clause picks which objects and properties to return in the query result set. Consider the following:
p16-6-2 = The query will select mates of other Cats. You can express this query more compactly as:
p16-6-3 = Queries can return properties of any value type including properties of component type:
p16-6-4 = Queries can return multiple objects and/or properties as an array of type <code>Object[]</code>:
p16-6-5 = Or as a <code>List</code>:
p16-6-6 = Or - assuming that the class <code>Family</code> has an appropriate constructor - as an actual typesafe Java object:
p16-6-7 = You can assign aliases to selected expressions using as:
p16-6-8 = This is most useful when used together with select new map:
p16-6-9 = This query returns a Map from aliases to selected values.

#		**********************************************************************************************************
#		16.7. Aggregate functions
#		**********************************************************************************************************

title16-7 = 16.7. Aggregate functions
p16-7-1 = HQL queries can even return the results of aggregate functions on properties:
p16-7-2 = The supported aggregate functions are:
li16-7-1-1 = avg(...), sum(...), min(...), max(...)
li16-7-1-2 = count(*)
li16-7-1-3 = count(...), count(distinct ...), count(all...)
p16-7-3 = You can use arithmetic operators, concatenation, and recognized SQL functions in the select clause:
p16-7-4 = The <code>distinct</code> and <code>all</code> keywords can be used and have the same semantics as in SQL.

#		**********************************************************************************************************
#		16.8. Polymorphic queries
#		**********************************************************************************************************

title16-8 = 16.8. Polymorphic queries
p16-8-1 = A query like:
p16-8-2 = returns instances not only of <code>Cat</code>, but also of subclasses like <code>DomesticCat</code>. Hibernate queries can name any Java class or interface in the from clause. The query will return instances of all persistent classes that extend that class or implement the interface. The following query would return all persistent objects:
p16-8-3 = The interface <code>Named</code> might be implemented by various persistent classes:
p16-8-4 = These last two queries will require more than one <code>SQL SELECT</code>. This means that the order by clause does not correctly order the whole result set. It also means you cannot call these queries using <code>Query.scroll()</code>.

#		**********************************************************************************************************
#		16.9. The where clause
#		**********************************************************************************************************

title16-9 = 16.9. The where clause
p16-9-1 = The where clause allows you to refine the list of instances returned. If no alias exists, you can refer to properties by name:
p16-9-2 = If there is an alias, use a qualified property name:
p16-9-3 = This returns instances of Cat named 'Fritz'.
p16-9-4 = The following query:
p16-9-5 = returns all instances of <code>Foo</code> with an instance of bar with a date property equal to the startDate property of the Foo. Compound path expressions make the where clause extremely powerful. Consider the following:
p16-9-6 = This query translates to an SQL query with a table (inner) join. For example:
p16-9-7 = would result in a query that would require four table joins in SQL.
p16-9-8 = The = operator can be used to compare not only properties, but also instances:
p16-9-9 = The special property (lowercase) id can be used to reference the unique identifier of an object. See <a href="#c16-5">Section 16.5, \u201CReferring to identifier property\u201D</a> for more information.
p16-9-10 = The second query is efficient and does not require a table join.
p16-9-11 = Properties of composite identifiers can also be used. Consider the following example where Person has composite identifiers consisting of <code>country</code> and <code>medicareNumber</code>:
p16-9-12 = Once again, the second query does not require a table join.
p16-9-13 = See <a href="#c16-5">Section 16.5, \u201CReferring to identifier property\u201D</a> for more information regarding referencing identifier properties)
p16-9-14 = The special property class accesses the discriminator value of an instance in the case of polymorphic persistence. A Java class name embedded in the where clause will be translated to its discriminator value.
p16-9-15 = You can also use components or composite user types, or properties of said component types. See <a href="#c16-17">Section 16.17, \u201CComponents\u201D</a> for more information.
p16-9-16 = An "any" type has the special properties id and class that allows you to express a join in the following way (where <code>AuditLog.item</code> is a property mapped with <code>&lt;any&gt;</code>):
p16-9-17 = The <code>log.item.class</code> and <code>payment.class</code> would refer to the values of completely different database columns in the above query.

#		**********************************************************************************************************
#		16.10. Expressions
#		**********************************************************************************************************

title16-10 = 16.10. Expressions
p16-10-1 = Expressions used in the where clause include the following:
li16-10-1-1 = mathematical operators: +, -, *, /
li16-10-1-2 = binary comparison operators: =, >=, <=, <>, !=, like
li16-10-1-3 = logical operations <code>and</code>, <code>or</code>, <code>not</code>
li16-10-1-4 = Parentheses ( ) that indicates grouping
li16-10-1-5 = in, not in, between, is null, is not null, is empty, is not empty, member of and not member of
li16-10-1-6 = "Simple" case, case ... when ... then ... else ... end, and "searched" case, case when ... then ... else ... end
li16-10-1-7 = string concatenation ...||... or concat(...,...)
li16-10-1-8 = current_date(), current_time(), and current_timestamp()
li16-10-1-9 = second(...), minute(...), hour(...), day(...), month(...), and year(...)
li16-10-1-10 = Any function or operator defined by EJB-QL 3.0: substring(), trim(), lower(), upper(), length(), locate(), abs(), sqrt(), bit_length(), mod()
li16-10-1-11 = coalesce() and nullif()
li16-10-1-12 = str() for converting numeric or temporal values to a readable string
li16-10-1-13 = cast(... as ...), where the second argument is the name of a Hibernate type, and extract(... from ...) if ANSI cast() and extract() is supported by the underlying database
li16-10-1-14 = the HQL index() function, that applies to aliases of a joined indexed collection
li16-10-1-15 = HQL functions that take collection-valued path expressions: size(), minelement(), maxelement(), minindex(), maxindex(), along with the special elements() and indices functions that can be quantified using some, all, exists, any, in.
li16-10-1-16 = Any database-supported SQL scalar function like sign(), trunc(), rtrim(), and sin()
li16-10-1-17 = JDBC-style positional parameters ?
li16-10-1-18 = named parameters :name, :start_date, and :x1
li16-10-1-19 = SQL literals 'foo', 69, 6.66E+2, '1970-01-01 10:00:01.0'
li16-10-1-20 = Java public static final constants eg.Color.TABBY
p16-10-2 = <code>in</code> and <code>between</code> can be used as follows:
p16-10-3 = The negated forms can be written as follows:
p16-10-4 = Similarly, is null and is not null can be used to test for null values.
p16-10-5 = Booleans can be easily used in expressions by declaring HQL query substitutions in Hibernate configuration:
p16-10-6 = This will replace the keywords true and false with the literals 1 and 0 in the translated SQL from this HQL:
p16-10-7 = You can test the size of a collection with the special property size or the special <code>size()</code> function.
p16-10-8 = For indexed collections, you can refer to the minimum and maximum indices using minindex and maxindex functions. Similarly, you can refer to the minimum and maximum elements of a collection of basic type using the <code>minelement</code> and <code>maxelement</code> functions. For example:
p16-10-9 = The SQL functions <code>any</code>, <code>some</code>, <code>all</code>, <code>exists</code>, in are supported when passed the element or index set of a collection (elements and indices functions) or the result of a subquery (see below):
p16-10-10 = Note that these constructs - <code>size</code>, <code>elements</code>, <code>indices</code>, <code>minindex</code>, <code>maxindex</code>, <code>minelement</code>, <code>maxelement</code> - can only be used in the where clause in Hibernate.
p16-10-11 = Elements of indexed collections (arrays, lists, and maps) can be referred to by index in a where clause only:
p16-10-12 = The expression inside [] can even be an arithmetic expression:
p16-10-13 = HQL also provides the built-in <code>index()</code> function for elements of a one-to-many association or collection of values.
p16-10-14 = Scalar SQL functions supported by the underlying database can be used:
p16-10-15 = Consider how much longer and less readable the following query would be in SQL:
p16-10-16 = Hint: something like

#		**********************************************************************************************************
#		16.11. The order by clause
#		**********************************************************************************************************

title16-11 = 16.11. The order by clause
p16-11-1 = The list returned by a query can be ordered by any property of a returned class or components:
p16-11-2 = The optional <code>asc</code> or <code>desc</code> indicate ascending or descending order respectively.
p16-11-3 = The optional <code>nulls first</code> or <code>nulls last</code> indicate precedence of null values while sorting.

#		**********************************************************************************************************
#		16.12. The group by clause
#		**********************************************************************************************************

title16-12 = 16.12. The group by clause
p16-12-1 = A query that returns aggregate values can be grouped by any property of a returned class or components:
p16-12-2 = A <code>having</code> clause is also allowed.
p16-12-3 = SQL functions and aggregate functions are allowed in the having and order by clauses if they are supported by the underlying database (i.e., not in MySQL).
p16-12-4 = Neither the <code>group by</code> clause nor the <code>order by</code> clause can contain arithmetic expressions. Hibernate also does not currently expand a grouped entity, so you cannot write <code>group by cat</code> if all properties of cat are non-aggregated. You have to list all non-aggregated properties explicitly.

#		**********************************************************************************************************
#		16.13. Subqueries
#		**********************************************************************************************************

title16-13 = 16.13. Subqueries
p16-13-1 = For databases that support subselects, Hibernate supports subqueries within queries. A subquery must be surrounded by parentheses (often by an SQL aggregate function call). Even correlated subqueries (subqueries that refer to an alias in the outer query) are allowed.
p16-13-2 = Note that HQL subqueries can occur only in the select or where clauses.
p16-13-3 = Note that subqueries can also utilize row value constructor syntax. See <a href="#c16-18">Section 16.18, \u201CRow value constructor syntax\u201D</a> for more information.

#		**********************************************************************************************************
#		16.14. HQL examples
#		**********************************************************************************************************

title16-14 = 16.14. HQL examples
p16-14-1 = Hibernate queries can be quite powerful and complex. In fact, the power of the query language is one of Hibernate's main strengths. The following example queries are similar to queries that have been used on recent projects. Please note that most queries you will write will be much simpler than the following examples.
p16-14-2 = The following query returns the order id, number of items, the given minimum total value and the total value of the order for all unpaid orders for a particular customer. The results are ordered by total value. In determining the prices, it uses the current catalog. The resulting SQL query, against the <code>ORDER</code>, <code>ORDER_LINE</code>, <code>PRODUCT</code>, <code>CATALOG</code> and <code>PRICE</code> tables has four inner joins and an (uncorrelated) subselect.
p16-14-3 = What a monster! Actually, in real life, I'm not very keen on subqueries, so my query was really more like this:
p16-14-4 = The next query counts the number of payments in each status, excluding all payments in the AWAITING_APPROVAL status where the most recent status change was made by the current user. It translates to an SQL query with two inner joins and a correlated subselect against the <code>PAYMENT</code>, <code>PAYMENT_STATUS</code> and <code>PAYMENT_STATUS_CHANGE</code> tables.
p16-14-5 = If the <code>statusChanges</code> collection was mapped as a list, instead of a set, the query would have been much simpler to write.
p16-14-6 = The next query uses the MS SQL Server isNull() function to return all the accounts and unpaid payments for the organization to which the current user belongs. It translates to an SQL query with three inner joins, an outer join and a subselect against the <code>ACCOUNT</code>, <code>PAYMENT</code>, <code>PAYMENT_STATUS</code>, <code>ACCOUNT_TYPE</code>, <code>ORGANIZATION</code> and <code>ORG_USER</code> tables.
p16-14-7 = For some databases, we would need to do away with the (correlated) subselect.

#		**********************************************************************************************************
#		16.15. Bulk update and delete
#		**********************************************************************************************************

title16-15 = 16.15. Bulk update and delete
p16-15-1 = HQL now supports <code>update</code>, <code>delete</code> and <code>insert ... select ...</code> statements. See <a href="#c15-4">Section 15.4, \u201CDML-style operations\u201D</a> for more information.

#		**********************************************************************************************************
#		16.16. Tips & Tricks
#		**********************************************************************************************************

title16-16 = 16.16. Tips & Tricks
p16-16-1 = You can count the number of query results without returning them:
p16-16-2 = To order a result by the size of a collection, use the following query:
p16-16-3 = If your database supports subselects, you can place a condition upon selection size in the where clause of your query:
p16-16-4 = If your database does not support subselects, use the following query:
p16-16-5 = As this solution cannot return a User with zero messages because of the inner join, the following form is also useful:
p16-16-6 = Properties of a JavaBean can be bound to named query parameters:
p16-16-7 = Collections are pageable by using the Query interface with a filter:
p16-16-8 = Collection elements can be ordered or grouped using a query filter:
p16-16-9 = You can find the size of a collection without initializing it:

#		**********************************************************************************************************
#		16.17. Components
#		**********************************************************************************************************

title16-17 = 16.17. Components
p16-17-1 = Components can be used similarly to the simple value types that are used in HQL queries. They can appear in the <code>select</code> clause as follows:
p16-17-2 = where the Person's name property is a component. Components can also be used in the <code>where</code> clause:
p16-17-3 = Components can also be used in the <code>order by</code> clause:
p16-17-4 = Another common use of components is in <a href="#c16-18">Section 16.18, \u201CRow value constructor syntax\u201D</a>.

#		**********************************************************************************************************
#		16.18. Row value constructor syntax
#		**********************************************************************************************************

title16-18 = 16.18. Row value constructor syntax
p16-18-1 = HQL supports the use of ANSI SQL <code>row value constructor</code> syntax, sometimes referred to AS tuple syntax, even though the underlying database may not support that notion. Here, we are generally referring to multi-valued comparisons, typically associated with components. Consider an entity Person which defines a name component:
p16-18-2 = That is valid syntax although it is a little verbose. You can make this more concise by using <code>row value constructor</code> syntax:
p16-18-3 = It can also be useful to specify this in the <code>select</code> clause:
p16-18-4 = Using <code>row value constructor</code> syntax can also be beneficial when using subqueries that need to compare against multiple values:
p16-18-5 = One thing to consider when deciding if you want to use this syntax, is that the query will be dependent upon the ordering of the component sub-properties in the metadata.
















