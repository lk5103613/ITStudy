title2 = Building Apps with Content Sharing
p2-1 = These classes teach you how to create apps that share data between apps and devices.
title2-1 = Sharing Simple Data
p2-1-1 = One of the great things about Android applications is their ability to communicate and integrate with each other. Why reinvent functionality that isn't core to your application when it already exists in another application?
p2-1-2 = This class covers some common ways you can send and receive simple data between applications using <code><a href="http://developer.android.com//reference/android/content/Intent.html">Intent</a></code> APIs and the <code><a href="http://developer.android.com//reference/android/view/ActionProvider.html">ActionProvider</a></code> object.
sub_title2-1-1 = Lessons
dt2-1-1-1 = <b><a href="#c2-1-1">Sending Simple Data to Other Apps</a></b>
dd2-1-1-1 = Learn how to set up your application to be able to send text and binary data to other applications with intents.
dt2-1-1-2 = <b><a href="#c2-1-2">Receiving Simple Data from Other Apps</a></b>
dd2-1-1-2 = Learn how to set up your application to receive text and binary data from intents.
dt2-1-1-3 = <b><a href="#c2-1-3">Adding an Easy Share Action</a></b>
dd2-1-1-3 = Learn how to add a "share" action item to your action bar.
title2-1-1 = Sending Simple Data to Other Apps
p2-1-1-1 = When you construct an intent, you must specify the action you want the intent to "trigger." Android defines several actions, including <code><a href="http://developer.android.com//reference/android/content/Intent.html#ACTION_SEND">ACTION_SEND</a></code> which, as you can probably guess, indicates that the intent is sending data from one activity to another, even across process boundaries. To send data to another activity, all you need to do is specify the data and its type, the system will identify compatible receiving activities and display them to the user (if there are multiple options) or immediately start the activity (if there is only one option). Similarly, you can advertise the data types that your activities support receiving from other applications by specifying them in your manifest.
p2-1-1-2 = Sending and receiving data between applications with intents is most commonly used for social sharing of content. Intents allow users to share information quickly and easily, using their favorite applications.
nc2-1-1-1 = <strong>Note:</strong> The best way to add a share action item to an <code><a href="http://developer.android.com//reference/android/app/ActionBar.html">ActionBar</a></code> is to use <code><a href="http://developer.android.com//reference/android/widget/ShareActionProvider.html">ShareActionProvider</a></code>, which became available in API level 14. <code><a href="http://developer.android.com//reference/android/widget/ShareActionProvider.html">ShareActionProvider</a></code> is discussed in the lesson about <a href="c2-1-3">Adding an Easy Share Action</a>.
sub_title2-1-1-1 = Send Text Content
#share-text-screenshot.png
p2-1-1-1-1 = The most straightforward and common use of the <code><a href="http://developer.android.com//reference/android/content/Intent.html#ACTION_SEND">ACTION_SEND</a></code> action is sending text content from one activity to another. For example, the built-in Browser app can share the URL of the currently-displayed page as text with any application. This is useful for sharing an article or website with friends via email or social networking. Here is the code to implement this type of sharing:
#pre2-1-1-1-1
p2-1-1-1-2 = If there's an installed application with a filter that matches <code><a href="http://developer.android.com//reference/android/content/Intent.html#ACTION_SEND">ACTION_SEND</a></code> and MIME type text/plain, the Android system will run it; if more than one application matches, the system displays a disambiguation dialog (a "chooser") that allows the user to choose an app.
p2-1-1-1-3 = However, if you call <code><a href="http://developer.android.com//reference/android/content/Intent.html#createChooser(android.content.Intent, java.lang.CharSequence)">Intent.createChooser()</a></code>, passing it your <code><a href="http://developer.android.com//reference/android/content/Intent.html">Intent</a></code> object, it returns a version of your intent that will <strong>always display the chooser</strong>. This has some advantages:
#ul
li2-1-1-1-1 = Even if the user has previously selected a default action for this intent, the chooser will still be displayed.
li2-1-1-1-2 = If no applications match, Android displays a system message.
li2-1-1-1-3 = You can specify a title for the chooser dialog.
p2-1-1-1-4 = Here's the updated code:
#pre2-1-1-1-2
p2-1-1-1-5 = The resulting dialog is shown in figure 1.
p2-1-1-1-6 = Optionally, you can set some standard extras for the intent: <code><a href="http://developer.android.com//reference/android/content/Intent.html#EXTRA_EMAIL">EXTRA_EMAIL</a></code>, <code><a href="http://developer.android.com//reference/android/content/Intent.html#EXTRA_CC">EXTRA_CC</a></code>, <code><a href="http://developer.android.com//reference/android/content/Intent.html#EXTRA_BCC">EXTRA_BCC</a></code>, <code><a href="http://developer.android.com//reference/android/content/Intent.html#EXTRA_SUBJECT">EXTRA_SUBJECT</a></code>. If the receiving application is not designed to use them, it simply ignores them.
nc2-1-1-1-1 = <strong>Note:</strong> Some e-mail applications, such as Gmail, expect a <code><a href="http://developer.android.com//reference/java/lang/String.html">String[]</a></code> for extras like <code><a href="http://developer.android.com//reference/android/content/Intent.html#EXTRA_EMAIL">EXTRA_EMAIL</a></code> and <code><a href="http://developer.android.com//reference/android/content/Intent.html#EXTRA_CC">EXTRA_CC</a></code>, use <code><a href="http://developer.android.com//reference/android/content/Intent.html#putExtra(java.lang.String, java.lang.String[])">putExtra(String, String[])</a></code> to add these to your intent.
sub_title2-1-1-2 = Send Binary Content
p2-1-1-2-1 = Binary data is shared using the <code><a href="http://developer.android.com//reference/android/content/Intent.html#ACTION_SEND">ACTION_SEND</a></code> action combined with setting the appropriate MIME type and placing the URI to the data in an extra named <code><a href="http://developer.android.com//reference/android/content/Intent.html#EXTRA_STREAM">EXTRA_STREAM</a></code>. This is commonly used to share an image but can be used to share any type of binary content:
#pre2-1-1-2-1
p2-1-1-2-2 = Note the following:
#ul
li2-1-1-2-1 = You can use a MIME type of <code>"*/*"</code>, but this will only match activities that are able to handle generic data streams.
li2-1-1-2-2 = The receiving application needs permission to access the data the <code><a href="http://developer.android.com//reference/android/net/Uri.html">Uri</a></code> points to. The recommended ways to do this are:  
#ulbegin
li2-1-1-2-3 = Store the data in your own <code><a href="http://developer.android.com//reference/android/content/ContentProvider.html">ContentProvider</a></code>, making sure that other apps have the correct permission to access your provider. The preferred mechanism for providing access is to use <a href="http://developer.android.com//guide/topics/security/permissions.html#uri">per-URI permissions</a> which are temporary and only grant access to the receiving application. An easy way to create a <code><a href="http://developer.android.com//reference/android/content/ContentProvider.html">ContentProvider</a></code> like this is to use the <code><a href="http://developer.android.com//reference/android/support/v4/content/FileProvider.html">FileProvider</a></code> helper class.
li2-1-1-2-4 = Use the system <code><a href="http://developer.android.com//reference/android/provider/MediaStore.html">MediaStore</a></code>. The <code><a href="http://developer.android.com//reference/android/provider/MediaStore.html">MediaStore</a></code> is primarily aimed at video, audio and image MIME types, however beginning with Android 3.0 (API level 11) it can also store non-media types (see <code><a href="http://developer.android.com//reference/android/provider/MediaStore.Files.html">MediaStore.Files</a></code> for more info). Files can be inserted into the <code><a href="http://developer.android.com//reference/android/provider/MediaStore.html">MediaStore</a></code> using <code><a href="http://developer.android.com//reference/android/media/MediaScannerConnection.html#scanFile(android.content.Context, java.lang.String[], java.lang.String[], android.media.MediaScannerConnection.OnScanCompletedListener)">scanFile()</a></code> after which a <code>content://</code> style <code><a href="http://developer.android.com//reference/android/net/Uri.html">Uri</a></code> suitable for sharing is passed to the provided <code><a href="http://developer.android.com//reference/android/media/MediaScannerConnection.OnScanCompletedListener.html#onScanCompleted(java.lang.String, android.net.Uri)">onScanCompleted()</a></code> callback. Note that once added to the system <code><a href="http://developer.android.com//reference/android/provider/MediaStore.html">MediaStore</a></code> the content is accessible to any app on the device.
#end
sub_title2-1-1-3 = Send Multiple Pieces of Content
p2-1-1-3-1 = To share multiple pieces of content, use the <code><a href="http://developer.android.com//reference/android/content/Intent.html#ACTION_SEND_MULTIPLE">ACTION_SEND_MULTIPLE</a></code> action together with a list of URIs pointing to the content. The MIME type varies according to the mix of content you're sharing. For example, if you share 3 JPEG images, the type is still <code>"image/jpeg"</code>. For a mixture of image types, it should be <code>"image/*"</code> to match an activity that handles any type of image. You should only use <code>"*/*"</code> if you're sharing out a wide variety of types. As previously stated, it's up to the receiving application to parse and process your data. Here's an example:
#pre2-1-1-3-1
p2-1-1-3-2 = As before, make sure the provided <code><a href="http://developer.android.com//reference/android/net/Uri.html">URIs</a></code> point to data that a receiving application can access.
title2-1-2 = Receiving Simple Data from Other Apps
p2-1-2-1 = Just as your application can send data to other applications, so too can it easily receive data from applications. Think about how users interact with your application, and what data types you want to receive from other applications. For example, a social networking application would likely be interested in receiving text content, like an interesting web URL, from another app. The <a href="http://developer.android.com/https://play.google.com/store/apps/details?id=com.google.android.apps.plus">Google+ Android application</a> accepts both text <em>and</em> single or multiple images. With this app, a user can easily start a new Google+ post with photos from the Android Gallery app.
sub_title2-1-2-1 = Update Your Manifest
p2-1-2-1-1 = Intent filters inform the system what intents an application component is willing to accept. Similar to how you constructed an intent with action <code><a href="http://developer.android.com//reference/android/content/Intent.html#ACTION_SEND">ACTION_SEND</a></code> in the <a href="#c2-1-1">Sending Simple Data to Other Apps</a> lesson, you create intent filters in order to be able to receive intents with this action. You define an intent filter in your manifest, using the <code><a href="http://developer.android.com//guide/components/intents-filters.html#ifs">&lt;intent-filter&gt;</a></code> element. For example, if your application handles receiving text content, a single image of any type, or multiple images of any type, your manifest would look like:
#pre2-1-2-1-1
nc2-1-2-1-1 = <strong>Note:</strong> For more information on intent filters and intent resolution please read <a href="http://developer.android.com//guide/components/intents-filters.html#ifs">Intents and Intent Filters</a>
p2-1-2-1-2 = When another application tries to share any of these things by constructing an intent and passing it to <code><a href="http://developer.android.com//reference/android/content/Context.html#startActivity(android.content.Intent)">startActivity()</a></code>, your application will be listed as an option in the intent chooser. If the user selects your application, the corresponding activity (<code>.ui.MyActivity</code> in the example above) will be started. It is then up to you to handle the content appropriately within your code and UI.
sub_title2-1-2-2 = Handle the Incoming Content
p2-1-2-2-1 = To handle the content delivered by an <code><a href="http://developer.android.com//reference/android/content/Intent.html">Intent</a></code>, start by calling <code><a href="http://developer.android.com//reference/android/content/Intent.html#getIntent(java.lang.String)">getIntent()</a></code> to get <code><a href="http://developer.android.com//reference/android/content/Intent.html">Intent</a></code> object. Once you have the object, you can examine its contents to determine what to do next. Keep in mind that if this activity can be started from other parts of the system, such as the launcher, then you will need to take this into consideration when examining the intent.
#pre2-1-2-2-1
cc2-1-2-2-1 = <strong>Caution:</strong> Take extra care to check the incoming data, you never know what some other application may send you. For example, the wrong MIME type might be set, or the image being sent might be extremely large. Also, remember to process binary data in a separate thread rather than the main ("UI") thread.
p2-1-2-2-2 = Updating the UI can be as simple as populating an <code><a href="http://developer.android.com//reference/android/widget/EditText.html">EditText</a></code>, or it can be more complicated like applying an interesting photo filter to an image. It's really specific to your application what happens next.
title2-1-3 = Adding an Easy Share Action
p2-1-3-1 = Implementing an effective and user friendly share action in your <code><a href="http://developer.android.com//reference/android/app/ActionBar.html">ActionBar</a></code> is made even easier with the introduction of <code><a href="http://developer.android.com//reference/android/view/ActionProvider.html">ActionProvider</a></code> in Android 4.0 (API Level 14). An <code><a href="http://developer.android.com//reference/android/view/ActionProvider.html">ActionProvider</a></code>, once attached to a menu item in the action bar, handles both the appearance and behavior of that item. In the case of <code><a href="http://developer.android.com//reference/android/widget/ShareActionProvider.html">ShareActionProvider</a></code>, you provide a share intent and it does the rest.
nc2-1-3-1 = <strong>Note:&nbsp;</strong> <code><a href="http://developer.android.com//reference/android/widget/ShareActionProvider.html">ShareActionProvider</a></code> is available starting with API Level 14 and higher.
#actionbar-shareaction.png
sub_title2-1-3-1 = Update Menu Declarations
p2-1-3-1-1 = To get started with <code><a href="http://developer.android.com//reference/android/widget/ShareActionProvider.html">ShareActionProviders</a></code>, define the <code>android:actionProviderClass</code> attribute for the corresponding <code>&lt;item&gt;</code> in your <a href="http://developer.android.com//guide/topics/resources/menu-resource.html">menu resource</a> file:
#pre2-1-3-1-1
p2-1-3-1-2 = This delegates responsibility for the item's appearance and function to <code><a href="http://developer.android.com//reference/android/widget/ShareActionProvider.html">ShareActionProvider</a></code>. However, you will need to tell the provider what you would like to share.
sub_title2-1-3-2 = Set the Share Intent
p2-1-3-2-1 = In order for <code><a href="http://developer.android.com//reference/android/widget/ShareActionProvider.html">ShareActionProvider</a></code> to function, you must provide it a share intent. This share intent should be the same as described in the <a href="#c2-1-1">Sending Simple Data to Other Apps</a> lesson, with action <code><a href="http://developer.android.com//reference/android/content/Intent.html#ACTION_SEND">ACTION_SEND</a></code> and additional data set via extras like <code><a href="http://developer.android.com//reference/android/content/Intent.html#EXTRA_TEXT">EXTRA_TEXT</a></code> and <code><a href="http://developer.android.com//reference/android/content/Intent.html#EXTRA_STREAM">EXTRA_STREAM</a></code>. To assign a share intent, first find the corresponding <code><a href="http://developer.android.com//reference/android/view/MenuItem.html">MenuItem</a></code> while inflating your menu resource in your <code><a href="http://developer.android.com//reference/android/app/Activity.html">Activity</a></code> or <code><a href="http://developer.android.com//reference/android/app/Fragment.html">Fragment</a></code>. Next, call <code><a href="http://developer.android.com//reference/android/view/MenuItem.html#getActionProvider()">MenuItem.getActionProvider()</a></code> to retrieve an instance of <code><a href="http://developer.android.com//reference/android/widget/ShareActionProvider.html">ShareActionProvider</a></code>. Use <code><a href="http://developer.android.com//reference/android/widget/ShareActionProvider.html#setShareIntent(android.content.Intent)">setShareIntent()</a></code> to update the share intent associated with that action item. Here's an example:
#pre2-1-3-2-1
p2-1-3-2-2 = You may only need to set the share intent once during the creation of your menus, or you may want to set it and then update it as the UI changes. For example, when you view photos full screen in the Gallery app, the sharing intent changes as you flip between photos.
p2-1-3-2-3 = For further discussion about the <code><a href="http://developer.android.com//reference/android/widget/ShareActionProvider.html">ShareActionProvider</a></code> object, see the <a href="http://developer.android.com//guide/topics/ui/actionbar.html#ActionProvider">Action Bar</a> guide.
title2-2 = Sharing Files
p2-2-1 = Apps often have a need to offer one or more of their files to another app. For example, an image gallery may want to offer files to image editors, or a file management app may want to allow users to copy and paste files between areas in external storage. One way a sending app can share a file is to respond to a request from the receiving app.
p2-2-2 = In all cases, the only secure way to offer a file from your app to another app is to send the receiving app the file's content URI and grant temporary access permissions to that URI. Content URIs with temporary URI access permissions are secure because they apply only to the app that receives the URI, and they expire automatically. The Android <code><a href="http://developer.android.com//reference/android/support/v4/content/FileProvider.html">FileProvider</a></code> component provides the method <code><a href="http://developer.android.com//reference/android/support/v4/content/FileProvider.html#getUriForFile(android.content.Context, java.lang.String, java.io.File)">getUriForFile()</a></code> for generating a file's content URI.
p2-2-3 = If you want to share small amounts of text or numeric data between apps, you should send an <code><a href="http://developer.android.com//reference/android/content/Intent.html">Intent</a></code> that contains the data. To learn how to send simple data with an <code><a href="http://developer.android.com//reference/android/content/Intent.html">Intent</a></code>, see the training class <a href="http://developer.android.com//training/sharing/index.html">Sharing Simple Data</a>.
p2-2-4 = This class explains how to securely share files from your app to another app using content URIs generated by the Android <code><a href="http://developer.android.com//reference/android/support/v4/content/FileProvider.html">FileProvider</a></code> component and temporary permissions that you grant to the receiving app for the content URI.
sub_title2-2-1 = Lessons
dt2-2-1-1 = <b><a href="http://developer.android.com/setup-sharing.html">Setting Up File Sharing</a></b>
dd2-2-1-1 = Learn how to set up your app to share files.
dt2-2-1-2 = <b><a href="http://developer.android.com/share-file.html">Sharing a File</a></b>
dd2-2-1-2 = Learn how to offer a file to another app by generating a content URI for the file, granting access permissions to the URI, and sending the URI to the app.
dt2-2-1-3 = <b><a href="http://developer.android.com/request-file.html">Requesting a Shared File</a></b>
dd2-2-1-3 = Learn how to request a file shared by another app, receive the content URI for the file, and use the content URI to open the file.
dt2-2-1-4 = <b><a href="http://developer.android.com/retrieve-info.html">Retrieving File Information</a></b>
dd2-2-1-4 = Learn how an app can use a content URI generated by a  <code><a href="http://developer.android.com//reference/android/support/v4/content/FileProvider.html">FileProvider</a></code> to retrieve file information including MIME type and file size.
title2-2-1 = Setting Up File Sharing
p2-2-1-1 = To securely offer a file from your app to another app, you need to configure your app to offer a secure handle to the file, in the form of a content URI. The Android <code><a href="http://developer.android.com//reference/android/support/v4/content/FileProvider.html">FileProvider</a></code> component generates content URIs for files, based on specifications you provide in XML. This lesson shows you how to add the default implementation of <code><a href="http://developer.android.com//reference/android/support/v4/content/FileProvider.html">FileProvider</a></code> to your app, and how to specify the files you want to offer to other apps.
nc2-2-1-1 = <strong>Note:</strong> The <code><a href="http://developer.android.com//reference/android/support/v4/content/FileProvider.html">FileProvider</a></code> class is part of the <a href="http://developer.android.com//tools/support-library/features.html#v4">v4 Support Library</a>. For information about including this library in your application, see <a href="http://developer.android.com//tools/support-library/setup.html">Support Library Setup</a>.
sub_title2-2-1-1 = Specify the FileProvider
p2-2-1-1-1 = Defining a <code><a href="http://developer.android.com//reference/android/support/v4/content/FileProvider.html">FileProvider</a></code> for your app requires an entry in your manifest. This entry specifies the authority to use in generating content URIs, as well as the name of an XML file that specifies the directories your app can share.
p2-2-1-1-2 = The following snippet shows you how to add to your manifest the <code><a href="http://developer.android.com//guide/topics/manifest/provider-element.html">&lt;provider&gt;</a></code> element that specifies the <code><a href="http://developer.android.com//reference/android/support/v4/content/FileProvider.html">FileProvider</a></code> class, the authority, and the XML file name:
#pre2-2-1-1-1
p2-2-1-1-3 = In this example, the <code><a href="http://developer.android.com//guide/topics/manifest/provider-element.html#auth">android:authorities</a></code> attribute specifies the URI authority that you want to use for content URIs generated by the <code><a href="http://developer.android.com//reference/android/support/v4/content/FileProvider.html">FileProvider</a></code>. In the example, the authority is <code>com.example.myapp.fileprovider</code>. For your own app, specify an authority consisting of the app's <code><a href="http://developer.android.com//guide/topics/manifest/manifest-element.html#package">android:package</a></code> value with the string "fileprovider" appended to it. To learn more about the authority value, see the topic <a href="http://developer.android.com//guide/topics/providers/content-provider-basics.html#ContentURIs">Content URIs</a> and the documentation for the <code><a href="http://developer.android.com//guide/topics/manifest/provider-element.html#auth">android:authorities</a></code> attribute.
p2-2-1-1-4 = The <code><a href="http://developer.android.com//guide/topics/manifest/meta-data-element.html">&lt;meta-data&gt;</a></code> child element of the <code><a href="http://developer.android.com//guide/topics/manifest/provider-element.html">&lt;provider&gt;</a></code> points to an XML file that specifies the directories you want to share. The <code>android:resource</code> attribute is the path and name of the file, without the <code>.xml</code> extension.The contents of this file are described in the next section.
sub_title2-2-1-2 = Specify Sharable Directories
p2-2-1-2-1 = Once you have added the <code><a href="http://developer.android.com//reference/android/support/v4/content/FileProvider.html">FileProvider</a></code> to your app manifest, you need to specify the directories that contain the files you want to share. To specify the directories, start by creating the file <code>filepaths.xml</code> in the <code>res/xml/</code> subdirectory of your project. In this file, specify the directories by adding an XML element for each directory. The following snippet shows you an example of the contents of <code>res/xml/filepaths.xml</code>. The snippet also demonstrates how to share a subdirectory of the <code>files/</code> directory in your internal storage area:
#pre2-2-1-2-1
p2-2-1-2-2 = In this example, the <code>&lt;files-path&gt;</code> tag shares directories within the <code>files/</code> directory of your app's internal storage. The <code>path</code> attribute shares the <code>images/</code> subdirectory of <code>files/</code>. The <code>name</code> attribute tells the <code><a href="http://developer.android.com//reference/android/support/v4/content/FileProvider.html">FileProvider</a></code> to add the path segment <code>myimages</code> to content URIs for files in the <code>files/images/</code> subdirectory.
p2-2-1-2-3 = The <code>&lt;paths&gt;</code> element can have multiple children, each specifying a different directory to share. In addition to the <code>&lt;files-path&gt;</code> element, you can use the <code>&lt;external-path&gt;</code> element to share directories in external storage, and the <code>&lt;cache-path&gt;</code> element to share directories in your internal cache directory. To learn more about the child elements that specify shared directories, see the <code><a href="http://developer.android.com//reference/android/support/v4/content/FileProvider.html">FileProvider</a></code> reference documentation.
nc2-2-1-2-1 = <strong>Note:</strong> The XML file is the only way you can specify the directories you want to share; you can't programmatically add a directory.
p2-2-1-2-4 = You now have a complete specification of a <code><a href="http://developer.android.com//reference/android/support/v4/content/FileProvider.html">FileProvider</a></code> that generates content URIs for files in the <code>files/</code> directory of your app's internal storage or for files in subdirectories of <code>files/</code>. When your app generates a content URI for a file, it contains the authority specified in the <code><a href="http://developer.android.com//guide/topics/manifest/provider-element.html">&lt;provider&gt;</a></code> element (<code>com.example.myapp.fileprovider</code>), the path <code>myimages/</code>, and the name of the file.
p2-2-1-2-5 = For example, if you define a <code><a href="http://developer.android.com//reference/android/support/v4/content/FileProvider.html">FileProvider</a></code> according to the snippets in this lesson, and you request a content URI for the file <code>default_image.jpg</code>, <code><a href="http://developer.android.com//reference/android/support/v4/content/FileProvider.html">FileProvider</a></code> returns the following URI:
#pre2-2-1-2-2
title2-2-2 = Sharing a File
p2-2-2-1 = Once you have set up your app to share files using content URIs, you can respond to other apps' requests for those files. One way to respond to these requests is to provide a file selection interface from the server app that other applications can invoke. This approach allows a client application to let users select a file from the server app and then receive the selected file's content URI.
p2-2-2-2 = This lesson shows you how to create a file selection <code><a href="http://developer.android.com//reference/android/app/Activity.html">Activity</a></code> in your app that responds to requests for files.
sub_title2-2-2-1 = Receive File Requests
p2-2-2-1-1 = To receive requests for files from client apps and respond with a content URI, your app should provide a file selection <code><a href="http://developer.android.com//reference/android/app/Activity.html">Activity</a></code>. Client apps start this <code><a href="http://developer.android.com//reference/android/app/Activity.html">Activity</a></code> by calling <code><a href="http://developer.android.com//reference/android/app/Activity.html#startActivityForResult(android.content.Intent, int)">startActivityForResult()</a></code> with an <code><a href="http://developer.android.com//reference/android/content/Intent.html">Intent</a></code> containing the action <code><a href="http://developer.android.com//reference/android/content/Intent.html#ACTION_PICK">ACTION_PICK</a></code>. When the client app calls <code><a href="http://developer.android.com//reference/android/app/Activity.html#startActivityForResult(android.content.Intent, int)">startActivityForResult()</a></code>, your app can return a result to the client app, in the form of a content URI for the file the user selected.
p2-2-2-1-2 = To learn how to implement a request for a file in a client app, see the lesson <a href="http://developer.android.com/request-file.html">Requesting a Shared File</a>.
sub_title2-2-2-2 = Create a File Selection Activity
p2-2-2-2-1 = To set up the file selection <code><a href="http://developer.android.com//reference/android/app/Activity.html">Activity</a></code>, start by specifying the <code><a href="http://developer.android.com//reference/android/app/Activity.html">Activity</a></code> in your manifest, along with an intent filter that matches the action <code><a href="http://developer.android.com//reference/android/content/Intent.html#ACTION_PICK">ACTION_PICK</a></code> and the categories <code><a href="http://developer.android.com//reference/android/content/Intent.html#CATEGORY_DEFAULT">CATEGORY_DEFAULT</a></code> and <code><a href="http://developer.android.com//reference/android/content/Intent.html#CATEGORY_OPENABLE">CATEGORY_OPENABLE</a></code>. Also add MIME type filters for the files your app serves to other apps. The following snippet shows you how to specify the new <code><a href="http://developer.android.com//reference/android/app/Activity.html">Activity</a></code> and intent filter:
#pre2-2-2-2-1
lead2-2-2-2-1 = Define the file selection Activity in code
p2-2-2-2-2 = Next, define an <code><a href="http://developer.android.com//reference/android/app/Activity.html">Activity</a></code> subclass that displays the files available from your app's <code>files/images/</code> directory in internal storage and allows the user to pick the desired file. The following snippet demonstrates how to define this <code><a href="http://developer.android.com//reference/android/app/Activity.html">Activity</a></code> and respond to the user's selection:
#pre2-2-2-2-2
sub_title2-2-2-3 = Respond to a File Selection
p2-2-2-3-1 = Once a user selects a shared file, your application must determine what file was selected and then generate a content URI for the file. Since the <code><a href="http://developer.android.com//reference/android/app/Activity.html">Activity</a></code> displays the list of available files in a <code><a href="http://developer.android.com//reference/android/widget/ListView.html">ListView</a></code>, when the user clicks a file name the system calls the method <code><a href="http://developer.android.com//reference/android/widget/AdapterView.OnItemClickListener.html#onItemClick(android.widget.AdapterView<?>, android.view.View, int, long)">onItemClick()</a></code>, in which you can get the selected file.
p2-2-2-3-2 = In <code><a href="http://developer.android.com//reference/android/widget/AdapterView.OnItemClickListener.html#onItemClick(android.widget.AdapterView<?>, android.view.View, int, long)">onItemClick()</a></code>, get a <code><a href="http://developer.android.com//reference/java/io/File.html">File</a></code> object for the file name of the selected file and pass it as an argument to <code><a href="http://developer.android.com//reference/android/support/v4/content/FileProvider.html#getUriForFile(android.content.Context, java.lang.String, java.io.File)">getUriForFile()</a></code>, along with the authority that you specified in the <code><a href="http://developer.android.com//guide/topics/manifest/provider-element.html">&lt;provider&gt;</a></code> element for the <code><a href="http://developer.android.com//reference/android/support/v4/content/FileProvider.html">FileProvider</a></code>. The resulting content URI contains the authority, a path segment corresponding to the file's directory (as specified in the XML meta-data), and the name of the file including its extension. How <code><a href="http://developer.android.com//reference/android/support/v4/content/FileProvider.html">FileProvider</a></code> maps directories to path segments based on XML meta-data is described in the section <a href="http://developer.android.com/setup-sharing.html#DefineMetaData">Specify Sharable Directories</a>.
p2-2-2-3-3 = The following snippet shows you how to detect the selected file and get a content URI for it:
#pre2-2-2-3-1
p2-2-2-3-4 = Remember that you can only generate content URIs for files that reside in a directory you've specified in the meta-data file that contains the <code>&lt;paths&gt;</code> element, as described in the section <a href="http://developer.android.com/setup-sharing.html#DefineMetaData">Specify Sharable Directories</a>. If you call <code><a href="http://developer.android.com//reference/android/support/v4/content/FileProvider.html#getUriForFile(android.content.Context, java.lang.String, java.io.File)">getUriForFile()</a></code> for a <code><a href="http://developer.android.com//reference/java/io/File.html">File</a></code> in a path that you haven't specified, you receive an <code><a href="http://developer.android.com//reference/java/lang/IllegalArgumentException.html">IllegalArgumentException</a></code>.
sub_title2-2-2-4 = Grant Permissions for the File
p2-2-2-4-1 = Now that you have a content URI for the file you want to share with another app, you need to allow the client app to access the file. To allow access, grant permissions to the client app by adding the content URI to an <code><a href="http://developer.android.com//reference/android/content/Intent.html">Intent</a></code> and then setting permission flags on the <code><a href="http://developer.android.com//reference/android/content/Intent.html">Intent</a></code>. The permissions you grant are temporary and expire automatically when the receiving app's task stack is finished.
p2-2-2-4-2 = The following code snippet shows you how to set read permission for the file:
#pre2-2-2-4-1
cc2-2-2-4-1 = <strong>Caution:</strong> Calling <code><a href="http://developer.android.com//reference/android/content/Intent.html#setFlags(int)">setFlags()</a></code> is the only way to securely grant access to your files using temporary access permissions. Avoid calling <code><a href="http://developer.android.com//reference/android/content/Context.html#grantUriPermission(java.lang.String, android.net.Uri, int)">Context.grantUriPermission()</a></code> method for a file's content URI, since this method grants access that you can only revoke by calling <code><a href="http://developer.android.com//reference/android/content/Context.html#revokeUriPermission(android.net.Uri, int)">Context.revokeUriPermission()</a></code>.
sub_title2-2-2-5 = Share the File with the Requesting App
p2-2-2-5-1 = To share the file with the app that requested it, pass the <code><a href="http://developer.android.com//reference/android/content/Intent.html">Intent</a></code> containing the content URI and permissions to <code><a href="http://developer.android.com//reference/android/app/Activity.html#setResult(int)">setResult()</a></code>. When the <code><a href="http://developer.android.com//reference/android/app/Activity.html">Activity</a></code> you have just defined is finished, the system sends the <code><a href="http://developer.android.com//reference/android/content/Intent.html">Intent</a></code> containing the content URI to the client app. The following code snippet shows you how to do this:
#pre2-2-2-5-1
p2-2-2-5-2 = Provide users with an way to return immediately to the client app once they have chosen a file. One way to do this is to provide a checkmark or <b>Done</b> button. Associate a method with the button using the button's <code><a href="http://developer.android.com//reference/android/view/View.html#attr_android:onClick">android:onClick</a></code> attribute. In the method, call <code><a href="http://developer.android.com//reference/android/app/Activity.html#finish()">finish()</a></code>. For example:
#pre2-2-2-5-2
title2-2-3 = Requesting a Shared File
p2-2-3-1 = When an app wants to access a file shared by another app, the requesting app (the client) usually sends a request to the app sharing the files (the server). In most cases, the request starts an <code><a href="http://developer.android.com//reference/android/app/Activity.html">Activity</a></code> in the server app that displays the files it can share. The user picks a file, after which the server app returns the file's content URI to the client app.
p2-2-3-2 = This lesson shows you how a client app requests a file from a server app, receives the file's content URI from the server app, and opens the file using the content URI.
sub_title2-2-3-1 = Send a Request for the File
p2-2-3-1-1 = To request a file from the server app, the client app calls <code><a href="http://developer.android.com//reference/android/app/Activity.html#startActivityForResult(android.content.Intent, int)">startActivityForResult</a></code> with an <code><a href="http://developer.android.com//reference/android/content/Intent.html">Intent</a></code> containing the action such as <code><a href="http://developer.android.com//reference/android/content/Intent.html#ACTION_PICK">ACTION_PICK</a></code> and a MIME type that the client app can handle.
p2-2-3-1-2 = For example, the following code snippet demonstrates how to send an <code><a href="http://developer.android.com//reference/android/content/Intent.html">Intent</a></code> to a server app in order to start the <code><a href="http://developer.android.com//reference/android/app/Activity.html">Activity</a></code> described in <a href="http://developer.android.com/share-file.html#SendURI">Sharing a File</a>:
#pre2-2-3-1-1
sub_title2-2-3-2 = Access the Requested File
p2-2-3-2-1 = The server app sends the file's content URI back to the client app in an <code><a href="http://developer.android.com//reference/android/content/Intent.html">Intent</a></code>. This <code><a href="http://developer.android.com//reference/android/content/Intent.html">Intent</a></code> is passed to the client app in its override of <code><a href="http://developer.android.com//reference/android/app/Activity.html#onActivityResult(int, int, android.content.Intent)">onActivityResult()</a></code>. Once the client app has the file's content URI, it can access the file by getting its <code><a href="http://developer.android.com//reference/java/io/FileDescriptor.html">FileDescriptor</a></code>.
p2-2-3-2-2 = File security is preserved in this process because the content URI is the only piece of data that the client app receives. Since this URI doesn't contain a directory path, the client app can't discover and open any other files in the server app. Only the client app gets access to the file, and only for the permissions granted by the server app. The permissions are temporary, so once the client app's task stack is finished, the file is no longer accessible outside the server app.
p2-2-3-2-3 = The next snippet demonstrates how the client app handles the <code><a href="http://developer.android.com//reference/android/content/Intent.html">Intent</a></code> sent from the server app, and how the client app gets the <code><a href="http://developer.android.com//reference/java/io/FileDescriptor.html">FileDescriptor</a></code> using the content URI:
#pre2-2-3-2-1
p2-2-3-2-4 = The method <code><a href="http://developer.android.com//reference/android/content/ContentResolver.html#openFileDescriptor(android.net.Uri, java.lang.String)">openFileDescriptor()</a></code> returns a <code><a href="http://developer.android.com//reference/android/os/ParcelFileDescriptor.html">ParcelFileDescriptor</a></code> for the file. From this object, the client app gets a <code><a href="http://developer.android.com//reference/java/io/FileDescriptor.html">FileDescriptor</a></code> object, which it can then use to read the file.
title2-2-4 = Retrieving File Information
p2-2-4-1 = Before a client app tries to work with a file for which it has a content URI, the app can request information about the file from the server app, including the file's data type and file size. The data type helps the client app to determine if it can handle the file, and the file size helps the client app set up buffering and caching for the file.
p2-2-4-2 = This lesson demonstrates how to query the server app's <code><a href="http://developer.android.com//reference/android/support/v4/content/FileProvider.html">FileProvider</a></code> to retrieve a file's MIME type and size.
sub_title2-2-4-1 = Retrieve a File's MIME Type
p2-2-4-1-1 = A file's data type indicates to the client app how it should handle the file's contents. To get the data type of a shared file given its content URI, the client app calls <code><a href="http://developer.android.com//reference/android/content/ContentResolver.html#getType(android.net.Uri)">ContentResolver.getType()</a></code>. This method returns the file's MIME type. By default, a <code><a href="http://developer.android.com//reference/android/support/v4/content/FileProvider.html">FileProvider</a></code> determines the file's MIME type from its filename extension.
p2-2-4-1-2 = The following code snippet demonstrates how a client app retrieves the MIME type of a file once the server app has returned the content URI to the client:
#pre2-2-4-1-1
sub_title2-2-4-2 = Retrieve a File's Name and Size
p2-2-4-2-1 = The <code><a href="http://developer.android.com//reference/android/support/v4/content/FileProvider.html">FileProvider</a></code> class has a default implementation of the <code><a href="http://developer.android.com//reference/android/support/v4/content/FileProvider.html#query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String)">query()</a></code> method that returns the name and size of the file associated with a content URI in a <code><a href="http://developer.android.com//reference/android/database/Cursor.html">Cursor</a></code>. The default implementation returns two columns:
dt2-2-4-2-1 = <code><a href="http://developer.android.com//reference/android/provider/OpenableColumns.html#DISPLAY_NAME">DISPLAY_NAME</a></code>
dd2-2-4-2-1 = The file's name, as a  <code><a href="http://developer.android.com//reference/java/lang/String.html">String</a></code>. This value is the same as the value returned by  <code><a href="http://developer.android.com//reference/java/io/File.html#getName()">File.getName()</a></code>.
dt2-2-4-2-2 = <code><a href="http://developer.android.com//reference/android/provider/OpenableColumns.html#SIZE">SIZE</a></code>
dd2-2-4-2-2 = The size of the file in bytes, as a  <code>long</code> This value is the same as the value returned by  <code><a href="http://developer.android.com//reference/java/io/File.html#length()">File.length()</a></code>
p2-2-4-2-2 = The client app can get both the <code><a href="http://developer.android.com//reference/android/provider/OpenableColumns.html#DISPLAY_NAME">DISPLAY_NAME</a></code> and <code><a href="http://developer.android.com//reference/android/provider/OpenableColumns.html#SIZE">SIZE</a></code> for a file by setting all of the arguments of <code><a href="http://developer.android.com//reference/android/support/v4/content/FileProvider.html#query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String)">query()</a></code> to <code>null</code> except for the content URI. For example, this code snippet retrieves a file's <code><a href="http://developer.android.com//reference/android/provider/OpenableColumns.html#DISPLAY_NAME">DISPLAY_NAME</a></code> and <code><a href="http://developer.android.com//reference/android/provider/OpenableColumns.html#SIZE">SIZE</a></code> and displays each one in separate <code><a href="http://developer.android.com//reference/android/widget/TextView.html">TextView</a></code>:
#pre2-2-4-2-1
title2-3 = Sharing Files with NFC
p2-3-1 = Android allows you to transfer large files between devices using the Android Beam file transfer feature. This feature has a simple API and allows users to start the transfer process by simply touching devices. In response, Android Beam file transfer automatically copies files from one device to the other and notifies the user when it's finished.
p2-3-2 = While the Android Beam file transfer API handles large amounts of data, the Android Beam NDEF transfer API introduced in Android 4.0 (API level 14) handles small amounts of data such as URIs or other small messages. In addition, Android Beam is only one of the features available in the Android NFC framework, which allows you to read NDEF messages from NFC tags. To learn more about Android Beam, see the topic <a href="http://developer.android.com//guide/topics/connectivity/nfc/nfc.html#p2p">Beaming NDEF Messages to Other Devices</a>. To learn more about the NFC framework, see the <a href="http://developer.android.com//guide/topics/connectivity/nfc/index.html">Near Field Communication</a> API guide.
sub_title2-3-1 = Lessons
dt2-3-1-1 = <b><a href="#c2-3-1">Sending Files to Another Device</a></b>
dd2-3-1-1 = Learn how to set up your app to send files to another device.
dt2-3-1-2 = <b><a href="c2-3-2">Receiving Files from Another Device</a></b>
dd2-3-1-2 = Learn how to set up your app to receive files sent by another device.
title2-3-1 = Sending Files to Another Device
p2-3-1-1 = This lesson shows you how to design your app to send large files to another device using Android Beam file transfer. To send files, you request permission to use NFC and external storage, test to ensure your device supports NFC, and provide URIs to Android Beam file transfer.
p2-3-1-2 = The Android Beam file transfer feature has the following requirements:
#ol
li2-3-1-1 = Android Beam file transfer for large files is only available in Android 4.1 (API level 16) and higher.
li2-3-1-2 = Files you want to transfer must reside in external storage. To learn more about using external storage, read <a href="http://developer.android.com//guide/topics/data/data-storage.html#filesExternal">Using the External Storage</a>.
li2-3-1-3 = Each file you want to transfer must be world-readable. You can set this permission by calling the method <code><a href="http://developer.android.com//reference/java/io/File.html#setReadable(boolean)">File.setReadable(true,false)</a></code>.
li2-3-1-4 = You must provide a file URI for the files you want to transfer. Android Beam file transfer is unable to handle content URIs generated by <code><a href="http://developer.android.com//reference/android/support/v4/content/FileProvider.html#getUriForFile(android.content.Context, java.lang.String, java.io.File)">FileProvider.getUriForFile</a></code>.
sub_title2-3-1-1 = Declare Features in the Manifest
p2-3-1-1-1 = First, edit your app manifest to declare the permissions and features your app needs.
lead2-3-1-1-1 = Request Permissions
p2-3-1-1-2 = To allow your app to use Android Beam file transfer to send files from external storage using NFC, you must request the following permissions in your app manifest:
dt2-3-1-1-1 = <code><a href="http://developer.android.com//reference/android/Manifest.permission.html#NFC">NFC</a></code>
dd2-3-1-1-1 = Allows your app to send data over NFC. To specify this permission, add the following element as a child of the  <code><a href="http://developer.android.com//guide/topics/manifest/manifest-element.html">&lt;manifest&gt;</a></code> element:  <pre>     &lt;uses-permission android:name="android.permission.NFC" /&gt; </pre>
dt2-3-1-1-2 = <code><a href="http://developer.android.com//reference/android/Manifest.permission.html#READ_EXTERNAL_STORAGE">READ_EXTERNAL_STORAGE</a></code>
dd2-3-1-1-2 = Allows your app to read from external storage. To specify this permission, add the following element as a child of the  <code><a href="http://developer.android.com//guide/topics/manifest/manifest-element.html">&lt;manifest&gt;</a></code> element:  <pre>     &lt;uses-permission             android:name="android.permission.READ_EXTERNAL_STORAGE" /&gt; </pre>  <p class="note"> <strong>Note:</strong> As of Android 4.2.2 (API level 17), this permission is not enforced. Future versions of the platform may require it for apps that want to read from external storage. To ensure forward compatibility, request the permission now, before it becomes required. </p>
lead2-3-1-1-2 = Specify the NFC feature
p2-3-1-1-3 = Specify that your app uses NFC, by adding a <code><a href="http://developer.android.com//guide/topics/manifest/uses-feature-element.html">&lt;uses-feature&gt;</a></code> element as a child of the <code><a href="http://developer.android.com//guide/topics/manifest/manifest-element.html">&lt;manifest&gt;</a></code> element. Set the <code>android:required</code> attribute to <code>true</code> to indicate that your app won't function unless NFC is present.
p2-3-1-1-4 = The following snippet shows you how to specify the <code><a href="http://developer.android.com//guide/topics/manifest/uses-feature-element.html">&lt;uses-feature&gt;</a></code> element:
#pre2-3-1-1-1
p2-3-1-1-5 = Note that if your app only uses NFC as an option, but still functions if NFC isn't present, you should set <code>android:required</code> to <code>false</code>, and test for NFC in code.
lead2-3-1-1-3 = Specify Android Beam file transfer
p2-3-1-1-6 = Since Android Beam file transfer is only available in Android 4.1 (API level 16) and later, if your app depends on Android Beam file transfer for a key part of its functionality you must specify the <code><a href="http://developer.android.com//guide/topics/manifest/uses-sdk-element.html">&lt;uses-sdk&gt;</a></code> element with the <code><a href="http://developer.android.com//guide/topics/manifest/uses-sdk-element.html#min">android:minSdkVersion</a>="16"</code> attribute. Otherwise, you can set <code><a href="http://developer.android.com//guide/topics/manifest/uses-sdk-element.html#min">android:minSdkVersion</a></code> to another value as necessary, and test for the platform version in code, as described in the following section.
sub_title2-3-1-2 = Test for Android Beam File Transfer Support
p2-3-1-2-1 = To specify in your app manifest that NFC is optional, you use the following element:
#pre2-3-1-2-1
p2-3-1-2-2 = If you set the attribute <code><a href="http://developer.android.com//guide/topics/manifest/uses-feature-element.html#required">android:required</a>="false"</code>, you must test for NFC support and Android Beam file transfer support in code.
p2-3-1-2-3 = To test for Android Beam file transfer support in code, start by testing that the device supports NFC by calling <code><a href="http://developer.android.com//reference/android/content/pm/PackageManager.html#hasSystemFeature(java.lang.String)">PackageManager.hasSystemFeature()</a></code> with the argument <code><a href="http://developer.android.com//reference/android/content/pm/PackageManager.html#FEATURE_NFC">FEATURE_NFC</a></code>. Next, check that the Android version supports Android Beam file transfer by testing the value of <code><a href="http://developer.android.com//reference/android/os/Build.VERSION.html#SDK_INT">SDK_INT</a></code>. If Android Beam file transfer is supported, get an instance of the NFC controller, which allows you to communicate with the NFC hardware. For example:
#pre2-3-1-2-2
sub_title2-3-1-3 = Create a Callback Method that Provides Files
p2-3-1-3-1 = Once you've verified that the device supports Android Beam file transfer, add a callback method that the system invokes when Android Beam file transfer detects that the user wants to send files to another NFC-enabled device. In this callback method, return an array of <code><a href="http://developer.android.com//reference/android/net/Uri.html">Uri</a></code> objects. Android Beam file transfer copies the files represented by these URIs to the receiving device.
p2-3-1-3-2 = To add the callback method, implement the <code><a href="http://developer.android.com//reference/android/nfc/NfcAdapter.CreateBeamUrisCallback.html">NfcAdapter.CreateBeamUrisCallback</a></code> interface and its method <code><a href="http://developer.android.com//reference/android/nfc/NfcAdapter.CreateBeamUrisCallback.html#createBeamUris(android.nfc.NfcEvent)">createBeamUris()</a></code>. The following snippet shows you how to do this:
#pre2-3-1-3-1
p2-3-1-3-3 = Once you've implemented the interface, provide the callback to Android Beam file transfer by calling <code><a href="http://developer.android.com//reference/android/nfc/NfcAdapter.html#setBeamPushUrisCallback(android.nfc.NfcAdapter.CreateBeamUrisCallback, android.app.Activity)">setBeamPushUrisCallback()</a></code>. The following snippet shows you how to do this:
#pre2-3-1-3-2
nc2-3-1-3-1 = <strong>Note:</strong> You can also provide the array of <code><a href="http://developer.android.com//reference/android/net/Uri.html">Uri</a></code> objects directly to the NFC framework through your app's <code><a href="http://developer.android.com//reference/android/nfc/NfcAdapter.html">NfcAdapter</a></code> instance. Choose this approach if you can define the URIs to transfer before the NFC touch event occurs. To learn more about this approach, see <code><a href="http://developer.android.com//reference/android/nfc/NfcAdapter.html#setBeamPushUris(android.net.Uri[], android.app.Activity)">NfcAdapter.setBeamPushUris()</a></code>.
sub_title2-3-1-4 = Specify the Files to Send
p2-3-1-4-1 = To transfer one or more files to another NFC-enabled device, get a file URI (a URI with a <code>file</code> scheme) for each file and then add the URI to an array of <code><a href="http://developer.android.com//reference/android/net/Uri.html">Uri</a></code> objects. To transfer a file, you must also have permanent read access for the file. For example, the following snippet shows you how to get a file URI from a file name and then add the URI to the array:
#pre2-3-1-4-1
title2-3-2 = Receiving Files from Another Device
p2-3-2-1 = Android Beam file transfer copies files to a special directory on the receiving device. It also scans the copied files using the Android Media Scanner and adds entries for media files to the <code><a href="http://developer.android.com//reference/android/provider/MediaStore.html">MediaStore</a></code> provider. This lesson shows you how to respond when the file copy is complete, and how to locate the copied files on the receiving device.
sub_title2-3-2-1 = Respond to a Request to Display Data
p2-3-2-1-1 = When Android Beam file transfer finishes copying files to the receiving device, it posts a notification containing an <code><a href="http://developer.android.com//reference/android/content/Intent.html">Intent</a></code> with the action <code><a href="http://developer.android.com//reference/android/content/Intent.html#ACTION_VIEW">ACTION_VIEW</a></code>, the MIME type of the first file that was transferred, and a URI that points to the first file. When the user clicks the notification, this intent is sent out to the system. To have your app respond to this intent, add an <code><a href="http://developer.android.com//guide/topics/manifest/intent-filter-element.html">&lt;intent-filter&gt;</a></code> element for the <code><a href="http://developer.android.com//guide/topics/manifest/activity-element.html">&lt;activity&gt;</a></code> element of the <code><a href="http://developer.android.com//reference/android/app/Activity.html">Activity</a></code> that should respond. In the <code><a href="http://developer.android.com//guide/topics/manifest/intent-filter-element.html">&lt;intent-filter&gt;</a></code> element, add the following child elements:
dt2-3-2-1-1 = <code><a href="http://developer.android.com//guide/topics/manifest/action-element.html">&lt;action android:name="android.intent.action.VIEW" /&gt;</a></code>
dd2-3-2-1-1 = Matches the  <code><a href="http://developer.android.com//reference/android/content/Intent.html#ACTION_VIEW">ACTION_VIEW</a></code> intent sent from the notification.
dt2-3-2-1-2 = <code><a href="http://developer.android.com//guide/topics/manifest/category-element.html">&lt;category android:name="android.intent.category.CATEGORY_DEFAULT" /&gt;</a></code>
dd2-3-2-1-2 = Matches an  <code><a href="http://developer.android.com//reference/android/content/Intent.html">Intent</a></code> that doesn't have an explicit category.
dt2-3-2-1-3 = <code><a href="http://developer.android.com//guide/topics/manifest/data-element.html">&lt;data android:mimeType="<i>mime-type</i>" /&gt;</a></code>
dd2-3-2-1-3 = Matches a MIME type. Specify only those MIME types that your app can handle.
p2-3-2-1-2 = For example, the following snippet shows you how to add an intent filter that triggers the activity <code>com.example.android.nfctransfer.ViewActivity</code>:
#pre2-3-2-1-1
nc2-3-2-1-1 = <strong>Note:</strong> Android Beam file transfer is not the only source of an <code><a href="http://developer.android.com//reference/android/content/Intent.html#ACTION_VIEW">ACTION_VIEW</a></code> intent. Other apps on the receiving device can also send an <code><a href="http://developer.android.com//reference/android/content/Intent.html">Intent</a></code> with this action. Handling this situation is discussed in the section <a href="http://developer.android.com/#GetDirectory">Get the directory from a content URI</a>.
sub_title2-3-2-2 = Request File Permissions
p2-3-2-2-1 = To read files that Android Beam file transfer copies to the device, request the permission <code><a href="http://developer.android.com//reference/android/Manifest.permission.html#READ_EXTERNAL_STORAGE">READ_EXTERNAL_STORAGE</a></code>. For example:
#pre2-3-2-2-1
p2-3-2-2-2 = If you want to copy transferred files to your app's own storage area, request the permission <code><a href="http://developer.android.com//reference/android/Manifest.permission.html#WRITE_EXTERNAL_STORAGE">WRITE_EXTERNAL_STORAGE</a></code> instead. <code><a href="http://developer.android.com//reference/android/Manifest.permission.html#WRITE_EXTERNAL_STORAGE">WRITE_EXTERNAL_STORAGE</a></code> includes <code><a href="http://developer.android.com//reference/android/Manifest.permission.html#READ_EXTERNAL_STORAGE">READ_EXTERNAL_STORAGE</a></code>.
nc2-3-2-2-1 = <strong>Note:</strong> As of Android 4.2.2 (API level 17), the permission <code><a href="http://developer.android.com//reference/android/Manifest.permission.html#READ_EXTERNAL_STORAGE">READ_EXTERNAL_STORAGE</a></code> is only enforced if the user chooses to do so. Future versions of the platform may require this permission in all cases. To ensure forward compatibility, request the permission now, before it becomes required.
p2-3-2-2-3 = Since your app has control over its internal storage area, you don't need to request write permission to copy a transferred file to your internal storage area.
sub_title2-3-2-3 = Get the Directory for Copied Files
p2-3-2-3-1 = Android Beam file transfer copies all the files in a single transfer to one directory on the receiving device. The URI in the content <code><a href="http://developer.android.com//reference/android/content/Intent.html">Intent</a></code> sent by the Android Beam file transfer notification points to the first transferred file. However, your app may also receive an <code><a href="http://developer.android.com//reference/android/content/Intent.html#ACTION_VIEW">ACTION_VIEW</a></code> intent from a source other than Android Beam file transfer. To determine how you should handle the incoming <code><a href="http://developer.android.com//reference/android/content/Intent.html">Intent</a></code>, you need to examine its scheme and authority.
p2-3-2-3-2 = To get the scheme for the URI, call <code><a href="http://developer.android.com//reference/android/net/Uri.html#getScheme()">Uri.getScheme()</a></code>. The following code snippet shows you how to determine the scheme and handle the URI accordingly:
#pre2-3-2-3-1
lead2-3-2-3-1 = Get the directory from a file URI
p2-3-2-3-3 = If the incoming <code><a href="http://developer.android.com//reference/android/content/Intent.html">Intent</a></code> contains a file URI, the URI contains the absolute file name of a file, including the full directory path and file name. For Android Beam file transfer, the directory path points to the location of the other transferred files, if any. To get the directory path, get the path part of the URI, which contains all of the URI except the <code>file:</code> prefix. Create a <code><a href="http://developer.android.com//reference/java/io/File.html">File</a></code> from the path part, then get the parent path of the <code><a href="http://developer.android.com//reference/java/io/File.html">File</a></code>:
#pre2-3-2-3-2
lead2-3-2-3-2 = Get the directory from a content URI
p2-3-2-3-4 = If the incoming <code><a href="http://developer.android.com//reference/android/content/Intent.html">Intent</a></code> contains a content URI, the URI may point to a directory and file name stored in the <code><a href="http://developer.android.com//reference/android/provider/MediaStore.html">MediaStore</a></code> content provider. You can detect a content URI for <code><a href="http://developer.android.com//reference/android/provider/MediaStore.html">MediaStore</a></code> by testing the URI's authority value. A content URI for <code><a href="http://developer.android.com//reference/android/provider/MediaStore.html">MediaStore</a></code> may come from Android Beam file transfer or from another app, but in both cases you can retrieve a directory and file name for the content URI.
p2-3-2-3-5 = You can also receive an incoming <code><a href="http://developer.android.com//reference/android/content/Intent.html#ACTION_VIEW">ACTION_VIEW</a></code> intent containing a content URI for a content provider other than <code><a href="http://developer.android.com//reference/android/provider/MediaStore.html">MediaStore</a></code>. In this case, the content URI doesn't contain the <code><a href="http://developer.android.com//reference/android/provider/MediaStore.html">MediaStore</a></code> authority value, and the content URI usually doesn't point to a directory.
nc2-3-2-3-1 = <strong>Note:</strong> For Android Beam file transfer, you receive a content URI in the <code><a href="http://developer.android.com//reference/android/content/Intent.html#ACTION_VIEW">ACTION_VIEW</a></code> intent if the first incoming file has a MIME type of "audio/*", "image/*", or "video/*", indicating that the file is media- related. Android Beam file transfer indexes the media files it transfers by running Media Scanner on the directory where it stores transferred files. Media Scanner writes its results to the <code><a href="http://developer.android.com//reference/android/provider/MediaStore.html">MediaStore</a></code> content provider, then it passes a content URI for the first file back to Android Beam file transfer. This content URI is the one you receive in the notification <code><a href="http://developer.android.com//reference/android/content/Intent.html">Intent</a></code>. To get the directory of the first file, you retrieve it from <code><a href="http://developer.android.com//reference/android/provider/MediaStore.html">MediaStore</a></code> using the content URI.
lead2-3-2-3-3 = Determine the content provider
p2-3-2-3-6 = To determine if you can retrieve a file directory from the content URI, determine the the content provider associated with the URI by calling <code><a href="http://developer.android.com//reference/android/net/Uri.html#getAuthority()">Uri.getAuthority()</a></code> to get the URI's authority. The result has two possible values:
dt2-3-2-3-1 = <code><a href="http://developer.android.com//reference/android/provider/MediaStore.html#AUTHORITY">MediaStore.AUTHORITY</a></code>
dd2-3-2-3-1 = The URI is for a file or files tracked by  <code><a href="http://developer.android.com//reference/android/provider/MediaStore.html">MediaStore</a></code>. Retrieve the full file name from  <code><a href="http://developer.android.com//reference/android/provider/MediaStore.html">MediaStore</a></code>, and get directory from the file name.
dt2-3-2-3-2 = Any other authority value
dd2-3-2-3-2 = A content URI from another content provider. Display the data associated with the content URI, but don't get the file directory.
p2-3-2-3-7 = To get the directory for a <code><a href="http://developer.android.com//reference/android/provider/MediaStore.html">MediaStore</a></code> content URI, run a query that specifies the incoming content URI for the <code><a href="http://developer.android.com//reference/android/net/Uri.html">Uri</a></code> argument and the column <code><a href="http://developer.android.com//reference/android/provider/MediaStore.MediaColumns.html#DATA">MediaColumns.DATA</a></code> for the projection. The returned <code><a href="http://developer.android.com//reference/android/database/Cursor.html">Cursor</a></code> contains the full path and name for the file represented by the URI. This path also contains all the other files that Android Beam file transfer just copied to the device.
p2-3-2-3-8 = The following snippet shows you how to test the authority of the content URI and retrieve the the path and file name for the transferred file:
#pre2-3-2-3-3
p2-3-2-3-9 = To learn more about retrieving data from a content provider, see the section <a href="http://developer.android.com//guide/topics/providers/content-provider-basics.html#SimpleQuery">Retrieving Data from the Provider</a>.
