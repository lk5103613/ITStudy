title3 = 创建多媒体应用
p3-1 = 这一章节将会教你如何创建用户期望的多媒体应用。
title3-1 = 音频管理
p3-1-1 = 如果你的应用播放音乐，让用户能够自如的控制音乐的播放是十分重要的。为了保证出色的用户体验，你同样需要保证不能让多个应用同时播放音乐。
p3-1-2 = 略。
sub_title3-1-1 = 课程
dt3-1-1-1 = <b><a href="#c3-1-1">控制你的应用的音量和回放</a></b>
dd3-1-1-1 = 学习如何控制音量以及处理播放，通知，暂停，下一首和回放按键。
dt3-1-1-2 = <b><a href="#c3-1-2">管理音频焦点</a></b>
dd3-1-1-2 = 多媒体应用需要特别注意音乐播放时的交互。为了避免多个音乐应用同时播放，安卓使用音频焦点来解决这一问题。这一节将学习如何获取音频焦点。
dt3-1-1-3 = <b><a href="#c3-1-3">关于音频输出硬件</a></b>
dd3-1-1-3 = 会有许多情况会播放音乐。这一节将学习如何判断音乐播放的情况并且处理在播放过程中摘除耳机改如何处理。
title3-1-1 = 控制你的应用的音量和回放
p3-1-1-1 = 可预测的行为是一个好的用户体验的基础。如果你的应用可以播放音频，那么让用户可以通过软硬件调控音量是十分重要的一点。
p3-1-1-2 = 同样，在你的应用中，播放、停止、暂停等功能也必须能够通过软硬件的方式控制。
sub_title3-1-1-1 = 确定使用哪一个音频流
p3-1-1-1-1 = 让你的应用具有良好的可预测性的第一步就是选择你的音乐是播放在哪个音频流上的。
p3-1-1-1-2 = 安卓是独立的处理不同的音频流的，比如播放音乐，闹铃，通知，来电，系统音量，来电音量等。这么做是为了方便用户管理不同的音频流。
p3-1-1-1-3 = 上面大多数音频流是受限制的，除非你想替换系统的闹钟，不然你的应用肯定是使用<code><a href="http://developer.android.com//reference/android/media/AudioManager.html#STREAM_MUSIC">STREAM_MUSIC</a></code>这一音频流。
sub_title3-1-1-2 = 使用音量按键控制你的应用的音量
p3-1-1-2-1 = 默认情况下，按下音量键时改变的是当前正在播放的音频流的音量。如果你的应用当前没有播放音乐，那么按下音量键将会调整来电音量。
p3-1-1-2-2 = 如果你正在玩游戏或者听音乐，大部分情况下当你按下音量键时调整的是游戏或者音乐的音量，即使它们当前并没有播放音乐。
p3-1-1-2-3 = 你或许很想尝试监听音量按键事件来改变你自己应用的音量。抑制住你那种冲动。安卓提供了一个方便的<code><a href="http://developer.android.com//reference/android/app/Activity.html#setVolumeControlStream(int)">setVolumeControlStream()</a></code>方法，这个方法将会告诉音量键去控制你想要的音频流。
p3-1-1-2-4 = 指定了你应用将要使用的音频流，下一步你需要将它作为音量流的目标。你应该在应用生命周期的早期做这步操作（比如<code><a href="http://developer.android.com//reference/android/app/Activity.html">Activity</a></code>或者<code><a href="http://developer.android.com//reference/android/app/Fragment.html">Fragment</a></code>的<code>onCreate()</code>方法中），这样可以保证只要你的应用可见音量就可控。
#pre3-1-1-2-1
p3-1-1-2-5 = 上面的代码设置后，无论你的activity或者fragment是否可见，按下音量键将会调整你指定音频流的音量（这里是“music”）。
sub_title3-1-1-3 = 使用硬件的播放键控制你应用音频的播放
p3-1-1-3-1 = 媒体播放键比如播放，暂停，停止，跳过在一些耳机上会有实体按键。当用户按下其中一个按键时，系统会发送一个<code><a href="http://developer.android.com//reference/android/content/Intent.html#ACTION_MEDIA_BUTTON">ACTION_MEDIA_BUTTON</a></code>行为的广播。
p3-1-1-3-2 = 为了处理按键的点击，你需要在你的manifest中注册一个<code><a href="http://developer.android.com//reference/android/content/BroadcastReceiver.html">BroadcastReceiver</a></code>来监听上面所发出的广播。
#pre3-1-1-3-1
p3-1-1-3-3 = 为了获得当前点击的是哪个按钮。在<code><a href="http://developer.android.com//reference/android/content/Intent.html">Intent</a></code>中的<code><a href="http://developer.android.com//reference/android/content/Intent.html#EXTRA_KEY_EVENT">EXTRA_KEY_EVENT</a></code>键包含了这个信息。而<code><a href="http://developer.android.com//reference/android/view/KeyEvent.html">KeyEvent</a></code>类中包含了可能的各种音频按键常量，比如<code><a href="http://developer.android.com//reference/android/view/KeyEvent.html#KEYCODE_MEDIA_PLAY_PAUSE">KEYCODE_MEDIA_PLAY_PAUSE</a></code>和<code><a href="http://developer.android.com//reference/android/view/KeyEvent.html#KEYCODE_MEDIA_NEXT">KEYCODE_MEDIA_NEXT</a></code>。
p3-1-1-3-4 = 接下来的代码展示了如何判定是哪个按键，并做出相应的操作。
#pre3-1-1-3-2
p3-1-1-3-5 = 因为多个应用可能希望监听媒体按键的点击，所以你必须通过变成的方式控制你的应用何时需要监听媒体按键的点击事件。
p3-1-1-3-6 = 当你注册或注销媒体按钮的监听时，可以使用这段代码，这里使用了<code><a href="http://developer.android.com//reference/android/media/AudioManager.html">AudioManager</a></code>来进行的操作。
#pre3-1-1-3-3
p3-1-1-3-7 = 特别需要注意的是，当应用未激活或不可见时应该注销它们大部分的广播接收者（比如在<code><a href="http://developer.android.com//reference/android/app/Activity.html#onStop()">onStop()</a></code>回调时）。然而，这并不是那么简单的事，实际上，当应用不可见时相应音频的按键也是十分重要的事情。
p3-1-1-3-8 = 一个更好的做法是在你的应用获取到音频焦点时注册，在失去焦点时注销。具体的细节将会在下一节展示。
title3-1-2 = 管理音频焦点
p3-1-2-1 = 当有多个应用识图播放音频时，如何处理就变得至关重要。为了避免所有引用同时播放音乐，安卓使用了音频焦点，即只有在一个应用获得音频焦点后才能播放音乐。
p3-1-2-2 = 在你的应用播放音乐之前，它应该先请求，并获取音频焦点。同样的，它应该知道怎样监听音频焦点丢失事件并做出恰当的处理。
sub_title3-1-2-1 = 请求音频焦点
p3-1-2-1-1 = 在你的应用开始播放任何音频之前，它应该获得它要使用的音频流的音频焦点。通过调用<code><a href="http://developer.android.com//reference/android/media/AudioManager.html#requestAudioFocus(android.media.AudioManager.OnAudioFocusChangeListener, int, int)">requestAudioFocus()</a></code>方法可以完成这一操作，如果你获取焦点成功，这个方法会返回<code><a href="http://developer.android.com//reference/android/media/AudioManager.html#AUDIOFOCUS_REQUEST_GRANTED">AUDIOFOCUS_REQUEST_GRANTED</a></code>。
p3-1-2-1-2 = 你必须指明你的音频流，以及你想获得的焦点是瞬时的还是永久的。当你只向播放一个很短的音乐时请求瞬时音频焦点（比如播放导航语音时）。当你不知道将播放多久时使用永久音频焦点（比如当播放音乐时）。
p3-1-2-1-3 = 下面的片段展示如何请求music音频流的瞬时音频焦点。你应该在开始播放之前立即请求焦点，比如当用户按下播放键或者游戏下一关游戏的背景音乐开始之前。
#pre3-1-2-1-1
p3-1-2-1-4 = 一旦你停止播放音乐，确保调用<code><a href="http://developer.android.com//reference/android/media/AudioManager.html#abandonAudioFocus(android.media.AudioManager.OnAudioFocusChangeListener)">abandonAudioFocus()</a></code>方法。这将告诉系统你不再需要音频焦点，并注销<code><a href="http://developer.android.com//reference/android/media/AudioManager.OnAudioFocusChangeListener.html">AudioManager.OnAudioFocusChangeListener</a></code>。如果放弃了音频焦点，那么其他被打断的应用就可以继续播放。
#pre3-1-2-1-2
p3-1-2-1-5 = 当请求瞬时音频焦点时你还有一些额外选项：你是否想要启用"ducking"。一般情况下，一个拥有良好设计的应用，当它失去银屏焦点时立即停止自己的播放。在启用了"ducking"之后，这些应用可以继续播放他们的音乐但是会降低音量，直到重新获得音频焦点为止。
#pre3-1-2-1-3
p3-1-2-1-6 = 当一个应用断断续续的使用音频时，使用"ducking"特别合适，比如音频导航。
p3-1-2-1-7 = 如果其他的应用请求音频焦点，你注册的监听器将会监听到这个事件。
sub_title3-1-2-2 = 处理丢失音频焦点事件
p3-1-2-2-1 = 如果你的应用可以获取焦点，那么当别的应用请求焦点时你的应用也会失去焦点。如何处理丢失焦点要根据丢失焦点的方式不同而不同。
p3-1-2-2-2 = 当有应用请求音频焦点时，<code><a href="http://developer.android.com//reference/android/media/AudioManager.OnAudioFocusChangeListener.html#onAudioFocusChange(int)">onAudioFocusChange()</a></code>回调方法会返回一个参数指示焦点发生了改变。特别的，丢失焦点的方式与上一节讲的获得焦点的方式相对应：瞬时丢失，永久丢失，以及带有"ducking"的瞬时丢失。
p3-1-2-2-3 = 一般来讲，瞬时丢失焦点应该让你的音频停止播放，但保持相同的状态。你应该继续监听焦点的改变，并且在你重新获得焦点之后重新开始播放。
p3-1-2-2-4 = 如果音频丢失为永久丢失，那么有可能别的应用开始播放音乐，而你的应用应该终止运行。从实践角度出发，这意味着停止播放，移除媒体按键的监听，允许其他应用专门监听这些按键，并释放音频焦点。这时，只有在用户点击播放时你才能重新开始播放音乐。p3-1-2-2-5 = In the following code snippet, we pause the playback or our media player object if the audio loss is transient and resume it when we have regained the focus. If the loss is permanent, it unregisters our media button event receiver and stops monitoring audio focus changes.
#pre3-1-2-2-1
p3-1-2-2-6 = 其中一种情况是当短暂的丢失焦点并且允许"ducking"状态，你可以不暂停播放，而是降低音量。
sub_title3-1-2-3 = Duck!
p3-1-2-3-1 = Ducking 是通过降低你应用的音量从而使得其他应用播放的音频能够被听清的这个过程。
p3-1-2-3-2 = 下面的代码片段展示如何在暂时丢失焦点时降低音量，而在重新获得焦点时恢复之前的音量。
#pre3-1-2-3-1
p3-1-2-3-3 = 丢失音频焦点是要处理的最重要的广播，但不是唯一的。系统会广播一系列意图来提示你改变音频行为。下一节将教会你如何监听它们来提高用户体验。
title3-1-3 = 关于音频输出硬件
p3-1-3-1 = 用户想在他们的设备欣赏音乐有许多种选择，比如内置扬声器，无线耳机，或者蓝牙连接的支持A2DP的音频设备。
sub_title3-1-3-1 = 检查使用的哪个硬件
p3-1-3-1-1 = 你的应用的行为是由输出音频的硬件决定的。
p3-1-3-1-2 = 你可以通过<code><a href="http://developer.android.com//reference/android/media/AudioManager.html">AudioManager</a></code>方法查询当前的音频输出设备是设备扬声器，无线耳机还是蓝牙设备。下面的代码展示了这一点：
#pre3-1-3-1-1
sub_title3-1-3-2 = 处理音频输出设备的变更
p3-1-3-2-1 = 当耳机从插口脱落，或者一个蓝牙设备断开连接，音频流会自动连接到内置扬声器。如果你听音乐的声音和我一样大，那将会是一个大惊喜。
p3-1-3-2-2 = 幸运的是当这种事情发生时系统会发送一个<code><a href="http://developer.android.com//reference/android/media/AudioManager.html#ACTION_AUDIO_BECOMING_NOISY">ACTION_AUDIO_BECOMING_NOISY</a></code>广播。当你的应用在播放音频时最好注册一个<code><a href="http://developer.android.com//reference/android/content/BroadcastReceiver.html">广播接收者</a></code>来监听这个广播。如果你的应用正在播放音乐，那么当这种情况发生时，用户希望能够暂停播放，而如果你的应用是一个游戏，用户可能希望降低播放的音量。
#pre3-1-3-2-1
title3-2 = 调用相机
p3-2-1 = 在富媒体流行之前，这个世界是惨淡，毫无新意的。还记得Gopher么？我们记不得了。想要你的应用变成你用户生活的一部分，就要想办法让他们把生活放进去。使用手机相机，你的应用可以将他们周围所看的东西收录进来，制作一个独一无二的阿凡达，找寻角落里的僵尸，或者只是分享他们的体验。
p3-2-2 = 这一节将带你熟悉超级简单的使用照相机应用。在后面的课程中，你将会更加深入的学习如何使用照相机。
sub_title3-2-1 = 课程
dt3-2-1-1 = <b><a href="#c3-2-1">简单的拍照</a></b>
dd3-2-1-1 = 利用其他照相程序可以只用几行代码就获取一张照片。
dt3-2-1-2 = <b><a href="#c3-2-2">简单的录制视频</a></b>
dd3-2-1-2 = 利用其他的应用可以轻松的录制一段视屏。
dt3-2-1-3 = <b><a href="#c3-2-3">控制相机</a></b>
dd3-2-1-3 = 直接控制摄像头硬件，并实现自己的拍照应用。
title3-2-1 = 简单的拍照
p3-2-1-1 = 这一节将展示如何用已有拍照程序拍摄一张照片。
p3-2-1-2 = 可能你正在实现一个天气服务软件，可以将天气情况的地图和用手机拍的天空合成起来。整合照片只是你应用的很小一部分。你不想在这个功能上耗费太长的时间，也不需要修改已拍好的图片。值得让你高兴的是，大部分安卓设备上至少有一个摄像头应用。在这一节，你将学会如何让那个应用为你拍摄一张照片。
sub_title3-2-1-1 = 请求摄像头权限
p3-2-1-1-1 = 如果拍照功能对你的应用来讲至关重要，那么你需要在Google play上进行限制。可以在manifest文件中添加<a href="http://developer.android.com//guide/topics/manifest/uses-feature-element.html"> <code>&lt;uses-feature&gt;</code></a>来实现。
#pre3-2-1-1-1
p3-2-1-1-2 = 如果你的应用使用到了拍照，但不是一项必须的功能，那么设置<code>android:required</code>为<code>false</code>。这么做的话，Google Play将允许没有摄像头的设备下载你的应用。接下通过<code><a href="http://developer.android.com//reference/android/content/pm/PackageManager.html#hasSystemFeature(java.lang.String)">hasSystemFeature(PackageManager.FEATURE_CAMERA)</a></code>来检查该设备有没有摄像头就是你的任务了。如果摄像头不可用，你应该禁用摄像功能。
sub_title3-2-1-2 = 使用摄像机应用拍照
p3-2-1-2-1 = 在安卓中，想要让其他应用处理你的行为，需要使用到<code><a href="http://developer.android.com//reference/android/content/Intent.html">Intent</a></code>来描述你想要进行的操作。这个过程分三个部分：<code><a href="http://developer.android.com//reference/android/content/Intent.html">Intent</a></code>本身，调用其他外部<code><a href="http://developer.android.com//reference/android/app/Activity.html">Activity</a></code>，以及当获得返回的图片后进行的处理。
p3-2-1-2-2 = 下面是使用意图来捕获照片的方法。
#pre3-2-1-2-1
p3-2-1-2-3 = 注意调用<code><a href="http://developer.android.com//reference/android/app/Activity.html#startActivityForResult(android.content.Intent, int)">startActivityForResult()</a></code>方法之前需要使用<code><a href="http://developer.android.com//reference/android/content/Intent.html#resolveActivity(android.content.pm.PackageManager)">resolveActivity()</a></code>来进行检查，这个方法会返回第一个满足意图筛选条件的activity。做这一步检查是十分重要的，因为如果没有应用能够接收你的意图，那么你的应用会崩溃。所以只要返回结果不为null，你就可以放心的使用这个意图。
sub_title3-2-1-3 = 获取缩略图
p3-2-1-3-1 = 如果简单的拍摄一张照片不能满足你应用的雄心壮志，那么你可能想要获取拍摄到的照片并做一些处理。
p3-2-1-3-2 = 安卓的相机应用将照片编辑成<code><a href="http://developer.android.com//reference/android/graphics/Bitmap.html">Bitmap</a></code>放在<code><a href="http://developer.android.com//reference/android/content/Intent.html">Intent</a></code>中传递给<code><a href="http://developer.android.com//reference/android/app/Activity.html#onActivityResult(int, int, android.content.Intent)">onActivityResult()</a></code>方法。接下来的代码将获得这张图片并将它展示在<code><a href="http://developer.android.com//reference/android/widget/ImageView.html">ImageView</a></code>中。
#pre3-2-1-3-1
nc3-2-1-3-1 = <strong>注意:</strong> 这个从<code>"data"</code>中获取的缩略图对于一个icon是好用的，但不适用于大图片。处理全尺寸图像还需要做许多操作。
sub_title3-2-1-4 = 保存全尺寸照片
p3-2-1-4-1 = 如果你告诉安卓相机应用保存照片的路径，它将会保存全尺寸照片。你必须提供一个全路径名来保存这张照片。
p3-2-1-4-2 = 一般情况下，用户使用手机拍摄的任何照片应该被保存在外部存储器上供其他所有应用访问。这个路径可以通过调用<code><a href="http://developer.android.com//reference/android/os/Environment.html#getExternalStoragePublicDirectory(java.lang.String)">getExternalStoragePublicDirectory()</a></code>方法获得，使用<code><a href="http://developer.android.com//reference/android/os/Environment.html#DIRECTORY_PICTURES">DIRECTORY_PICTURES</a></code>作为参数。因为这个路径被所有应用共享，要想读写这个目录分别需要<code><a href="http://developer.android.com//reference/android/Manifest.permission.html#READ_EXTERNAL_STORAGE">READ_EXTERNAL_STORAGE</a></code>和<code><a href="http://developer.android.com//reference/android/Manifest.permission.html#WRITE_EXTERNAL_STORAGE">WRITE_EXTERNAL_STORAGE</a></code>权限。写权限包含了读权限，所以如果你要想这个目录写内容，那么你只需要请求一个权限：
#pre3-2-1-4-1
p3-2-1-4-3 = 然而，如果你希望这张照片只能由你的应用访问，你可以使用<code><a href="http://developer.android.com//reference/android/content/Context.html#getExternalFilesDir(java.lang.String)">getExternalFilesDir()</a></code>方法获得路径。在安卓4.3之前，想这个文件夹写内容依然需要<code><a href="http://developer.android.com//reference/android/Manifest.permission.html#WRITE_EXTERNAL_STORAGE">WRITE_EXTERNAL_STORAGE</a></code>权限。从安卓4.4开始，这个权限不再需要，因为其他应用无法访问这个目录，所以你只需要在低版本的安卓上申请这个权限：
#pre3-2-1-4-2
nc3-2-1-4-1 = <strong>注意:</strong> 你使用<code><a href="http://developer.android.com//reference/android/content/Context.html#getExternalFilesDir(java.lang.String)">getExternalFilesDir()</a></code>方法获取到的路径中的文件，在你卸载应用时将会被删除。
p3-2-1-4-4 = 一旦你决定了存储文件的目录，接下来就要小心命名冲突问题了。你也同样希望将路径存为变量以后使用。这里的例子展示了一个方法返回唯一的名称，这个名称由时间戳组成：
#pre3-2-1-4-3
p3-2-1-4-5 = 使用这个方法可以为相片新建一个文件，现在你可以像这样创建并使用<code><a href="http://developer.android.com//reference/android/content/Intent.html">Intent</a></code>：
#pre3-2-1-4-4
sub_title3-2-1-5 = 添加相片到相册
p3-2-1-5-1 = 当你使用意图创建一个照片后，你应该知道你的图片所在的位置，因为你制定了存放它们的第一位置。为了让所有其他的人使用，或许最简单的方法就是让它可以从系统的媒体提供者访问到。
nc3-2-1-5-1 = <strong>注意:</strong> 如果你使用<code><a href="http://developer.android.com//reference/android/content/Context.html#getExternalFilesDir(java.lang.String)">getExternalFilesDir()</a></code>作为你存储图片的路径，那么媒体扫描器将无法访问到你的文件，因为它们是你的应用所独有的。
p3-2-1-5-2 = 下面的例子演示了如何将你的照片添加到系统媒体库中， making it available in the Android Gallery application and to other apps.
#pre3-2-1-5-1
sub_title3-2-1-6 = Decode a Scaled Image
p3-2-1-6-1 = Managing multiple full-sized images can be tricky with limited memory. If you find your application running out of memory after displaying just a few images, you can dramatically reduce the amount of dynamic heap used by expanding the JPEG into a memory array that's already scaled to match the size of the destination view. The following example method demonstrates this technique.
#pre3-2-1-6-1
title3-2-2 = Recording Videos Simply
p3-2-2-1 = This lesson explains how to capture video using existing camera applications.
p3-2-2-2 = Your application has a job to do, and integrating videos is only a small part of it. You want to take videos with minimal fuss, and not reinvent the camcorder. Happily, most Android-powered devices already have a camera application that records video. In this lesson, you make it do this for you.
sub_title3-2-2-1 = Request Camera Permission
p3-2-2-1-1 = To advertise that your application depends on having a camera, put a <code>&lt;uses-feature&gt;</code> tag in the manifest file:
#pre3-2-2-1-1
p3-2-2-1-2 = If your application uses, but does not require a camera in order to function, set <code>android:required</code> to <code>false</code>. In doing so, Google Play will allow devices without a camera to download your application. It's then your responsibility to check for the availability of the camera at runtime by calling <code><a href="http://developer.android.com//reference/android/content/pm/PackageManager.html#hasSystemFeature(java.lang.String)">hasSystemFeature(PackageManager.FEATURE_CAMERA)</a></code>. If a camera is not available, you should then disable your camera features.
sub_title3-2-2-2 = Record a Video with a Camera App
p3-2-2-2-1 = The Android way of delegating actions to other applications is to invoke an <code><a href="http://developer.android.com//reference/android/content/Intent.html">Intent</a></code> that describes what you want done. This process involves three pieces: The <code><a href="http://developer.android.com//reference/android/content/Intent.html">Intent</a></code> itself, a call to start the external <code><a href="http://developer.android.com//reference/android/app/Activity.html">Activity</a></code>, and some code to handle the video when focus returns to your activity.
p3-2-2-2-2 = Here's a function that invokes an intent to capture video.
#pre3-2-2-2-1
p3-2-2-2-3 = Notice that the <code><a href="http://developer.android.com//reference/android/app/Activity.html#startActivityForResult(android.content.Intent, int)">startActivityForResult()</a></code> method is protected by a condition that calls <code><a href="http://developer.android.com//reference/android/content/Intent.html#resolveActivity(android.content.pm.PackageManager)">resolveActivity()</a></code>, which returns the first activity component that can handle the intent. Performing this check is important because if you call <code><a href="http://developer.android.com//reference/android/app/Activity.html#startActivityForResult(android.content.Intent, int)">startActivityForResult()</a></code> using an intent that no app can handle, your app will crash. So as long as the result is not null, it's safe to use the intent.
sub_title3-2-2-3 = View the Video
p3-2-2-3-1 = The Android Camera application returns the video in the <code><a href="http://developer.android.com//reference/android/content/Intent.html">Intent</a></code> delivered to <code><a href="http://developer.android.com//reference/android/app/Activity.html#onActivityResult(int, int, android.content.Intent)">onActivityResult()</a></code> as a <code><a href="http://developer.android.com//reference/android/net/Uri.html">Uri</a></code> pointing to the video location in storage. The following code retrieves this video and displays it in a <code><a href="http://developer.android.com//reference/android/widget/VideoView.html">VideoView</a></code>.
#pre3-2-2-3-1
title3-2-3 = Controlling the Camera
p3-2-3-1 = In this lesson, we discuss how to control the camera hardware directly using the framework APIs.
p3-2-3-2 = Directly controlling a device camera requires a lot more code than requesting pictures or videos from existing camera applications. However, if you want to build a specialized camera application or something fully integrated in your app UI, this lesson shows you how.
sub_title3-2-3-1 = Open the Camera Object
p3-2-3-1-1 = Getting an instance of the <code><a href="http://developer.android.com//reference/android/hardware/Camera.html">Camera</a></code> object is the first step in the process of directly controlling the camera. As Android's own Camera application does, the recommended way to access the camera is to open <code><a href="http://developer.android.com//reference/android/hardware/Camera.html">Camera</a></code> on a separate thread that's launched from <code><a href="http://developer.android.com//reference/android/app/Activity.html#onCreate(android.os.Bundle)">onCreate()</a></code>. This approach is a good idea since it can take a while and might bog down the UI thread. In a more basic implementation, opening the camera can be deferred to the <code><a href="http://developer.android.com//reference/android/app/Activity.html#onResume()">onResume()</a></code> method to facilitate code reuse and keep the flow of control simple.
p3-2-3-1-2 = Calling <code><a href="http://developer.android.com//reference/android/hardware/Camera.html#open()">Camera.open()</a></code> throws an exception if the camera is already in use by another application, so we wrap it in a <code>try</code> block.
#pre3-2-3-1-1
p3-2-3-1-3 = Since API level 9, the camera framework supports multiple cameras. If you use the legacy API and call <code><a href="http://developer.android.com//reference/android/hardware/Camera.html#open()">open()</a></code> without an argument, you get the first rear-facing camera.
sub_title3-2-3-2 = Create the Camera Preview
p3-2-3-2-1 = Taking a picture usually requires that your users see a preview of their subject before clicking the shutter. To do so, you can use a <code><a href="http://developer.android.com//reference/android/view/SurfaceView.html">SurfaceView</a></code> to draw previews of what the camera sensor is picking up.
lead3-2-3-2-1 = Preview Class
p3-2-3-2-2 = To get started with displaying a preview, you need preview class. The preview requires an implementation of the <code>android.view.SurfaceHolder.Callback</code> interface, which is used to pass image data from the camera hardware to the application.
#pre3-2-3-2-1
p3-2-3-2-3 = The preview class must be passed to the <code><a href="http://developer.android.com//reference/android/hardware/Camera.html">Camera</a></code> object before the live image preview can be started, as shown in the next section.
lead3-2-3-2-2 = Set and Start the Preview
p3-2-3-2-4 = A camera instance and its related preview must be created in a specific order, with the camera object being first. In the snippet below, the process of initializing the camera is encapsulated so that <code><a href="http://developer.android.com//reference/android/hardware/Camera.html#startPreview()">Camera.startPreview()</a></code> is called by the <code>setCamera()</code> method, whenever the user does something to change the camera. The preview must also be restarted in the preview class <code>surfaceChanged()</code> callback method.
#pre3-2-3-2-2
sub_title3-2-3-3 = Modify Camera Settings
p3-2-3-3-1 = Camera settings change the way that the camera takes pictures, from the zoom level to exposure compensation. This example changes only the preview size; see the source code of the Camera application for many more.
#pre3-2-3-3-1
sub_title3-2-3-4 = Set the Preview Orientation
p3-2-3-4-1 = Most camera applications lock the display into landscape mode because that is the natural orientation of the camera sensor. This setting does not prevent you from taking portrait-mode photos, because the orientation of the device is recorded in the EXIF header. The <code><a href="http://developer.android.com//reference/android/hardware/Camera.html#setDisplayOrientation(int)">setCameraDisplayOrientation()</a></code> method lets you change how the preview is displayed without affecting how the image is recorded. However, in Android prior to API level 14, you must stop your preview before changing the orientation and then restart it.
sub_title3-2-3-5 = Take a Picture
p3-2-3-5-1 = Use the <code><a href="http://developer.android.com//reference/android/hardware/Camera.html#takePicture(android.hardware.Camera.ShutterCallback, android.hardware.Camera.PictureCallback, android.hardware.Camera.PictureCallback)">Camera.takePicture()</a></code> method to take a picture once the preview is started. You can create <code><a href="http://developer.android.com//reference/android/hardware/Camera.PictureCallback.html">Camera.PictureCallback</a></code> and <code><a href="http://developer.android.com//reference/android/hardware/Camera.ShutterCallback.html">Camera.ShutterCallback</a></code> objects and pass them into <code><a href="http://developer.android.com//reference/android/hardware/Camera.html#takePicture(android.hardware.Camera.ShutterCallback, android.hardware.Camera.PictureCallback, android.hardware.Camera.PictureCallback)">Camera.takePicture()</a></code>.
p3-2-3-5-2 = If you want to grab images continously, you can create a <code><a href="http://developer.android.com//reference/android/hardware/Camera.PreviewCallback.html">Camera.PreviewCallback</a></code> that implements <code><a href="http://developer.android.com//reference/android/hardware/Camera.PreviewCallback.html#onPreviewFrame(byte[], android.hardware.Camera)">onPreviewFrame()</a></code>. For something in between, you can capture only selected preview frames, or set up a delayed action to call <code><a href="http://developer.android.com//reference/android/hardware/Camera.html#takePicture(android.hardware.Camera.ShutterCallback, android.hardware.Camera.PictureCallback, android.hardware.Camera.PictureCallback)">takePicture()</a></code>.
sub_title3-2-3-6 = Restart the Preview
p3-2-3-6-1 = After a picture is taken, you must restart the preview before the user can take another picture. In this example, the restart is done by overloading the shutter button.
#pre3-2-3-6-1
sub_title3-2-3-7 = Stop the Preview and Release the Camera
p3-2-3-7-1 = Once your application is done using the camera, it's time to clean up. In particular, you must release the <code><a href="http://developer.android.com//reference/android/hardware/Camera.html">Camera</a></code> object, or you risk crashing other applications, including new instances of your own application.
p3-2-3-7-2 = When should you stop the preview and release the camera? Well, having your preview surface destroyed is a pretty good hint that it’s time to stop the preview and release the camera, as shown in these methods from the <code>Preview</code> class.
#pre3-2-3-7-1
p3-2-3-7-3 = Earlier in the lesson, this procedure was also part of the <code>setCamera()</code> method, so initializing a camera always begins with stopping the preview.
title3-3 = Printing Content
p3-3-1 = Android users frequently view content solely on their devices, but there are times when showing someone a screen is not an adequate way to share information. Being able to print information from your Android application gives users a way to see a larger version of the content from your app or share it with another person who is not using your application. Printing also allows them to create a snapshot of information that does not depend on having a device, sufficient battery power, or a wireless network connection.
p3-3-2 = In Android 4.4 (API level 19) and higher, the framework provides services for printing images and documents directly from Android applications. This training describes how to enable printing in your application, including printing images, HTML pages and creating custom documents for printing.
sub_title3-3-1 = Lessons
dt3-3-1-1 = <strong><a href="http://developer.android.com/photos.html">Printing a Photo</a></strong>
dd3-3-1-1 = This lesson shows you how to print an image.
dt3-3-1-2 = <strong><a href="http://developer.android.com/html-docs.html">Printing an HTML Document</a></strong>
dd3-3-1-2 = This lesson shows you how to print an HTML document.
dt3-3-1-3 = <strong><a href="http://developer.android.com/custom-docs.html">Printing a Custom Document</a></strong>
dd3-3-1-3 = This lesson shows you how you connect to the Android print manager, create a print adapter and build content for printing.
title3-3-1 = Printing Photos
p3-3-1-1 = Taking and sharing photos is one of the most popular uses for mobile devices. If your application takes photos, displays them, or allows users to share images, you should consider enabling printing of those images in your application. The <a href="http://developer.android.com//tools/support-library/index.html">Android Support Library</a> provides a convenient function for enabling image printing using a minimal amount of code and simple set of print layout options.
p3-3-1-2 = This lesson shows you how to print an image using the v4 support library <code><a href="http://developer.android.com//reference/android/support/v4/print/PrintHelper.html">PrintHelper</a></code> class.
sub_title3-3-1-1 = Print an Image
p3-3-1-1-1 = The Android Support Library <code><a href="http://developer.android.com//reference/android/support/v4/print/PrintHelper.html">PrintHelper</a></code> class provides a simple way to print of images. The class has a single layout option, <code><a href="http://developer.android.com//reference/android/support/v4/print/PrintHelper.html#setScaleMode(int)">setScaleMode()</a></code>, which allows you to print with one of two options:
#ul
li3-3-1-1-1 = <code><a href="http://developer.android.com//reference/android/support/v4/print/PrintHelper.html#SCALE_MODE_FIT">SCALE_MODE_FIT</a></code> - This option sizes the image so that the whole image is shown within the printable area of the page.
li3-3-1-1-2 = <code><a href="http://developer.android.com//reference/android/support/v4/print/PrintHelper.html#SCALE_MODE_FILL">SCALE_MODE_FILL</a></code> - This option scales the image so that it fills the entire printable area of the page. Choosing this setting means that some portion of the top and bottom, or left and right edges of the image is not printed. This option is the default value if you do not set a scale mode.
p3-3-1-1-2 = Both scaling options for <code><a href="http://developer.android.com//reference/android/support/v4/print/PrintHelper.html#setScaleMode(int)">setScaleMode()</a></code> keep the existing aspect ratio of the image intact. The following code example shows how to create an instance of the <code><a href="http://developer.android.com//reference/android/support/v4/print/PrintHelper.html">PrintHelper</a></code> class, set the scaling option, and start the printing process:
#pre3-3-1-1-1
p3-3-1-1-3 = This method can be called as the action for a menu item. Note that menu items for actions that are not always supported (such as printing) should be placed in the overflow menu. For more information, see the <a href="http://developer.android.com//design/patterns/actionbar.html">Action Bar</a> design guide.
p3-3-1-1-4 = After the <code><a href="http://developer.android.com//reference/android/support/v4/print/PrintHelper.html#printBitmap(java.lang.String, android.graphics.Bitmap)">printBitmap()</a></code> method is called, no further action from your application is required. The Android print user interface appears, allowing the user to select a printer and printing options. The user can then print the image or cancel the action. If the user chooses to print the image, a print job is created and a printing notification appears in the system bar.
p3-3-1-1-5 = If you want to include additional content in your printouts beyond just an image, you must construct a print document. For information on creating documents for printing, see the <a href="http://developer.android.com/html-docs.html">Printing an HTML Document</a> or <a href="http://developer.android.com/custom-docs.html">Printing a Custom Document</a> lessons.
title3-3-2 = Printing HTML Documents
p3-3-2-1 = Printing out content beyond a simple photo on Android requires composing text and graphics in a print document. The Android framework provides a way to use HTML to compose a document and print it with a minimum of code.
p3-3-2-2 = In Android 4.4 (API level 19), the <code><a href="http://developer.android.com//reference/android/webkit/WebView.html">WebView</a></code> class has been updated to enable printing HTML content. The class allows you to load a local HTML resource or download a page from the web, create a print job and hand it off to Android's print services.
p3-3-2-3 = This lesson shows you how to quickly build an HTML document containing text and graphics and use <code><a href="http://developer.android.com//reference/android/webkit/WebView.html">WebView</a></code> to print it.
sub_title3-3-2-1 = Load an HTML Document
p3-3-2-1-1 = Printing an HTML document with <code><a href="http://developer.android.com//reference/android/webkit/WebView.html">WebView</a></code> involves loading an HTML resource or building an HTML document as a string. This section describes how to build an HTML string and load it into a <code><a href="http://developer.android.com//reference/android/webkit/WebView.html">WebView</a></code> for printing.
p3-3-2-1-2 = This view object is typically used as part of an activity layout. However, if your application is not using a <code><a href="http://developer.android.com//reference/android/webkit/WebView.html">WebView</a></code>, you can create an instance of the class specifically for printing purposes. The main steps for creating this custom print view are:
#ol
li3-3-2-1-1 = Create a <code><a href="http://developer.android.com//reference/android/webkit/WebViewClient.html">WebViewClient</a></code> that starts a print job after the HTML resource is loaded.
li3-3-2-1-2 = Load the HTML resource into the <code><a href="http://developer.android.com//reference/android/webkit/WebView.html">WebView</a></code> object.
p3-3-2-1-3 = The following code sample demonstrates how to create a simple <code><a href="http://developer.android.com//reference/android/webkit/WebViewClient.html">WebViewClient</a></code> and load an HTML document created on the fly:
#pre3-3-2-1-1
nc3-3-2-1-1 = <strong>Note:</strong> Make sure your call for generating a print job happens in the <code><a href="http://developer.android.com//reference/android/webkit/WebViewClient.html#onPageFinished(android.webkit.WebView, java.lang.String)">onPageFinished()</a></code> method of the <code><a href="http://developer.android.com//reference/android/webkit/WebViewClient.html">WebViewClient</a></code> you created in the previous section. If you don't wait until page loading is finished, the print output may be incomplete or blank, or may fail completely.
nc3-3-2-1-2 = <strong>Note:</strong> The example code above holds an instance of the <code><a href="http://developer.android.com//reference/android/webkit/WebView.html">WebView</a></code> object so that is it not garbage collected before the print job is created. Make sure you do the same in your own implementation, otherwise the print process may fail.
p3-3-2-1-4 = If you want to include graphics in the page, place the graphic files in the <code>assets/</code> directory of your project and specify a base URL in the first parameter of the <code><a href="http://developer.android.com//reference/android/webkit/WebView.html#loadDataWithBaseURL(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)">loadDataWithBaseURL()</a></code> method, as shown in the following code example:
#pre3-3-2-1-2
p3-3-2-1-5 = You can also load a web page for printing by replacing the <code><a href="http://developer.android.com//reference/android/webkit/WebView.html#loadDataWithBaseURL(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)">loadDataWithBaseURL()</a></code> method with <code><a href="http://developer.android.com//reference/android/webkit/WebView.html#loadUrl(java.lang.String)">loadUrl()</a></code> as shown below.
#pre3-3-2-1-3
p3-3-2-1-6 = When using <code><a href="http://developer.android.com//reference/android/webkit/WebView.html">WebView</a></code> for creating print documents, you should be aware of the following limitations:
#ul
li3-3-2-1-3 = You cannot add headers or footers, including page numbers, to the document.
li3-3-2-1-4 = The printing options for the HTML document do not include the ability to print page ranges, for example: Printing page 2 to 4 of a 10 page HTML document is not supported.
li3-3-2-1-5 = An instance of <code><a href="http://developer.android.com//reference/android/webkit/WebView.html">WebView</a></code> can only process one print job at a time.
li3-3-2-1-6 = An HTML document containing CSS print attributes, such as landscape properties, is not supported.
li3-3-2-1-7 = You cannot use JavaScript in a HTML document to trigger printing.
nc3-3-2-1-3 = <strong>Note:</strong> The content of a <code><a href="http://developer.android.com//reference/android/webkit/WebView.html">WebView</a></code> object that is included in a layout can also be printed once it has loaded a document.
p3-3-2-1-7 = If you want to create a more customized print output and have complete control of the content draw on the printed page, jump to the next lesson: <a href="http://developer.android.com/custom-docs.html">Printing a Custom Document</a> lesson.
sub_title3-3-2-2 = Create a Print Job
p3-3-2-2-1 = After creating a <code><a href="http://developer.android.com//reference/android/webkit/WebView.html">WebView</a></code> and loading your HTML content, your application is almost done with its part of the printing process. The next steps are accessing the <code><a href="http://developer.android.com//reference/android/print/PrintManager.html">PrintManager</a></code>, creating a print adapter, and finally, creating a print job. The following example illustrates how to perform these steps:
#pre3-3-2-2-1
p3-3-2-2-2 = This example saves an instance of the <code><a href="http://developer.android.com//reference/android/print/PrintJob.html">PrintJob</a></code> object for use by the application, which is not required. Your application may use this object to track the progress of the print job as it's being processed. This approach is useful when you want to monitor the status of the print job in you application for completion, failure, or user cancellation. Creating an in-app notification is not required, because the print framework automatically creates a system notification for the print job.
title3-3-3 = Printing Custom Documents
p3-3-3-1 = For some applications, such as drawing apps, page layout apps and other apps that focus on graphic output, creating beautiful printed pages is a key feature. In this case, it is not enough to print an image or an HTML document. The print output for these types of applications requires precise control of everything that goes into a page, including fonts, text flow, page breaks, headers, footers, and graphic elements.
p3-3-3-2 = Creating print output that is completely customized for your application requires more programming investment than the previously discussed approaches. You must build components that communicate with the print framework, adjust to printer settings, draw page elements and manage printing on multiple pages.
p3-3-3-3 = This lesson shows you how you connect with the print manager, create a print adapter and build content for printing.
sub_title3-3-3-1 = Connect to the Print Manager
p3-3-3-1-1 = When your application manages the printing process directly, the first step after receiving a print request from your user is to connect to the Android print framework and obtain an instance of the <code><a href="http://developer.android.com//reference/android/print/PrintManager.html">PrintManager</a></code> class. This class allows you to initialize a print job and begin the printing lifecycle. The following code example shows how to get the print manager and start the printing process.
#pre3-3-3-1-1
p3-3-3-1-2 = The example code above demonstrates how to name a print job and set an instance of the <code><a href="http://developer.android.com//reference/android/print/PrintDocumentAdapter.html">PrintDocumentAdapter</a></code> class which handles the steps of the printing lifecycle. The implementation of the print adapter class is discussed in the next section.
nc3-3-3-1-1 = <strong>Note:</strong> The last parameter in the <code><a href="http://developer.android.com//reference/android/print/PrintManager.html#print(java.lang.String, android.print.PrintDocumentAdapter, android.print.PrintAttributes)">print()</a></code> method takes a <code><a href="http://developer.android.com//reference/android/print/PrintAttributes.html">PrintAttributes</a></code> object. You can use this parameter to provide hints to the printing framework and pre-set options based on the previous printing cycle, thereby improving the user experience. You may also use this parameter to set options that are more appropriate to the content being printed, such as setting the orientation to landscape when printing a photo that is in that orientation.
sub_title3-3-3-2 = Create a Print Adapter
p3-3-3-2-1 = A print adapter interacts with the Android print framework and handles the steps of the printing process. This process requires users to select printers and print options before creating a document for printing. These selections can influence the final output as the user chooses printers with different output capabilities, different page sizes, or different page orientations. As these selections are made, the print framework asks your adapter to lay out and generate a print document, in preparation for final output. Once a user taps the print button, the framework takes the final print document and passes it to a print provider for output. During the printing process, users can choose to cancel the print action, so your print adapter must also listen for and react to a cancellation requests.
p3-3-3-2-2 = The <code><a href="http://developer.android.com//reference/android/print/PrintDocumentAdapter.html">PrintDocumentAdapter</a></code> abstract class is designed to handle the printing lifecycle, which has four main callback methods. You must implement these methods in your print adapter in order to interact properly with the print framework:
#ul
li3-3-3-2-1 = <code><a href="http://developer.android.com//reference/android/print/PrintDocumentAdapter.html#onStart()">onStart()</a></code> - Called once at the beginning of the print process. If your application has any one-time preparation tasks to perform, such as getting a snapshot of the data to be printed, execute them here. Implementing this method in your adapter is not required.
li3-3-3-2-2 = <code><a href="http://developer.android.com//reference/android/print/PrintDocumentAdapter.html#onLayout(android.print.PrintAttributes, android.print.PrintAttributes, android.os.CancellationSignal, android.print.PrintDocumentAdapter.LayoutResultCallback, android.os.Bundle)">onLayout()</a></code> - Called each time a user changes a print setting which impacts the output, such as a different page size, or page orientation, giving your application an opportunity to compute the layout of the pages to be printed. At the minimum, this method must return how many pages are expected in the printed document.
li3-3-3-2-3 = <code><a href="http://developer.android.com//reference/android/print/PrintDocumentAdapter.html#onWrite(android.print.PageRange[], android.os.ParcelFileDescriptor, android.os.CancellationSignal, android.print.PrintDocumentAdapter.WriteResultCallback)">onWrite()</a></code> - Called to render printed pages into a file to be printed. This method may be called one or more times after each <code><a href="http://developer.android.com//reference/android/print/PrintDocumentAdapter.html#onLayout(android.print.PrintAttributes, android.print.PrintAttributes, android.os.CancellationSignal, android.print.PrintDocumentAdapter.LayoutResultCallback, android.os.Bundle)">onLayout()</a></code> call.
li3-3-3-2-4 = <code><a href="http://developer.android.com//reference/android/print/PrintDocumentAdapter.html#onFinish()">onFinish()</a></code> - Called once at the end of the print process. If your application has any one-time tear-down tasks to perform, execute them here. Implementing this method in your adapter is not required.
p3-3-3-2-3 = The following sections describe how to implement the layout and write methods, which are critical to the functioning of a print adapter.
nc3-3-3-2-1 = <strong>Note:</strong> These adapter methods are called on the main thread of your application. If you expect the execution of these methods in your implementation to take a significant amount of time, implement them to execute within a separate thread. For example, you can encapsulate the layout or print document writing work in separate <code><a href="http://developer.android.com//reference/android/os/AsyncTask.html">AsyncTask</a></code> objects.
lead3-3-3-2-1 = Compute print document info
p3-3-3-2-4 = Within an implementation of the <code><a href="http://developer.android.com//reference/android/print/PrintDocumentAdapter.html">PrintDocumentAdapter</a></code> class, your application must be able to specify the type of document it is creating and calculate the total number of pages for print job, given information about the printed page size. The implementation of the <code><a href="http://developer.android.com//reference/android/print/PrintDocumentAdapter.html#onLayout(android.print.PrintAttributes, android.print.PrintAttributes, android.os.CancellationSignal, android.print.PrintDocumentAdapter.LayoutResultCallback, android.os.Bundle)">onLayout()</a></code> method in the adapter makes these calculations and provides information about the expected output of the print job in a <code><a href="http://developer.android.com//reference/android/print/PrintDocumentInfo.html">PrintDocumentInfo</a></code> class, including the number of pages and content type. The following code example shows a basic implementation of the <code><a href="http://developer.android.com//reference/android/print/PrintDocumentAdapter.html#onLayout(android.print.PrintAttributes, android.print.PrintAttributes, android.os.CancellationSignal, android.print.PrintDocumentAdapter.LayoutResultCallback, android.os.Bundle)">onLayout()</a></code> method for a <code><a href="http://developer.android.com//reference/android/print/PrintDocumentAdapter.html">PrintDocumentAdapter</a></code>:
#pre3-3-3-2-1
p3-3-3-2-5 = The execution of <code><a href="http://developer.android.com//reference/android/print/PrintDocumentAdapter.html#onLayout(android.print.PrintAttributes, android.print.PrintAttributes, android.os.CancellationSignal, android.print.PrintDocumentAdapter.LayoutResultCallback, android.os.Bundle)">onLayout()</a></code> method can have three outcomes: completion, cancellation, or failure in the case where calculation of the layout cannot be completed. You must indicate one of these results by calling the appropriate method of the <code><a href="http://developer.android.com//reference/android/print/PrintDocumentAdapter.LayoutResultCallback.html">PrintDocumentAdapter.LayoutResultCallback</a></code> object.
nc3-3-3-2-2 = <strong>Note:</strong> The boolean parameter of the <code><a href="http://developer.android.com//reference/android/print/PrintDocumentAdapter.LayoutResultCallback.html#onLayoutFinished(android.print.PrintDocumentInfo, boolean)">onLayoutFinished()</a></code> method indicates whether or not the layout content has actually changed since the last request. Setting this parameter properly allows the print framework to avoid unnecessarily calling the <code><a href="http://developer.android.com//reference/android/print/PrintDocumentAdapter.html#onWrite(android.print.PageRange[], android.os.ParcelFileDescriptor, android.os.CancellationSignal, android.print.PrintDocumentAdapter.WriteResultCallback)">onWrite()</a></code> method, essentially caching the previously written print document and improving performance.
p3-3-3-2-6 = The main work of <code><a href="http://developer.android.com//reference/android/print/PrintDocumentAdapter.html#onLayout(android.print.PrintAttributes, android.print.PrintAttributes, android.os.CancellationSignal, android.print.PrintDocumentAdapter.LayoutResultCallback, android.os.Bundle)">onLayout()</a></code> is calculating the number of pages that are expected as output given the attributes of the printer. How you calculate this number is highly dependent on how your application lays out pages for printing. The following code example shows an implementation where the number of pages is determined by the print orientation:
#pre3-3-3-2-2
lead3-3-3-2-2 = Write a print document file
p3-3-3-2-7 = When it is time to write print output to a file, the Android print framework calls the <code><a href="http://developer.android.com//reference/android/print/PrintDocumentAdapter.html#onWrite(android.print.PageRange[], android.os.ParcelFileDescriptor, android.os.CancellationSignal, android.print.PrintDocumentAdapter.WriteResultCallback)">onWrite()</a></code> method of your application's <code><a href="http://developer.android.com//reference/android/print/PrintDocumentAdapter.html">PrintDocumentAdapter</a></code> class. The method's parameters specify which pages should be written and the output file to be used. Your implementation of this method must then render each requested page of content to a multi-page PDF document file. When this process is complete, you call the <code><a href="http://developer.android.com//reference/android/print/PrintDocumentAdapter.WriteResultCallback.html#onWriteFinished(android.print.PageRange[])">onWriteFinished()</a></code> method of the callback object.
nc3-3-3-2-3 = <strong>Note:</strong> The Android print framework may call the <code><a href="http://developer.android.com//reference/android/print/PrintDocumentAdapter.html#onWrite(android.print.PageRange[], android.os.ParcelFileDescriptor, android.os.CancellationSignal, android.print.PrintDocumentAdapter.WriteResultCallback)">onWrite()</a></code> method one or more times for every call to <code><a href="http://developer.android.com//reference/android/print/PrintDocumentAdapter.html#onLayout(android.print.PrintAttributes, android.print.PrintAttributes, android.os.CancellationSignal, android.print.PrintDocumentAdapter.LayoutResultCallback, android.os.Bundle)">onLayout()</a></code>. For this reason, it is important to set the boolean parameter of <code><a href="http://developer.android.com//reference/android/print/PrintDocumentAdapter.LayoutResultCallback.html#onLayoutFinished(android.print.PrintDocumentInfo, boolean)">onLayoutFinished()</a></code> method to <code>false</code> when the print content layout has not changed, to avoid unnecessary re-writes of the print document.
nc3-3-3-2-4 = <strong>Note:</strong> The boolean parameter of the <code><a href="http://developer.android.com//reference/android/print/PrintDocumentAdapter.LayoutResultCallback.html#onLayoutFinished(android.print.PrintDocumentInfo, boolean)">onLayoutFinished()</a></code> method indicates whether or not the layout content has actually changed since the last request. Setting this parameter properly allows the print framework to avoid unnecessarily calling the <code><a href="http://developer.android.com//reference/android/print/PrintDocumentAdapter.html#onLayout(android.print.PrintAttributes, android.print.PrintAttributes, android.os.CancellationSignal, android.print.PrintDocumentAdapter.LayoutResultCallback, android.os.Bundle)">onLayout()</a></code> method, essentially caching the previously written print document and improving performance.
p3-3-3-2-8 = The following sample demonstrates the basic mechanics of this process using the <code><a href="http://developer.android.com//reference/android/print/pdf/PrintedPdfDocument.html">PrintedPdfDocument</a></code> class to create a PDF file:
#pre3-3-3-2-3
p3-3-3-2-9 = This sample delegates rendering of PDF page content to <code>drawPage()</code> method, which is discussed in the next section.
p3-3-3-2-10 = As with layout, execution of <code><a href="http://developer.android.com//reference/android/print/PrintDocumentAdapter.html#onWrite(android.print.PageRange[], android.os.ParcelFileDescriptor, android.os.CancellationSignal, android.print.PrintDocumentAdapter.WriteResultCallback)">onWrite()</a></code> method can have three outcomes: completion, cancellation, or failure in the case where the the content cannot be written. You must indicate one of these results by calling the appropriate method of the <code><a href="http://developer.android.com//reference/android/print/PrintDocumentAdapter.WriteResultCallback.html">PrintDocumentAdapter.WriteResultCallback</a></code> object.
nc3-3-3-2-5 = <strong>Note:</strong> Rendering a document for printing can be a resource-intensive operation. In order to avoid blocking the main user interface thread of your application, you should consider performing the page rendering and writing operations on a separate thread, for example in an <code><a href="http://developer.android.com//reference/android/os/AsyncTask.html">AsyncTask</a></code>. For more information about working with execution threads like asynchronous tasks, see <a href="http://developer.android.com//guide/components/processes-and-threads.html">Processes and Threads</a>.
sub_title3-3-3-3 = Drawing PDF Page Content
p3-3-3-3-1 = When your application prints, your application must generate a PDF document and pass it to the Android print framework for printing. You can use any PDF generation library for this purpose. This lesson shows how to use the <code><a href="http://developer.android.com//reference/android/print/pdf/PrintedPdfDocument.html">PrintedPdfDocument</a></code> class to generate PDF pages from your content.
p3-3-3-3-2 = The <code><a href="http://developer.android.com//reference/android/print/pdf/PrintedPdfDocument.html">PrintedPdfDocument</a></code> class uses a <code><a href="http://developer.android.com//reference/android/graphics/Canvas.html">Canvas</a></code> object to draw elements on an PDF page, similar to drawing on an activity layout. You can draw elements on the printed page using the <code><a href="http://developer.android.com//reference/android/graphics/Canvas.html">Canvas</a></code> draw methods. The following example code demonstrates how to draw some simple elements on a PDF document page using these methods:
#pre3-3-3-3-1
p3-3-3-3-3 = When using <code><a href="http://developer.android.com//reference/android/graphics/Canvas.html">Canvas</a></code> to draw on a PDF page, elements are specified in points, which is 1/72 of an inch. Make sure you use this unit of measure for specifying the size of elements on the page. For positioning of drawn elements, the coordinate system starts at 0,0 for the top left corner of the page.
tc3-3-3-3-1 = <strong>Tip:</strong> While the <code><a href="http://developer.android.com//reference/android/graphics/Canvas.html">Canvas</a></code> object allows you to place print elements on the edge of a PDF document, many printers are not able to print to the edge of a physical piece of paper. Make sure that you account for the unprintable edges of the page when you build a print document with this class.
