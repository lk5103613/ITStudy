title3 = 创建多媒体应用
p3-1 = 这一章节将会教你如何创建用户期望的多媒体应用。
title3-1 = 音频管理
p3-1-1 = 如果你的应用播放音乐，让用户能够自如的控制音乐的播放是十分重要的。为了保证出色的用户体验，你同样需要保证不能让多个应用同时播放音乐。
p3-1-2 = 略。
sub_title3-1-1 = 课程
dt3-1-1-1 = <b><a href="#c3-1-1">控制你的应用的音量和回放</a></b>
dd3-1-1-1 = 学习如何控制音量以及处理播放，通知，暂停，下一首和回放按键。
dt3-1-1-2 = <b><a href="#c3-1-2">管理音频焦点</a></b>
dd3-1-1-2 = 多媒体应用需要特别注意音乐播放时的交互。为了避免多个音乐应用同时播放，安卓使用音频焦点来解决这一问题。这一节将学习如何获取音频焦点。
dt3-1-1-3 = <b><a href="#c3-1-3">关于音频输出硬件</a></b>
dd3-1-1-3 = 会有许多情况会播放音乐。这一节将学习如何判断音乐播放的情况并且处理在播放过程中摘除耳机改如何处理。
title3-1-1 = 控制你的应用的音量和回放
p3-1-1-1 = 可预测的行为是一个好的用户体验的基础。如果你的应用可以播放音频，那么让用户可以通过软硬件调控音量是十分重要的一点。
p3-1-1-2 = 同样，在你的应用中，播放、停止、暂停等功能也必须能够通过软硬件的方式控制。
sub_title3-1-1-1 = 确定使用哪一个音频流
p3-1-1-1-1 = 让你的应用具有良好的可预测性的第一步就是选择你的音乐是播放在哪个音频流上的。
p3-1-1-1-2 = 安卓是独立的处理不同的音频流的，比如播放音乐，闹铃，通知，来电，系统音量，来电音量等。这么做是为了方便用户管理不同的音频流。
p3-1-1-1-3 = 上面大多数音频流是受限制的，除非你想替换系统的闹钟，不然你的应用肯定是使用<code><a href="http://developer.android.com//reference/android/media/AudioManager.html#STREAM_MUSIC">STREAM_MUSIC</a></code>这一音频流。
sub_title3-1-1-2 = 使用音量按键控制你的应用的音量
p3-1-1-2-1 = 默认情况下，按下音量键时改变的是当前正在播放的音频流的音量。如果你的应用当前没有播放音乐，那么按下音量键将会调整来电音量。
p3-1-1-2-2 = 如果你正在玩游戏或者听音乐，大部分情况下当你按下音量键时调整的是游戏或者音乐的音量，即使它们当前并没有播放音乐。
p3-1-1-2-3 = 你或许很想尝试监听音量按键事件来改变你自己应用的音量。抑制住你那种冲动。安卓提供了一个方便的<code><a href="http://developer.android.com//reference/android/app/Activity.html#setVolumeControlStream(int)">setVolumeControlStream()</a></code>方法，这个方法将会告诉音量键去控制你想要的音频流。
p3-1-1-2-4 = 指定了你应用将要使用的音频流，下一步你需要将它作为音量流的目标。你应该在应用生命周期的早期做这步操作（比如<code><a href="http://developer.android.com//reference/android/app/Activity.html">Activity</a></code>或者<code><a href="http://developer.android.com//reference/android/app/Fragment.html">Fragment</a></code>的<code>onCreate()</code>方法中），这样可以保证只要你的应用可见音量就可控。
#pre3-1-1-2-1
p3-1-1-2-5 = 上面的代码设置后，无论你的activity或者fragment是否可见，按下音量键将会调整你指定音频流的音量（这里是“music”）。
sub_title3-1-1-3 = 使用硬件的播放键控制你应用音频的播放
p3-1-1-3-1 = 媒体播放键比如播放，暂停，停止，跳过在一些耳机上会有实体按键。当用户按下其中一个按键时，系统会发送一个<code><a href="http://developer.android.com//reference/android/content/Intent.html#ACTION_MEDIA_BUTTON">ACTION_MEDIA_BUTTON</a></code>行为的广播。
p3-1-1-3-2 = 为了处理按键的点击，你需要在你的manifest中注册一个<code><a href="http://developer.android.com//reference/android/content/BroadcastReceiver.html">BroadcastReceiver</a></code>来监听上面所发出的广播。
#pre3-1-1-3-1
p3-1-1-3-3 = 为了获得当前点击的是哪个按钮。在<code><a href="http://developer.android.com//reference/android/content/Intent.html">Intent</a></code>中的<code><a href="http://developer.android.com//reference/android/content/Intent.html#EXTRA_KEY_EVENT">EXTRA_KEY_EVENT</a></code>键包含了这个信息。而<code><a href="http://developer.android.com//reference/android/view/KeyEvent.html">KeyEvent</a></code>类中包含了可能的各种音频按键常量，比如<code><a href="http://developer.android.com//reference/android/view/KeyEvent.html#KEYCODE_MEDIA_PLAY_PAUSE">KEYCODE_MEDIA_PLAY_PAUSE</a></code>和<code><a href="http://developer.android.com//reference/android/view/KeyEvent.html#KEYCODE_MEDIA_NEXT">KEYCODE_MEDIA_NEXT</a></code>。
p3-1-1-3-4 = 接下来的代码展示了如何判定是哪个按键，并做出相应的操作。
#pre3-1-1-3-2
p3-1-1-3-5 = 因为多个应用可能希望监听媒体按键的点击，所以你必须通过变成的方式控制你的应用何时需要监听媒体按键的点击事件。
p3-1-1-3-6 = 当你注册或注销媒体按钮的监听时，可以使用这段代码，这里使用了<code><a href="http://developer.android.com//reference/android/media/AudioManager.html">AudioManager</a></code>来进行的操作。
#pre3-1-1-3-3
p3-1-1-3-7 = 特别需要注意的是，当应用未激活或不可见时应该注销它们大部分的广播接收者（比如在<code><a href="http://developer.android.com//reference/android/app/Activity.html#onStop()">onStop()</a></code>回调时）。然而，这并不是那么简单的事，实际上，当应用不可见时相应音频的按键也是十分重要的事情。
p3-1-1-3-8 = 一个更好的做法是在你的应用获取到音频焦点时注册，在失去焦点时注销。具体的细节将会在下一节展示。
title3-1-2 = 管理音频焦点
p3-1-2-1 = 当有多个应用识图播放音频时，如何处理就变得至关重要。为了避免所有引用同时播放音乐，安卓使用了音频焦点，即只有在一个应用获得音频焦点后才能播放音乐。
p3-1-2-2 = 在你的应用播放音乐之前，它应该先请求，并获取音频焦点。同样的，它应该知道怎样监听音频焦点丢失事件并做出恰当的处理。
sub_title3-1-2-1 = 请求音频焦点
p3-1-2-1-1 = 在你的应用开始播放任何音频之前，它应该获得它要使用的音频流的音频焦点。通过调用<code><a href="http://developer.android.com//reference/android/media/AudioManager.html#requestAudioFocus(android.media.AudioManager.OnAudioFocusChangeListener, int, int)">requestAudioFocus()</a></code>方法可以完成这一操作，如果你获取焦点成功，这个方法会返回<code><a href="http://developer.android.com//reference/android/media/AudioManager.html#AUDIOFOCUS_REQUEST_GRANTED">AUDIOFOCUS_REQUEST_GRANTED</a></code>。
p3-1-2-1-2 = 你必须指明你的音频流，以及你想获得的焦点是瞬时的还是永久的。当你只向播放一个很短的音乐时请求瞬时音频焦点（比如播放导航语音时）。当你不知道将播放多久时使用永久音频焦点（比如当播放音乐时）。
p3-1-2-1-3 = 下面的片段展示如何请求music音频流的瞬时音频焦点。你应该在开始播放之前立即请求焦点，比如当用户按下播放键或者游戏下一关游戏的背景音乐开始之前。
#pre3-1-2-1-1
p3-1-2-1-4 = 一旦你停止播放音乐，确保调用<code><a href="http://developer.android.com//reference/android/media/AudioManager.html#abandonAudioFocus(android.media.AudioManager.OnAudioFocusChangeListener)">abandonAudioFocus()</a></code>方法。这将告诉系统你不再需要音频焦点，并注销<code><a href="http://developer.android.com//reference/android/media/AudioManager.OnAudioFocusChangeListener.html">AudioManager.OnAudioFocusChangeListener</a></code>。如果放弃了音频焦点，那么其他被打断的应用就可以继续播放。
#pre3-1-2-1-2
p3-1-2-1-5 = 当请求瞬时音频焦点时你还有一些额外选项：你是否想要启用"ducking"。一般情况下，一个拥有良好设计的应用，当它失去银屏焦点时立即停止自己的播放。在启用了"ducking"之后，这些应用可以继续播放他们的音乐但是会降低音量，直到重新获得音频焦点为止。
#pre3-1-2-1-3
p3-1-2-1-6 = 当一个应用断断续续的使用音频时，使用"ducking"特别合适，比如音频导航。
p3-1-2-1-7 = 如果其他的应用请求音频焦点，你注册的监听器将会监听到这个事件。
sub_title3-1-2-2 = 处理丢失音频焦点事件
p3-1-2-2-1 = 如果你的应用可以获取焦点，那么当别的应用请求焦点时你的应用也会失去焦点。如何处理丢失焦点要根据丢失焦点的方式不同而不同。
p3-1-2-2-2 = 当有应用请求音频焦点时，<code><a href="http://developer.android.com//reference/android/media/AudioManager.OnAudioFocusChangeListener.html#onAudioFocusChange(int)">onAudioFocusChange()</a></code>回调方法会返回一个参数指示焦点发生了改变。特别的，丢失焦点的方式与上一节讲的获得焦点的方式相对应：瞬时丢失，永久丢失，以及带有"ducking"的瞬时丢失。
p3-1-2-2-3 = 一般来讲，瞬时丢失焦点应该让你的音频停止播放，但保持相同的状态。你应该继续监听焦点的改变，并且在你重新获得焦点之后重新开始播放。
p3-1-2-2-4 = 如果音频丢失为永久丢失，那么有可能别的应用开始播放音乐，而你的应用应该终止运行。从实践角度出发，这意味着停止播放，移除媒体按键的监听，允许其他应用专门监听这些按键，并释放音频焦点。这时，只有在用户点击播放时你才能重新开始播放音乐。p3-1-2-2-5 = In the following code snippet, we pause the playback or our media player object if the audio loss is transient and resume it when we have regained the focus. If the loss is permanent, it unregisters our media button event receiver and stops monitoring audio focus changes.
#pre3-1-2-2-1
p3-1-2-2-6 = 其中一种情况是当短暂的丢失焦点并且允许"ducking"状态，你可以不暂停播放，而是降低音量。
sub_title3-1-2-3 = Duck!
p3-1-2-3-1 = Ducking 是通过降低你应用的音量从而使得其他应用播放的音频能够被听清的这个过程。
p3-1-2-3-2 = 下面的代码片段展示如何在暂时丢失焦点时降低音量，而在重新获得焦点时恢复之前的音量。
#pre3-1-2-3-1
p3-1-2-3-3 = 丢失音频焦点是要处理的最重要的广播，但不是唯一的。系统会广播一系列意图来提示你改变音频行为。下一节将教会你如何监听它们来提高用户体验。
title3-1-3 = 关于音频输出硬件
p3-1-3-1 = 用户想在他们的设备欣赏音乐有许多种选择，比如内置扬声器，无线耳机，或者蓝牙连接的支持A2DP的音频设备。
sub_title3-1-3-1 = 检查使用的哪个硬件
p3-1-3-1-1 = 你的应用的行为是由输出音频的硬件决定的。
p3-1-3-1-2 = 你可以通过<code><a href="http://developer.android.com//reference/android/media/AudioManager.html">AudioManager</a></code>方法查询当前的音频输出设备是设备扬声器，无线耳机还是蓝牙设备。下面的代码展示了这一点：
#pre3-1-3-1-1
sub_title3-1-3-2 = 处理音频输出设备的变更
p3-1-3-2-1 = 当耳机从插口脱落，或者一个蓝牙设备断开连接，音频流会自动连接到内置扬声器。如果你听音乐的声音和我一样大，那将会是一个大惊喜。
p3-1-3-2-2 = 幸运的是当这种事情发生时系统会发送一个<code><a href="http://developer.android.com//reference/android/media/AudioManager.html#ACTION_AUDIO_BECOMING_NOISY">ACTION_AUDIO_BECOMING_NOISY</a></code>广播。当你的应用在播放音频时最好注册一个<code><a href="http://developer.android.com//reference/android/content/BroadcastReceiver.html">广播接收者</a></code>来监听这个广播。如果你的应用正在播放音乐，那么当这种情况发生时，用户希望能够暂停播放，而如果你的应用是一个游戏，用户可能希望降低播放的音量。
#pre3-1-3-2-1
title3-2 = 调用相机
p3-2-1 = 在富媒体流行之前，这个世界是惨淡，毫无新意的。还记得Gopher么？我们记不得了。想要你的应用变成你用户生活的一部分，就要想办法让他们把生活放进去。使用手机相机，你的应用可以将他们周围所看的东西收录进来，制作一个独一无二的阿凡达，找寻角落里的僵尸，或者只是分享他们的体验。
p3-2-2 = 这一节将带你熟悉超级简单的使用照相机应用。在后面的课程中，你将会更加深入的学习如何使用照相机。
sub_title3-2-1 = 课程
dt3-2-1-1 = <b><a href="#c3-2-1">简单的拍照</a></b>
dd3-2-1-1 = 利用其他照相程序可以只用几行代码就获取一张照片。
dt3-2-1-2 = <b><a href="#c3-2-2">简单的录制视频</a></b>
dd3-2-1-2 = 利用其他的应用可以轻松的录制一段视屏。
dt3-2-1-3 = <b><a href="#c3-2-3">控制相机</a></b>
dd3-2-1-3 = 直接控制摄像头硬件，并实现自己的拍照应用。
title3-2-1 = 简单的拍照
p3-2-1-1 = 这一节将展示如何用已有拍照程序拍摄一张照片。
p3-2-1-2 = 可能你正在实现一个天气服务软件，可以将天气情况的地图和用手机拍的天空合成起来。整合照片只是你应用的很小一部分。你不想在这个功能上耗费太长的时间，也不需要修改已拍好的图片。值得让你高兴的是，大部分安卓设备上至少有一个摄像头应用。在这一节，你将学会如何让那个应用为你拍摄一张照片。
sub_title3-2-1-1 = 请求摄像头权限
p3-2-1-1-1 = 如果拍照功能对你的应用来讲至关重要，那么你需要在Google play上进行限制。可以在manifest文件中添加<a href="http://developer.android.com//guide/topics/manifest/uses-feature-element.html"> <code>&lt;uses-feature&gt;</code></a>来实现。
#pre3-2-1-1-1
p3-2-1-1-2 = 如果你的应用使用到了拍照，但不是一项必须的功能，那么设置<code>android:required</code>为<code>false</code>。这么做的话，Google Play将允许没有摄像头的设备下载你的应用。接下通过<code><a href="http://developer.android.com//reference/android/content/pm/PackageManager.html#hasSystemFeature(java.lang.String)">hasSystemFeature(PackageManager.FEATURE_CAMERA)</a></code>来检查该设备有没有摄像头就是你的任务了。如果摄像头不可用，你应该禁用摄像功能。
sub_title3-2-1-2 = 使用摄像机应用拍照
p3-2-1-2-1 = 在安卓中，想要让其他应用处理你的行为，需要使用到<code><a href="http://developer.android.com//reference/android/content/Intent.html">Intent</a></code>来描述你想要进行的操作。这个过程分三个部分：<code><a href="http://developer.android.com//reference/android/content/Intent.html">Intent</a></code>本身，调用其他外部<code><a href="http://developer.android.com//reference/android/app/Activity.html">Activity</a></code>，以及当获得返回的图片后进行的处理。
p3-2-1-2-2 = 下面是使用意图来捕获照片的方法。
#pre3-2-1-2-1
p3-2-1-2-3 = 注意调用<code><a href="http://developer.android.com//reference/android/app/Activity.html#startActivityForResult(android.content.Intent, int)">startActivityForResult()</a></code>方法之前需要使用<code><a href="http://developer.android.com//reference/android/content/Intent.html#resolveActivity(android.content.pm.PackageManager)">resolveActivity()</a></code>来进行检查，这个方法会返回第一个满足意图筛选条件的activity。做这一步检查是十分重要的，因为如果没有应用能够接收你的意图，那么你的应用会崩溃。所以只要返回结果不为null，你就可以放心的使用这个意图。
sub_title3-2-1-3 = 获取缩略图
p3-2-1-3-1 = 如果简单的拍摄一张照片不能满足你应用的雄心壮志，那么你可能想要获取拍摄到的照片并做一些处理。
p3-2-1-3-2 = 安卓的相机应用将照片编辑成<code><a href="http://developer.android.com//reference/android/graphics/Bitmap.html">Bitmap</a></code>放在<code><a href="http://developer.android.com//reference/android/content/Intent.html">Intent</a></code>中传递给<code><a href="http://developer.android.com//reference/android/app/Activity.html#onActivityResult(int, int, android.content.Intent)">onActivityResult()</a></code>方法。接下来的代码将获得这张图片并将它展示在<code><a href="http://developer.android.com//reference/android/widget/ImageView.html">ImageView</a></code>中。
#pre3-2-1-3-1
nc3-2-1-3-1 = <strong>注意:</strong> 这个从<code>"data"</code>中获取的缩略图对于一个icon是好用的，但不适用于大图片。处理全尺寸图像还需要做许多操作。
sub_title3-2-1-4 = 保存全尺寸照片
p3-2-1-4-1 = 如果你告诉安卓相机应用保存照片的路径，它将会保存全尺寸照片。你必须提供一个全路径名来保存这张照片。
p3-2-1-4-2 = 一般情况下，用户使用手机拍摄的任何照片应该被保存在外部存储器上供其他所有应用访问。这个路径可以通过调用<code><a href="http://developer.android.com//reference/android/os/Environment.html#getExternalStoragePublicDirectory(java.lang.String)">getExternalStoragePublicDirectory()</a></code>方法获得，使用<code><a href="http://developer.android.com//reference/android/os/Environment.html#DIRECTORY_PICTURES">DIRECTORY_PICTURES</a></code>作为参数。因为这个路径被所有应用共享，要想读写这个目录分别需要<code><a href="http://developer.android.com//reference/android/Manifest.permission.html#READ_EXTERNAL_STORAGE">READ_EXTERNAL_STORAGE</a></code>和<code><a href="http://developer.android.com//reference/android/Manifest.permission.html#WRITE_EXTERNAL_STORAGE">WRITE_EXTERNAL_STORAGE</a></code>权限。写权限包含了读权限，所以如果你要想这个目录写内容，那么你只需要请求一个权限：
#pre3-2-1-4-1
p3-2-1-4-3 = 然而，如果你希望这张照片只能由你的应用访问，你可以使用<code><a href="http://developer.android.com//reference/android/content/Context.html#getExternalFilesDir(java.lang.String)">getExternalFilesDir()</a></code>方法获得路径。在安卓4.3之前，想这个文件夹写内容依然需要<code><a href="http://developer.android.com//reference/android/Manifest.permission.html#WRITE_EXTERNAL_STORAGE">WRITE_EXTERNAL_STORAGE</a></code>权限。从安卓4.4开始，这个权限不再需要，因为其他应用无法访问这个目录，所以你只需要在低版本的安卓上申请这个权限：
#pre3-2-1-4-2
nc3-2-1-4-1 = <strong>注意:</strong> 你使用<code><a href="http://developer.android.com//reference/android/content/Context.html#getExternalFilesDir(java.lang.String)">getExternalFilesDir()</a></code>方法获取到的路径中的文件，在你卸载应用时将会被删除。
p3-2-1-4-4 = 一旦你决定了存储文件的目录，接下来就要小心命名冲突问题了。你也同样希望将路径存为变量以后使用。这里的例子展示了一个方法返回唯一的名称，这个名称由时间戳组成：
#pre3-2-1-4-3
p3-2-1-4-5 = 使用这个方法可以为相片新建一个文件，现在你可以像这样创建并使用<code><a href="http://developer.android.com//reference/android/content/Intent.html">Intent</a></code>：
#pre3-2-1-4-4
sub_title3-2-1-5 = 添加相片到相册
p3-2-1-5-1 = 当你使用意图创建一个照片后，你应该知道你的图片所在的位置，因为你制定了存放它们的第一位置。为了让所有其他的人使用，或许最简单的方法就是让它可以从系统的媒体提供者访问到。
nc3-2-1-5-1 = <strong>注意:</strong> 如果你使用<code><a href="http://developer.android.com//reference/android/content/Context.html#getExternalFilesDir(java.lang.String)">getExternalFilesDir()</a></code>作为你存储图片的路径，那么媒体扫描器将无法访问到你的文件，因为它们是你的应用所独有的。
p3-2-1-5-2 = 下面的例子演示了如何将你的照片添加到系统媒体库中，使得它可以被安卓相册和其他应用访问到。
#pre3-2-1-5-1
sub_title3-2-1-6 = 压缩图片
p3-2-1-6-1 = 管理多个全尺寸的图片会因为受限的内存而变的棘手。如果你发现你的应用在展示几张图片后发生内存溢出异常，你可以减少动态堆的数量，你可以动态减少用于读取JPEG到缩放到匹配目标视图的大小内存数组的动态内存堆的大小。
#pre3-2-1-6-1
title3-2-2 = 简单的录制视频
p3-2-2-1 = 这一节解释了如何使用已有的相机应用拍摄视屏。
p3-2-2-2 = 你的应用有它自己的功能，而拍摄视屏只是其中很小的一部分。你不希望在这上面浪费过多的时间。令人高兴的是，大多是安卓设备已经拥有摄像机应用来录制视屏。在这一节，你可以让它为你服务。
sub_title3-2-2-1 = 请求摄像头权限
p3-2-2-1-1 = 如果你的应用依赖摄像头，那么在manifest文件中添加<code>&lt;uses-feature&gt;</code>：
#pre3-2-2-1-1
p3-2-2-1-2 = 如果你的应用只是使用到摄像头，但是不是必要功能，那么设置<code>android:required</code>为<code>false</code>。如果这么做，Google Play将会允许没有摄像头的设备下载你的应用。接下来就是你的任务，通过调用<code><a href="http://developer.android.com//reference/android/content/pm/PackageManager.html#hasSystemFeature(java.lang.String)">hasSystemFeature(PackageManager.FEATURE_CAMERA)</a></code>方法获知该设备是否拥有摄像头，如果没有，你应该禁止摄像机的功能。
sub_title3-2-2-2 = 使用摄像机应用录制视屏
p3-2-2-2-1 = 在安卓中，想要让其他应用处理你的行为，需要使用到<code><a href="http://developer.android.com//reference/android/content/Intent.html">Intent</a></code>来描述你想要进行的操作。这个过程分三个部分：<code><a href="http://developer.android.com//reference/android/content/Intent.html">Intent</a></code>本身，调用其他外部<code><a href="http://developer.android.com//reference/android/app/Activity.html">Activity</a></code>，以及当获得返回的视屏后进行的处理。
p3-2-2-2-2 = 这是通过意图来拍摄视屏的方法。
#pre3-2-2-2-1
p3-2-2-2-3 = 注意调用<code><a href="http://developer.android.com//reference/android/app/Activity.html#startActivityForResult(android.content.Intent, int)">startActivityForResult()</a></code>方法之前需要使用<code><a href="http://developer.android.com//reference/android/content/Intent.html#resolveActivity(android.content.pm.PackageManager)">resolveActivity()</a></code>来进行检查，这个方法会返回第一个满足意图筛选条件的activity。做这一步检查是十分重要的，因为如果没有应用能够接收你的意图，那么你的应用会崩溃。所以只要返回结果不为null，你就可以放心的使用这个意图。
sub_title3-2-2-3 = 查看视屏
p3-2-2-3-1 = 安卓相机应用返回一个指向视屏保存位置的<code><a href="http://developer.android.com//reference/android/net/Uri.html">Uri</a></code>，这个Uri放在<code><a href="http://developer.android.com//reference/android/content/Intent.html">Intent</a></code>中传递给<code><a href="http://developer.android.com//reference/android/app/Activity.html#onActivityResult(int, int, android.content.Intent)">onActivityResult()</a></code>。接下来的代码获取这个视屏并显示在<code><a href="http://developer.android.com//reference/android/widget/VideoView.html">VideoView</a></code>上。
#pre3-2-2-3-1
title3-2-3 = 控制摄像头
p3-2-3-1 = 在这一节，我们将会讨论如何使用框架API直接控制摄像头硬件。
p3-2-3-2 = 直接控制摄像头硬件比使用其他应用要多写很多代码。然而，如果你想创建一个独特的视频应用或者你的应用要与视屏深度结合，这一节将向你展示如何操作。
sub_title3-2-3-1 = 打开摄像头对象
p3-2-3-1-1 = 获得<code><a href="http://developer.android.com//reference/android/hardware/Camera.html">Camera</a></code>对象是直接控制摄像头硬件的第一步。如同安卓自带的摄像头应用一样，推荐的做法是在<code><a href="http://developer.android.com//reference/android/app/Activity.html#onCreate(android.os.Bundle)">onCreate()</a></code>方法中单独开启一个线程来开启<code><a href="http://developer.android.com//reference/android/hardware/Camera.html">Camera</a></code>。这么做是因为在打开摄像头的过程中需要一些时间，如果放在主线程会阻塞UI。一个更基本的实现，可以将打开摄像头的时机延迟到<code><a href="http://developer.android.com//reference/android/app/Activity.html#onResume()">onResume()</a></code>方法，这样可以促进代码的复用以及使得后续控制变得简单。
p3-2-3-1-2 = 调用<code><a href="http://developer.android.com//reference/android/hardware/Camera.html#open()">Camera.open()</a></code>时，如果摄像头正在被其他应用使用会抛出一个异常，所以我们要用<code>try</code>包裹代码段。
#pre3-2-3-1-1
p3-2-3-1-3 = 从API 9 开始，摄像头框架支持多个摄像头。如果你使用之前的API调用了没有参数的<code><a href="http://developer.android.com//reference/android/hardware/Camera.html#open()">open()</a></code>方法，你将会获得第一个后置摄像头。
sub_title3-2-3-2 = 创建图像预览
p3-2-3-2-1 = 在拍照之前通常都需要给用户提供一个预览界面。想要这么做，你可以使用<code><a href="http://developer.android.com//reference/android/view/SurfaceView.html">SurfaceView</a></code>来显示摄像头捕捉到的内容。
lead3-2-3-2-1 = 预览类
p3-2-3-2-2 = 在开始展示预览图像之前，你需要预览类。预览类需要实现<code>android.view.SurfaceHolder.Callback</code>接口，这个接口用于将图像数据从摄像头硬件传递给应用程序。
#pre3-2-3-2-1
p3-2-3-2-3 = 在开始预览之前，预览类必须被传递给<code><a href="http://developer.android.com//reference/android/hardware/Camera.html">Camera</a></code>对象，正如我们下一节将要展示的一样。
lead3-2-3-2-2 = 设置并开启预览
p3-2-3-2-4 = camera实例和与之向关联的预览类必须按一定的顺序创建，即camera对象先创建。在下面的代码段中，初始化camera的过程被封装了起来，所以当用户改变了摄像头时，<code><a href="http://developer.android.com//reference/android/hardware/Camera.html#startPreview()">Camera.startPreview()</a></code>方法将由<code>setCamera()</code>方法调用。预览类在回调方法<code>surfaceChanged()</code>中也必须重启。
#pre3-2-3-2-2
sub_title3-2-3-3 = 修改摄像机设置
p3-2-3-3-1 = 摄像头的设置将会改变拍出来的照片。这个例子只改变了预览图像的大小；查看相机应用的源码来学习更多。
#pre3-2-3-3-1
sub_title3-2-3-4 = 设置预览图像的方向
p3-2-3-4-1 = 大多数摄像头引用将预览图锁定为横屏显示，因为那是相机传感器默认的方向。这种设定不会组织你将其设置为竖屏，因为设备的方向信息被记录在了EXIF头中。<code><a href="http://developer.android.com//reference/android/hardware/Camera.html#setDisplayOrientation(int)">setCameraDisplayOrientation()</a></code>方法使得你可以在不改变拍出照片结果的情况下改变预览图片的显示方向。然而，在安卓API 14之前，你必须停止当前的预览，在改变方向之后再重启它。
sub_title3-2-3-5 = 拍摄一张照片
p3-2-3-5-1 = 当预览图准备好后，调用<code><a href="http://developer.android.com//reference/android/hardware/Camera.html#takePicture(android.hardware.Camera.ShutterCallback, android.hardware.Camera.PictureCallback, android.hardware.Camera.PictureCallback)">Camera.takePicture()</a></code>方法来拍摄一张照片。你可以创建<code><a href="http://developer.android.com//reference/android/hardware/Camera.PictureCallback.html">Camera.PictureCallback</a></code>和<code><a href="http://developer.android.com//reference/android/hardware/Camera.ShutterCallback.html">Camera.ShutterCallback</a></code>对象，并将它们传递给<code><a href="http://developer.android.com//reference/android/hardware/Camera.html#takePicture(android.hardware.Camera.ShutterCallback, android.hardware.Camera.PictureCallback, android.hardware.Camera.PictureCallback)">Camera.takePicture()</a></code>。 
p3-2-3-5-2 = 如果你想继续抓取图片，你可以创建一个实现了<code><a href="http://developer.android.com//reference/android/hardware/Camera.PreviewCallback.html#onPreviewFrame(byte[], android.hardware.Camera)">onPreviewFrame()</a></code>接口的<code><a href="http://developer.android.com//reference/android/hardware/Camera.PreviewCallback.html">Camera.PreviewCallback</a></code>对象。由于某些原因，你只能从已选择的预览中捕获图像，或者设置延迟一些再调用<code><a href="http://developer.android.com//reference/android/hardware/Camera.html#takePicture(android.hardware.Camera.ShutterCallback, android.hardware.Camera.PictureCallback, android.hardware.Camera.PictureCallback)">takePicture()</a></code>方法。
sub_title3-2-3-6 = 重新开始预览
p3-2-3-6-1 = 图像获取成功后，你必须再用户拍摄下一张图片之前重新开启预览。在这个例子中，重启的动作在重新加载快门按钮式完成。
#pre3-2-3-6-1
sub_title3-2-3-7 = 停止预览并释放摄像头
p3-2-3-7-1 = 一旦你的应用完成使用摄像头，就该做一些清理操作了。特别需要注意，你必须释放<code><a href="http://developer.android.com//reference/android/hardware/Camera.html">Camera</a></code>对象，否则会有使得其它应用程序，或者你自己的应用程序崩溃的风险。
p3-2-3-7-2 = 什么时候应该停止预览并释放摄像头呢？当preview surface被销毁时就是停止预览并释放摄像头的好时机，就如同<code>Preview</code>类中的那些方法一样。
#pre3-2-3-7-1
p3-2-3-7-3 = 在之前的章节中，这一过程也是<code>setCamera()</code>方法的一部分，所以初始化摄像头都伴随这停止预览这一过程。
title3-3 = 内容打印
p3-3-1 = 安卓的用户经常只在设备上查看内容，但是有些时候向别人展示你的屏幕并不合适。能够将内容从应用中打印出来将会给用户更好的内容展示效果，也可以向没有使用你的应用的人分享你的信息。打印出来之后也可以方便用户在没有手机，电池电量低或没有无线连接时查看内容。
p3-3-2 = 从安卓4.4开始，系统框架提供了直接从安卓应用打印图片和文档的功能。这一节将展示如何从你的应用打印内容，包括打印图片，HTML网页和自定义文档。
sub_title3-3-1 = 课程
dt3-3-1-1 = <strong><a href="#c3-3-1">打印照片</a></strong>
dd3-3-1-1 = 这一节讲解如何打印一张图片。
dt3-3-1-2 = <strong><a href="#c3-3-2">打印HTML文档</a></strong>
dd3-3-1-2 = 这一节讲解如何打印HTML文档。
dt3-3-1-3 = <strong><a href="#c3-3-3">打印自定义文档</a></strong>
dd3-3-1-3 = 这一节讲解如何连接到安卓print manager，创建一个打印适配器并创建打印内容。
title3-3-1 = 打印照片
p3-3-1-1 = 拍摄并打印照片是移动设备最流行的做法。如果你的应用能够拍摄照片，展示他们，或者向好友分享这些照片，那么你应该考虑要不要加上打印照片的功能。The <a href="http://developer.android.com//tools/support-library/index.html">Android Support Library</a>提供了一些方便的功能使得用较少的代码就能实现打印功能。
p3-3-1-2 = 这一节将想你展示如何使用v4 support library的<code><a href="http://developer.android.com//reference/android/support/v4/print/PrintHelper.html">PrintHelper</a></code>类打印图片。
sub_title3-3-1-1 = 打印一张图片
p3-3-1-1-1 = 安卓Support Library中的<code><a href="http://developer.android.com//reference/android/support/v4/print/PrintHelper.html">PrintHelper</a></code>类提供了简单的方法来打印图片。这个类只有一个<code><a href="http://developer.android.com//reference/android/support/v4/print/PrintHelper.html#setScaleMode(int)">setScaleMode()</a></code>布局选项，有一下两个选择：
#ul
li3-3-1-1-1 = <code><a href="http://developer.android.com//reference/android/support/v4/print/PrintHelper.html#SCALE_MODE_FIT">SCALE_MODE_FIT</a></code> - 这个选项会适配图片的大小，使得整张图片能够完整的打印在纸张上。
li3-3-1-1-2 = <code><a href="http://developer.android.com//reference/android/support/v4/print/PrintHelper.html#SCALE_MODE_FILL">SCALE_MODE_FILL</a></code> - 这个选项会裁剪图片称为纸张的大小。使用这个选项有可能会使得图片的上，下，左，右边缘显示不全，如果你不进行设置，这个选项是默认选择的。
p3-3-1-1-2 = <code><a href="http://developer.android.com//reference/android/support/v4/print/PrintHelper.html#setScaleMode(int)">setScaleMode()</a></code>的所有选项都会保持原有图像的长宽比。下面的代码展示了如何创建<code><a href="http://developer.android.com//reference/android/support/v4/print/PrintHelper.html">PrintHelper</a></code>类，设置裁剪选项，并且开始答应的过程：
#pre3-3-1-1-1
p3-3-1-1-3 = 这个方法可以作为Action bar的一个功能按钮。注意并不是所有情况下都支持的功能应该放在Action bar的隐藏菜单中。更多内容，查看<a href="http://developer.android.com//design/patterns/actionbar.html">Action Bar</a>设计指导。
p3-3-1-1-4 = 在<code><a href="http://developer.android.com//reference/android/support/v4/print/PrintHelper.html#printBitmap(java.lang.String, android.graphics.Bitmap)">printBitmap()</a></code>方法调用之后，你的应用不再需要做任何操作。安卓会给用户展示一个打印对话框，让用户选择打印机和打印选项。然后用户就可以打印这张照片或者取消这次操作。如果用户选择打印照片，系统会开始打印操作，并在下拉抽屉中显示打印进度。
p3-3-1-1-5 = 如果你希望打印额外的内容，你必须构造一个打印文档。更多内容，查看<a href="#c3-3-2">Printing an HTML Document</a> or <a href="#c3-3-3">Printing a Custom Document</a>。
title3-3-2 = 打印HTML文档
p3-3-2-1 = 如果不仅仅要打印图片的话需要子啊一个打印文档中整合文字和图像。安卓框架提供了一种方法能够很简单的打印HTML文档。
p3-3-2-2 = 在安卓4.4中，<code><a href="http://developer.android.com//reference/android/webkit/WebView.html">WebView</a></code>类已经可以打印网页内容了。这个类允许你加载一个本地的HTML资源或者从网页上下载一个网页，创建一个打印任务并交给安卓处理。
p3-3-2-3 = 这一节将向你展示如何使用<code><a href="http://developer.android.com//reference/android/webkit/WebView.html">WebView</a></code>快速的打印一个具有图像和文字的HTML文档。
sub_title3-3-2-1 = 加载HTML文档
p3-3-2-1-1 = 使用<code><a href="http://developer.android.com//reference/android/webkit/WebView.html">WebView</a></code>打印的HTML文档包含一个HTML资源或者一串HTML文档的字符串。这一节将向你展示如何创加载一个HTML文档来给<code><a href="http://developer.android.com//reference/android/webkit/WebView.html">WebView</a></code>打印。
p3-3-2-1-2 = 这个视图对象使用了activity布局。然而，如果你的应用没有使用<code><a href="http://developer.android.com//reference/android/webkit/WebView.html">WebView</a></code>，你可以创建一个打印功能的实例。创建自定义打印视图的主要步骤为：
#ol
li3-3-2-1-1 = 创建一个<code><a href="http://developer.android.com//reference/android/webkit/WebViewClient.html">WebViewClient</a></code>类在HTML加载完成后开始打印。
li3-3-2-1-2 = 加载HTML到<code><a href="http://developer.android.com//reference/android/webkit/WebView.html">WebView</a></code>对象中。
p3-3-2-1-3 = 接下来的代码演示了如何创建<code><a href="http://developer.android.com//reference/android/webkit/WebViewClient.html">WebViewClient</a></code>并加载HTML文档：
#pre3-3-2-1-1
nc3-3-2-1-1 = <strong>注意:</strong> 确保你的打印任务发生在<code><a href="http://developer.android.com//reference/android/webkit/WebViewClient.html">WebViewClient</a></code>中的<code><a href="http://developer.android.com//reference/android/webkit/WebViewClient.html#onPageFinished(android.webkit.WebView, java.lang.String)">onPageFinished()</a></code>方法中。如果你没有等到整个页面加载完成，打印出来的内容可能不完整或者是空白，或者完全失败。
nc3-3-2-1-2 = <strong>注意:</strong> 上面的实例代码持有了一个<code><a href="http://developer.android.com//reference/android/webkit/WebView.html">WebView</a></code>对象的实例，所以在打印任务创建之前是没有垃圾回收的。确保在你的实现中也这样做，否在在打印过程中可能或失败。
p3-3-2-1-4 = 如果你想在页面中包含图像，将图像文件放在你项目中的<code>assets/</code>文件夹中并在<code><a href="http://developer.android.com//reference/android/webkit/WebView.html#loadDataWithBaseURL(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)">loadDataWithBaseURL()</a></code>中传递一个URL参数，下面是示例代码：
#pre3-3-2-1-2
p3-3-2-1-5 = 你也可以加载网上的网页，只需要使用<code><a href="http://developer.android.com//reference/android/webkit/WebView.html#loadUrl(java.lang.String)">loadUrl()</a></code>替换掉之前<code><a href="http://developer.android.com//reference/android/webkit/WebView.html#loadDataWithBaseURL(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)">loadDataWithBaseURL()</a></code>就可以了。
#pre3-3-2-1-3
p3-3-2-1-6 = 当使用<code><a href="http://developer.android.com//reference/android/webkit/WebView.html">WebView</a></code>来创建打印文档时，你应该注意以下几点限制：
#ul
li3-3-2-1-3 = 你不能在文档中添加文档头和文档尾，包括页码。
li3-3-2-1-4 = 打印HTML文档不知道划定页码范围，比如：不支持打印从第二页到第四页的HTML文档。
li3-3-2-1-5 = 一个<code><a href="http://developer.android.com//reference/android/webkit/WebView.html">WebView</a></code>的实例一次只能处理一个打印任务。
li3-3-2-1-6 = 包含css打印选项的HTML文档不被支持。
li3-3-2-1-7 = 你不能使用在HTML文档中使用JavaScript触发打印。
nc3-3-2-1-3 = <strong>注意:</strong> 在布局中的<code><a href="http://developer.android.com//reference/android/webkit/WebView.html">WebView</a></code>中的内容同样可以打印，只要它完成了资源的加载。
p3-3-2-1-7 = 如果你想创建一个更加自定义的输出操作，请看下一节，<a href="#c3-3-3">打印自定义文档</a>。
sub_title3-3-2-2 = 创建打印任务
p3-3-2-2-1 = 在创建一个<code><a href="http://developer.android.com//reference/android/webkit/WebView.html">WebView</a></code>并加载了资源之后，你的应用基本就完成了打印所需要的准备了。下一步要做的就是访问<code><a href="http://developer.android.com//reference/android/print/PrintManager.html">PrintManager</a></code>，创建打印适配器，创建打印任务。接下来的例子展示了如何进行以上的操作：
#pre3-3-2-2-1
p3-3-2-2-2 = 这个例子中保存了一个<code><a href="http://developer.android.com//reference/android/print/PrintJob.html">PrintJob</a></code>对象供给应用使用，但这不是必须的。你的应用可以使用这个对象来追踪打印任务的进程。如果你的应用需要追踪打印任务是成功，失败还是用户取消，那么这个方法是十分有用的。不过你自己应用不需要创建打印信息的提醒，因为系统打印框架会自动为打印进程创建系统通知。
title3-3-3 = 打印自定义文档
p3-3-3-1 = 对于一些应用，比如绘画应用，网页布局应用和专注于图像显示的应用，能够打印出漂亮的文档是至关重要的。在这种情况下，只打印图片和HTML文档是不够的。这种应用所打印的内容要控制所有打印的内容，包括字体，文字大小，头，尾和图像元素等。
p3-3-3-2 = 创建这种自定义的打印所需要的代码比之前两节所讲的内容要多很多。你必须创建组件来和系统的打印框架进行交流，进行打印的设置，绘制打印元素以及管理打印多张的情况。
p3-3-3-3 = 这一节将向你展示如何连接print manager，创建一个print adapter并创建打印的内容。
sub_title3-3-3-1 = 连接Print Manager
p3-3-3-1-1 = 想要让你的应用直接管理打印过程，第一步要做的就是连接安卓打印框架并获得一个<code><a href="http://developer.android.com//reference/android/print/PrintManager.html">PrintManager</a></code>类的实例。这个类允许你初始化打印任务并开始打印的生命周期。接下来的代码向你展示了如何获得print manager并开启打印进程。
#pre3-3-3-1-1
p3-3-3-1-2 = 上面的实例代码展示了如果给打印任务命名，并且如何创建<code><a href="http://developer.android.com//reference/android/print/PrintDocumentAdapter.html">PrintDocumentAdapter</a></code>来处理打印的生命周期。print adapter的具体实现将在下一节讨论。
nc3-3-3-1-1 = <strong>注意:</strong> <code><a href="http://developer.android.com//reference/android/print/PrintManager.html#print(java.lang.String, android.print.PrintDocumentAdapter, android.print.PrintAttributes)">print()</a></code>方法的最后一个参数需要一个<code><a href="http://developer.android.com//reference/android/print/PrintAttributes.html">PrintAttributes</a></code>对象。你可以使用这个参数来提示打印过程以及延续上一次打印的设置进行下一次的打印，这样可以提升用户体验。你也可以使用这个对象来对打印的内容进行设置，比如设置打印图像的方向。
sub_title3-3-3-2 = 创建一个Print AdatperCreate a Print Adapter
p3-3-3-2-1 = Print adapter与安卓打印框架进行交互并处理打印的过程。这个过程需要用户选择打印机并进行打印设置。这些设置包括不同的打印架，不同的打印效果，不同的纸张大小，不同的纸张方向等。在这些选项设置好了之后，打印框架会要求你的adapter指定和生成一个打印文档用来为最终的打印做准备。一旦用户点击的打印按钮，打印框架将会把打印文档传递给print provider用作输出。在打印的过程中，用户可以选择取消打印，所以你的print adapter必须监听是否取消并做出相应处理。
p3-3-3-2-2 = <code><a href="http://developer.android.com//reference/android/print/PrintDocumentAdapter.html">PrintDocumentAdapter</a></code>抽象类可以用来处理打印的生命周期，它有四个主要的回调方法。你必须实现这些方法来处理打印框架的不同的事件：
#ul
li3-3-3-2-1 = <code><a href="http://developer.android.com//reference/android/print/PrintDocumentAdapter.html#onStart()">onStart()</a></code> - 在刚开始打印时触发。如果你的应用有什么只执行一次的准备工作，让它在这里执行。在你的adapter没有必要实现这个方法。
li3-3-3-2-2 = <code><a href="http://developer.android.com//reference/android/print/PrintDocumentAdapter.html#onLayout(android.print.PrintAttributes, android.print.PrintAttributes, android.os.CancellationSignal, android.print.PrintDocumentAdapter.LayoutResultCallback, android.os.Bundle)">onLayout()</a></code> - 当用户修改了设置并影响了打印输出结果时触发，比如修改了不同的纸张大小，或者纸张的方向，你的应用可以在这里重新计算纸张的大小。至少，这个方法必须返回打印文档的页数。
li3-3-3-2-3 = <code><a href="http://developer.android.com//reference/android/print/PrintDocumentAdapter.html#onWrite(android.print.PageRange[], android.os.ParcelFileDescriptor, android.os.CancellationSignal, android.print.PrintDocumentAdapter.WriteResultCallback)">onWrite()</a></code> - Called to render printed pages into a file to be printed. This method may be called one or more times after each <code><a href="http://developer.android.com//reference/android/print/PrintDocumentAdapter.html#onLayout(android.print.PrintAttributes, android.print.PrintAttributes, android.os.CancellationSignal, android.print.PrintDocumentAdapter.LayoutResultCallback, android.os.Bundle)">onLayout()</a></code> call.
li3-3-3-2-4 = <code><a href="http://developer.android.com//reference/android/print/PrintDocumentAdapter.html#onFinish()">onFinish()</a></code> - 一旦打印完成触发。如果你的应用有只需要执行一次的销毁任务，将它放在这里。在你的adapter实现这个方法不是必须的。
p3-3-3-2-3 = 下面的章节将会介绍如何实现布局和写入的方法，这对于print adapter是至关重要的。
nc3-3-3-2-1 = <strong>注意:</strong> 上面哪些adapter的方法是在主线中调用的。如果你的某个方法会耗费许多时间，需要将它们放在单独的线程中。比如，你可以将布局和打印文档的数据任务封装在一个单独的<code><a href="http://developer.android.com//reference/android/os/AsyncTask.html">AsyncTask</a></code>对象中。
lead3-3-3-2-1 = 计算打印文档信息
p3-3-3-2-4 = 通过实现<code><a href="http://developer.android.com//reference/android/print/PrintDocumentAdapter.html">PrintDocumentAdapter</a></code>类，你的应用必须能过指定文档的类型，以及要打印纸张的数量和大小。在adapter中实现的<code><a href="http://developer.android.com//reference/android/print/PrintDocumentAdapter.html#onLayout(android.print.PrintAttributes, android.print.PrintAttributes, android.os.CancellationSignal, android.print.PrintDocumentAdapter.LayoutResultCallback, android.os.Bundle)">onLayout()</a></code>方法对所需要的信息进行了计算并提供给<code><a href="http://developer.android.com//reference/android/print/PrintDocumentInfo.html">PrintDocumentInfo</a></code>类，包括打印页数以及内容类型。下面的代码展示了<code><a href="http://developer.android.com//reference/android/print/PrintDocumentAdapter.html#onLayout(android.print.PrintAttributes, android.print.PrintAttributes, android.os.CancellationSignal, android.print.PrintDocumentAdapter.LayoutResultCallback, android.os.Bundle)">onLayout()</a></code>方法的基本实现：
#pre3-3-3-2-1
p3-3-3-2-5 = <code><a href="http://developer.android.com//reference/android/print/PrintDocumentAdapter.html#onLayout(android.print.PrintAttributes, android.print.PrintAttributes, android.os.CancellationSignal, android.print.PrintDocumentAdapter.LayoutResultCallback, android.os.Bundle)">onLayout()</a></code>方法的执行有可能返回三个结果之一：完成，取消和失败。你必须通过使用<code><a href="http://developer.android.com//reference/android/print/PrintDocumentAdapter.LayoutResultCallback.html">PrintDocumentAdapter.LayoutResultCallback</a></code>对象对不同的结果做不同的处理。
nc3-3-3-2-2 = <strong>注意:</strong> <code><a href="http://developer.android.com//reference/android/print/PrintDocumentAdapter.LayoutResultCallback.html#onLayoutFinished(android.print.PrintDocumentInfo, boolean)">onLayoutFinished()</a></code>方法的boolean类型的参数指示了自上次请求以来布局内容是否发生了改变。设置了这个参数可以减少对<code><a href="http://developer.android.com//reference/android/print/PrintDocumentAdapter.html#onWrite(android.print.PageRange[], android.os.ParcelFileDescriptor, android.os.CancellationSignal, android.print.PrintDocumentAdapter.WriteResultCallback)">onWrite()</a></code>方法不必要的调用，这样会缓存上一次的打印文档并会提升性能。
p3-3-3-2-6 = <code><a href="http://developer.android.com//reference/android/print/PrintDocumentAdapter.html#onLayout(android.print.PrintAttributes, android.print.PrintAttributes, android.os.CancellationSignal, android.print.PrintDocumentAdapter.LayoutResultCallback, android.os.Bundle)">onLayout()</a></code>的主要任务是计算出要打印的页数并传递给打印机。如何计算打印的页数取决于你的应用要打印页数的数量。下面的代码展示了根据打印方向的不同页数的变化。
#pre3-3-3-2-2
lead3-3-3-2-2 = 写入打印文档文件
p3-3-3-2-7 = 当要开始将打印内容写入文件时，安卓打印框架就会调用你的应用的<code><a href="http://developer.android.com//reference/android/print/PrintDocumentAdapter.html">PrintDocumentAdapter</a></code>类中的<code><a href="http://developer.android.com//reference/android/print/PrintDocumentAdapter.html#onWrite(android.print.PageRange[], android.os.ParcelFileDescriptor, android.os.CancellationSignal, android.print.PrintDocumentAdapter.WriteResultCallback)">onWrite()</a></code>方法。这个方法的参数指明要写入的页数以及要使用的输出文件。你实现的这个方法接下来必须将要打印的每一页转化为PDF文档文件。当完成之后，你需要调用回调对象的<code><a href="http://developer.android.com//reference/android/print/PrintDocumentAdapter.WriteResultCallback.html#onWriteFinished(android.print.PageRange[])">onWriteFinished()</a></code>方法。
nc3-3-3-2-3 = <strong>注意:</strong> 安卓打印框架可能会在每次<code><a href="http://developer.android.com//reference/android/print/PrintDocumentAdapter.html#onLayout(android.print.PrintAttributes, android.print.PrintAttributes, android.os.CancellationSignal, android.print.PrintDocumentAdapter.LayoutResultCallback, android.os.Bundle)">onLayout()</a></code>之后一次或多次执行<code><a href="http://developer.android.com//reference/android/print/PrintDocumentAdapter.html#onWrite(android.print.PageRange[], android.os.ParcelFileDescriptor, android.os.CancellationSignal, android.print.PrintDocumentAdapter.WriteResultCallback)">onWrite()</a></code>方法。由于这个原因，如果内容布局没有发生改变，将<code><a href="http://developer.android.com//reference/android/print/PrintDocumentAdapter.LayoutResultCallback.html#onLayoutFinished(android.print.PrintDocumentInfo, boolean)">onLayoutFinished()</a></code>的boolean类型的参数设车false是十分重要的，这样可以避免不必要的重新写入。
nc3-3-3-2-4 = <strong>注意:</strong> <code><a href="http://developer.android.com//reference/android/print/PrintDocumentAdapter.LayoutResultCallback.html#onLayoutFinished(android.print.PrintDocumentInfo, boolean)">onLayoutFinished()</a></code>方法的boolean类型的参数指示了自上次请求以来布局内容是否发生了改变。设置了这个参数可以减少对<code><a href="http://developer.android.com//reference/android/print/PrintDocumentAdapter.html#onWrite(android.print.PageRange[], android.os.ParcelFileDescriptor, android.os.CancellationSignal, android.print.PrintDocumentAdapter.WriteResultCallback)">onWrite()</a></code>方法不必要的调用，这样会缓存上一次的打印文档并会提升性能。
p3-3-3-2-8 = 下面的代码简单的展示了如何使用<code><a href="http://developer.android.com//reference/android/print/pdf/PrintedPdfDocument.html">PrintedPdfDocument</a></code>类来创建PDF文件：
#pre3-3-3-2-3
p3-3-3-2-9 = 这个例子将转化为PDF内容的过程封装在<code>drawPage()</code>方法中，这将在下一节讨论。
p3-3-3-2-10 = <code><a href="http://developer.android.com//reference/android/print/PrintDocumentAdapter.html#onLayout(android.print.PrintAttributes, android.print.PrintAttributes, android.os.CancellationSignal, android.print.PrintDocumentAdapter.LayoutResultCallback, android.os.Bundle)">onLayout()</a></code>方法的执行有可能返回三个结果之一：完成，取消和失败。你必须通过使用<code><a href="http://developer.android.com//reference/android/print/PrintDocumentAdapter.LayoutResultCallback.html">PrintDocumentAdapter.LayoutResultCallback</a></code>对象对不同的结果做不同的处理。
nc3-3-3-2-5 = <strong>注意:</strong> 将文档打印出来是一个费时的操作。为了避免阻塞主线程，你应该考虑将这些操作放在一个单独的线程中，比如放在<code><a href="http://developer.android.com//reference/android/os/AsyncTask.html">AsyncTask</a></code>中。要查看更多信息，查看<a href="http://developer.android.com//guide/components/processes-and-threads.html">Processes and Threads</a>。
sub_title3-3-3-3 = 绘制PDF页面内容
p3-3-3-3-1 = 当你的应用打印的时候，你的应用必须创建一个PDF文档并将它传递给安卓打印框架来打印。你可以使用PDF generationlibrary来做这个操作。这一节向你展示如何使用<code><a href="http://developer.android.com//reference/android/print/pdf/PrintedPdfDocument.html">PrintedPdfDocument</a></code>类来生成PDF。
p3-3-3-3-2 = <code><a href="http://developer.android.com//reference/android/print/pdf/PrintedPdfDocument.html">PrintedPdfDocument</a></code>类使用<code><a href="http://developer.android.com//reference/android/graphics/Canvas.html">Canvas</a></code>对象将元素绘制到PDF上，就想在activity上的布局一样。你可以通过调用<code><a href="http://developer.android.com//reference/android/graphics/Canvas.html">Canvas</a></code>的绘画方法将元素绘制到要打印的页面上。下面的代码展示了这些方法：
#pre3-3-3-3-1
p3-3-3-3-3 = 当使用<code><a href="http://developer.android.com//reference/android/graphics/Canvas.html">Canvas</a></code>向PDF页面上绘制内容时，元素被定为一个一个的点，每一个七十二分之一英尺。确保你使用这个单位来计算和定位你的元素的位置。对于元素的位置来讲，屏幕的上左角的坐标为0，0。
tc3-3-3-3-1 = <strong>提示:</strong> 虽然<code><a href="http://developer.android.com//reference/android/graphics/Canvas.html">Canvas</a></code>对象允许你将元素放在PDF文档的边缘，但是许多打印机无法在纸张的边缘打印东西。确保你在设计时考虑到了这一点。
