
#		**********************************************************************************************************
#		Chapter 15. Batch processing
#		**********************************************************************************************************

title15 = Chapter 15. Batch processing
p15-1 = A naive approach to inserting 100,000 rows in the database using Hibernate might look like this:
p15-2 = This would fall over with an <code>OutOfMemoryException</code> somewhere around the 50,000th row. That is because Hibernate caches all the newly inserted <code>Customer</code> instances in the session-level cache. In this chapter we will show you how to avoid this problem.
p15-3 = If you are undertaking batch processing you will need to enable the use of JDBC batching. This is absolutely essential if you want to achieve optimal performance. Set the JDBC batch size to a reasonable number (10-50, for example):
p15-4 = Hibernate disables insert batching at the JDBC level transparently if you use an identity identifier generator.
p15-5 = You can also do this kind of work in a process where interaction with the second-level cache is completely disabled:
p15-6 = However, this is not absolutely necessary, since we can explicitly set the CacheMode to disable interaction with the second-level cache.

#		**********************************************************************************************************
#		15.1. Batch inserts
#		**********************************************************************************************************

title15-1 = 15.1. Batch inserts
p15-1-1 = When making new objects persistent <code>flush()</code> and then <code>clear()</code> the session regularly in order to control the size of the first-level cache.

#		**********************************************************************************************************
#		15.2. Batch updates
#		**********************************************************************************************************

title15-2 = 15.2. Batch updates
p15-2-1 = For retrieving and updating data, the same ideas apply. In addition, you need to use scroll() to take advantage of server-side cursors for queries that return many rows of data.

#		**********************************************************************************************************
#		15.3. The StatelessSession interface
#		**********************************************************************************************************

title15-3 = 15.3. The StatelessSession interface
p15-3-1 = Alternatively, Hibernate provides a command-oriented API that can be used for streaming data to and from the database in the form of detached objects. A StatelessSession has no persistence context associated with it and does not provide many of the higher-level life cycle semantics. In particular, a stateless session does not implement a first-level cache nor interact with any second-level or query cache. It does not implement transactional write-behind or automatic dirty checking. Operations performed using a stateless session never cascade to associated instances. Collections are ignored by a stateless session. Operations performed via a stateless session bypass Hibernate's event model and interceptors. Due to the lack of a first-level cache, Stateless sessions are vulnerable to data aliasing effects. A stateless session is a lower-level abstraction that is much closer to the underlying JDBC.
p15-3-2 = In this code example, the Customer instances returned by the query are immediately detached. They are never associated with any persistence context.
p15-3-3 = The <code>insert()</code>, <code>update()</code> and <code>delete()</code> operations defined by the StatelessSession interface are considered to be direct database row-level operations. They result in the immediate execution of a SQL INSERT, UPDATE or DELETE respectively. They have different semantics to the <code>save()</code>, <code>saveOrUpdate()</code> and <code>delete()</code> operations defined by the Session interface.

#		**********************************************************************************************************
#		15.4. DML-style operations
#		**********************************************************************************************************

title15-4 = 15.4. DML-style operations
p15-4-1 = As already discussed, automatic and transparent object/relational mapping is concerned with the management of the object state. The object state is available in memory. This means that manipulating data directly in the database (using the SQL Data Manipulation Language (DML) the statements: <code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code>) will not affect in-memory state. However, Hibernate provides methods for bulk SQL-style DML statement execution that is performed through the Hibernate Query Language (<a href="#c16">Chapter 16, HQL: The Hibernate Query Language</a>).
p15-4-2 = The pseudo-syntax for <code>UPDATE</code> and <code>DELETE</code> statements is: ( <code>UPDATE</code> | <code>DELETE</code> ) FROM? EntityName (WHERE where_conditions)?.
p15-4-3 = Some points to note:
li15-4-1-1 = In the from-clause, the FROM keyword is optional
li15-4-1-2 = There can only be a single entity named in the from-clause. It can, however, be aliased. If the entity name is aliased, then any property references must be qualified using that alias. If the entity name is not aliased, then it is illegal for any property references to be qualified.
li15-4-1-3 = No <a href="#c16-4">Section 16.4, \u201CForms of join syntax\u201D</a>, either implicit or explicit, can be specified in a bulk HQL query. Sub-queries can be used in the where-clause, where the subqueries themselves may contain joins.
li15-4-1-4 = The where-clause is also optional.
p15-4-4 = As an example, to execute an HQL UPDATE, use the <code>Query.executeUpdate()</code> method. The method is named for those familiar with JDBC's <code>PreparedStatement.executeUpdate()</code>:
p15-4-5 = In keeping with the EJB3 specification, HQL UPDATE statements, by default, do not effect the <a href="#c5-1-3-1">Section 5.1.3.1, \u201CVersion number\u201D</a> or the <a href="#c5-1-3-2">Section 5.1.3.2, \u201CTimestamp\u201D</a> property values for the affected entities. However, you can force Hibernate to reset the version or timestamp property values through the use of a versioned update. This is achieved by adding the VERSIONED keyword after the UPDATE keyword.
p15-4-6 = Custom version types, <code>org.hibernate.usertype.UserVersionType</code>, are not allowed in conjunction with a update versioned statement.
p15-4-7 = To execute an HQL DELETE, use the same <code>Query.executeUpdate()</code> method:
p15-4-8 = The int value returned by the <code>Query.executeUpdate()</code> method indicates the number of entities effected by the operation. This may or may not correlate to the number of rows effected in the database. An HQL bulk operation might result in multiple actual SQL statements being executed (for joined-subclass, for example). The returned number indicates the number of actual entities affected by the statement. Going back to the example of joined-subclass, a delete against one of the subclasses may actually result in deletes against not just the table to which that subclass is mapped, but also the "root" table and potentially joined-subclass tables further down the inheritance hierarchy.
p15-4-9 = The pseudo-syntax for INSERT statements is: INSERT INTO EntityName <code>properties_list select_statement</code>. Some points to note:
li15-4-1-1 = Only the <code>INSERT INTO ... SELECT ... form</code> is supported; not the <code>INSERT INTO ... VALUES ... form</code>.<br/>The properties_list is analogous to the column specification in the SQL INSERT statement. For entities involved in mapped inheritance, only properties directly defined on that given class-level can be used in the properties_list. Superclass properties are not allowed and subclass properties do not make sense. In other words, INSERT statements are inherently non-polymorphic.
li15-4-1-2 = <code>select_statement</code> can be any valid HQL select query, with the caveat that the return types must match the types expected by the insert. Currently, this is checked during query compilation rather than allowing the check to relegate to the database. This might, however, cause problems between Hibernate Types which are equivalent as opposed to equal. This might cause issues with mismatches between a property defined as a org.hibernate.type.DateType and a property defined as a org.hibernate.type.TimestampType, even though the database might not make a distinction or might be able to handle the conversion.
li15-4-1-3 = For the id property, the insert statement gives you two options. You can either explicitly specify the id property in the properties_list, in which case its value is taken from the corresponding select expression, or omit it from the properties_list, in which case a generated value is used. This latter option is only available when using id generators that operate in the database; attempting to use this option with any "in memory" type generators will cause an exception during parsing. For the purposes of this discussion, in-database generators are considered to be <code>org.hibernate.id.SequenceGenerator</code> (and its subclasses) and any implementers of <code>org.hibernate.id.PostInsertIdentifierGenerator</code>. The most notable exception here is <code>org.hibernate.id.TableHiLoGenerator</code>, which cannot be used because it does not expose a selectable way to get its values.
li15-4-1-4 = For properties mapped as either version or timestamp, the insert statement gives you two options. You can either specify the property in the properties_list, in which case its value is taken from the corresponding select expressions, or omit it from the properties_list, in which case the seed value defined by the org.hibernate.type.VersionType is used.
p15-4-10 = The following is an example of an HQL <code>INSERT</code> statement execution:





















