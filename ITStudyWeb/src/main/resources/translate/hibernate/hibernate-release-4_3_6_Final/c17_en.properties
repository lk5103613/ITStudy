
#		**********************************************************************************************************
#		Chapter 17. Criteria Queries
#		**********************************************************************************************************

title17 = Chapter 17. Criteria Queries
p17-1 = Hibernate features an intuitive, extensible criteria query API.

#		**********************************************************************************************************
#		17.1. Creating a Criteria instance
#		**********************************************************************************************************

title17-1 = 17.1. Creating a Criteria instance
p17-1-1 = The interface <code>org.hibernate.Criteria</code> represents a query against a particular persistent class. The Session is a factory for <code>Criteria</code> instances.

#		**********************************************************************************************************
#		17.2. Narrowing the result set
#		**********************************************************************************************************

title17-2 = 17.2. Narrowing the result set
p17-2-1 = An individual query criterion is an instance of the interface <code>org.hibernate.criterion.Criterion</code>. The class <code>org.hibernate.criterion.Restrictions</code> defines factory methods for obtaining certain built-in <code>Criterion</code> types.
p17-2-2 = Restrictions can be grouped logically.
p17-2-3 = There are a range of built-in <code>criterion</code> types (Restrictions subclasses). One of the most useful allows you to specify SQL directly.
p17-2-4 = The <code>alias</code> placeholder will be replaced by the row alias of the queried entity.
p17-2-5 = You can also obtain a criterion from a Property instance. You can create a Property by calling <code>Property.forName()</code>:

#		**********************************************************************************************************
#		17.3. Ordering the results
#		**********************************************************************************************************

title17-3 = 17.3. Ordering the results
p17-3-1 = You can order the results using <code>org.hibernate.criterion.Order</code>.

#		**********************************************************************************************************
#		17.4. Associations
#		**********************************************************************************************************

title17-4 = 17.4. Associations
p17-4-1 = By navigating associations using <code>createCriteria()</code> you can specify constraints upon related entities:
p17-4-2 = The second <code>createCriteria()</code> returns a new instance of <code>Criteria</code> that refers to the elements of the <code>kittens</code> collection.
p17-4-3 = There is also an alternate form that is useful in certain circumstances:
p17-4-4 = (<code>createAlias()</code> does not create a new instance of <code>Criteria</code>.)
p17-4-5 = The kittens collections held by the Cat instances returned by the previous two queries are not pre-filtered by the criteria. If you want to retrieve just the kittens that match the criteria, you must use a <code>ResultTransformer</code>.
p17-4-6 = Additionally you may manipulate the result set using a left outer join:
p17-4-7 = This will return all of the Cats with a mate whose name starts with "good" ordered by their mate's age, and all cats who do not have a mate. This is useful when there is a need to order or limit in the database prior to returning complex/large result sets, and removes many instances where multiple queries would have to be performed and the results unioned by java in memory.
p17-4-8 = Without this feature, first all of the cats without a mate would need to be loaded in one query.
p17-4-9 = A second query would need to retreive the cats with mates who's name started with "good" sorted by the mates age.
p17-4-10 = Thirdly, in memory; the lists would need to be joined manually.

#		**********************************************************************************************************
#		17.5. Dynamic association fetching
#		**********************************************************************************************************

title17-5 = 17.5. Dynamic association fetching
p17-5-1 = You can specify association fetching semantics at runtime using <code>setFetchMode()</code>.
p17-5-2 = This query will fetch both <code>mate</code> and <code>kittens</code> by outer join. See <a href="#c20-1">Section 20.1, \u201CFetching strategies\u201D</a> for more information.

#		**********************************************************************************************************
#		17.6. Components
#		**********************************************************************************************************

title17-6 = 17.6. Components
p17-6-1 = To add a restriction against a property of an embedded component, the component property name should be prepended to the property name when creating the <code>Restriction</code>. The criteria object should be created on the owning entity, and cannot be created on the component itself. For example, suppose the Cat has a component property fullName with sub-properties <code>firstName</code> and <code>lastName</code>:
p17-6-2 = Note: this does not apply when querying collections of components, for that see below <a href="#c17-7">Section 17.7, \u201CCollections\u201D</a>

#		**********************************************************************************************************
#		17.7. Collections
#		**********************************************************************************************************

title17-7 = 17.7. Collections
p17-7-1 = When using criteria against collections, there are two distinct cases. One is if the collection contains entities (eg. <code>&lt;one-to-many/&gt;</code> or <code>&lt;many-to-many/&gt;</code>) or components (<code>&lt;composite-element/&gt;</code> ), and the second is if the collection contains scalar values (<code>&lt;element/&gt;</code>). In the first case, the syntax is as given above in the section <a href="#c17-4">Section 17.4, \u201CAssociations\u201D</a> where we restrict the kittens collection. Essentially we create a Criteria object against the collection property and restrict the entity or component properties using that instance.
p17-7-2 = For queryng a collection of basic values, we still create the <code>Criteria</code> object against the collection, but to reference the value, we use the special property "elements". For an indexed collection, we can also reference the index property using the special property "indices".

#		**********************************************************************************************************
#		17.8. Example queries
#		**********************************************************************************************************

title17-8 = 17.8. Example queries
p17-8-1 = The class <code>org.hibernate.criterion.Example</code> allows you to construct a query criterion from a given instance.
p17-8-2 = Version properties, identifiers and associations are ignored. By default, null valued properties are excluded.
p17-8-3 = You can adjust how the <code>Example</code> is applied.
p17-8-4 = You can even use examples to place criteria upon associated objects.

#		**********************************************************************************************************
#		17.9. Projections, aggregation and grouping
#		**********************************************************************************************************

title17-9 = 17.9. Projections, aggregation and grouping
p17-9-1 = The class <code>org.hibernate.criterion.Projections</code> is a factory for Projection instances. You can apply a projection to a query by calling <code>setProjection()</code>.
p17-9-2 = There is no explicit "group by" necessary in a criteria query. Certain projection types are defined to be <code>grouping projections</code>, which also appear in the SQL <code>group by</code> clause.
p17-9-3 = An alias can be assigned to a projection so that the projected value can be referred to in restrictions or orderings. Here are two different ways to do this:
p17-9-4 = The <code>alias()</code> and <code>as()</code> methods simply wrap a projection instance in another, aliased, instance of <code>Projection</code>. As a shortcut, you can assign an alias when you add the projection to a projection list:
p17-9-5 = You can also use <code>Property.forName()</code> to express projections:

#		**********************************************************************************************************
#		17.10. Detached queries and subqueries
#		**********************************************************************************************************

title17-10 = 17.10. Detached queries and subqueries
p17-10-1 = The <code>DetachedCriteria</code> class allows you to create a query outside the scope of a session and then execute it using an arbitrary Session.
p17-10-2 = A <code>DetachedCriteria</code> can also be used to express a subquery. Criterion instances involving subqueries can be obtained via <code>Subqueries</code> or <code>Property</code>.
p17-10-3 = Correlated subqueries are also possible:
p17-10-4 = Example of multi-column restriction based on a subquery:

#		**********************************************************************************************************
#		17.11. Queries by natural identifier
#		**********************************************************************************************************

title17-11 = 17.11. Queries by natural identifier
p17-11-1 = For most queries, including criteria queries, the query cache is not efficient because query cache invalidation occurs too frequently. However, there is a special kind of query where you can optimize the cache invalidation algorithm: lookups by a constant natural key. In some applications, this kind of query occurs frequently. The criteria API provides special provision for this use case.
p17-11-2 = First, map the natural key of your entity using <code>&lt;natural-id&gt;</code> and enable use of the second-level cache.
p17-11-3 = This functionality is not intended for use with entities with mutable natural keys.
p17-11-4 = Once you have enabled the Hibernate query cache, the <code>Restrictions.naturalId()</code> allows you to make use of the more efficient cache algorithm.




