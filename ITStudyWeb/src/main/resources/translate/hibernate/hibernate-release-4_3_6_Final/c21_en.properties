
#		**********************************************************************************************************
#		Chapter 21. Toolset Guide
#		**********************************************************************************************************

title21 = Chapter 21. Toolset Guide
p21-1 = Roundtrip engineering with Hibernate is possible using a set of Eclipse plugins, commandline tools, and Ant tasks.
p21-2 = Hibernate Tools currently include plugins for the Eclipse IDE as well as Ant tasks for reverse engineering of existing databases:
li21-1-1 = <code>Mapping Editor</code>: an editor for Hibernate XML mapping files that supports auto-completion and syntax highlighting. It also supports semantic auto-completion for class names and property/field names, making it more versatile than a normal XML editor.
li21-1-2 = <code>Console</code>: the console is a new view in Eclipse. In addition to a tree overview of your console configurations, you are also provided with an interactive view of your persistent classes and their relationships. The console allows you to execute HQL queries against your database and browse the result directly in Eclipse.
li21-1-3 = <code>Development Wizards</code>: several wizards are provided with the Hibernate Eclipse tools. You can use a wizard to quickly generate Hibernate configuration (cfg.xml) files, or to reverse engineer an existing database schema into POJO source files and Hibernate mapping files. The reverse engineering wizard supports customizable templates.
p21-3 = Please refer to the <code>Hibernate Tools</code> package documentation for more information.
p21-4 = However, the Hibernate main package comes bundled with an integrated tool : <code>SchemaExport aka hbm2ddl</code>.It can even be used from "inside" Hibernate.

#		**********************************************************************************************************
#		21.1. Automatic schema generation
#		**********************************************************************************************************

title21-1 = 21.1. Automatic schema generation
p21-1-1 = DDL can be generated from your mapping files by a Hibernate utility. The generated schema includes referential integrity constraints, primary and foreign keys, for entity and collection tables. Tables and sequences are also created for mapped identifier generators.
p21-1-2 = You must specify a SQL <code>Dialect</code> via the <code>hibernate.dialect</code> property when using this tool, as DDL is highly vendor-specific.
p21-1-3 = First, you must customize your mapping files to improve the generated schema. The next section covers schema customization.

#		**********************************************************************************************************
#		21.1.1. Customizing the schema
#		**********************************************************************************************************

title21-1-1 = 21.1.1. Customizing the schema
p21-1-1-1 = Many Hibernate mapping elements define optional attributes named length, precision and scale. You can set the <code>length</code>, <code>precision</code> and <code>scale</code> of a column with this attribute.
p21-1-1-2 = Some tags also accept a <code>not-null</code> attribute for generating a <code>NOT NULL</code> constraint on table columns, and a <code>unique</code> attribute for generating <code>UNIQUE</code> constraint on table columns.
p21-1-1-3 = A <code>unique-key</code> attribute can be used to group columns in a single, unique key constraint. The attribute overrides the name of any generated unique key constraint.
p21-1-1-4 = An <code>index</code> attribute specifies the name of an index that will be created using the mapped column or columns. Multiple columns can be grouped into the same index by simply specifying the same index name.
p21-1-1-5 = A <code>foreign-key</code> attribute can be used to override the name of any generated foreign key constraint.
p21-1-1-6 = Many mapping elements also accept a child <code>&lt;column&gt;</code> element. This is particularly useful for mapping multi-column types:
p21-1-1-7 = The <code>default</code> attribute allows you to specify a default value for a column.You should assign the same value to the mapped property before saving a new instance of the mapped class.
p21-1-1-8 = The <code>sql-type</code> attribute allows the user to override the default mapping of a Hibernate type to SQL datatype.
p21-1-1-9 = The <code>check</code> attribute allows you to specify a check constraint.
p21-1-1-10 = The following table summarizes these optional attributes.
p21-1-1-11 = <strong>Table 21.1. Summary</strong>
th21-1-1-1-1 = Attribute
th21-1-1-1-2 = Values
th21-1-1-1-3 = Interpretation
td21-1-1-1-1 = length
td21-1-1-1-2 = number
td21-1-1-1-3 = column length
td21-1-1-1-4 = precision
td21-1-1-1-5 = number
td21-1-1-1-6 = column decimal precision
td21-1-1-1-7 = scale
td21-1-1-1-8 = number
td21-1-1-1-9 = column decimal scale
td21-1-1-1-10 = not-null
td21-1-1-1-11 = true|false
td21-1-1-1-12 = specifies that the column should be non-nullable
td21-1-1-1-13 = unique
td21-1-1-1-14= true|false
td21-1-1-1-15 = specifies that the column should have a unique constraint
td21-1-1-1-16 = index
td21-1-1-1-17 = index_name
td21-1-1-1-18 = specifies the name of a (multi-column) index
td21-1-1-1-19 = unique-key
td21-1-1-1-20 = unique_key_name
td21-1-1-1-21 = specifies the name of a multi-column unique constraint
td21-1-1-1-22 = foreign-key
td21-1-1-1-23 = foreign_key_name
td21-1-1-1-24 = specifies the name of the foreign key constraint generated for an association, for a <code>&lt;one-to-one&gt;</code>, <code>&lt;many-to-one&gt;</code>, <code>&lt;key&gt;</code>, or <code>&lt;many-to-many&gt;</code> mapping element. Note that <code>inverse="true"</code> sides will not be considered by SchemaExport.
td21-1-1-1-25 = sql-type
td21-1-1-1-26 = SQL column type
td21-1-1-1-27 = overrides the default column type (attribute of <code>&lt;column&gt;</code> element only)
td21-1-1-1-28 = default
td21-1-1-1-29 = SQL expression
td21-1-1-1-30 = specify a default value for the column
td21-1-1-1-31 = check
td21-1-1-1-32 = SQL expression
td21-1-1-1-33 = create an SQL check constraint on either column or table
p21-1-1-12 = The <code>&lt;comment&gt;</code> element allows you to specify comments for the generated schema.
p21-1-1-13 = This results in a <code>comment</code> on table or <code>comment</code> on <code>column</code> statement in the generated DDL where supported.

#		**********************************************************************************************************
#		21.1.2. Running the tool
#		**********************************************************************************************************

title21-1-2 = 21.1.2. Running the tool
p21-1-2-1 = The <code>SchemaExport</code> tool writes a DDL script to standard out and/or executes the DDL statements.
p21-1-2-2 = The following table displays the <code>SchemaExport</code> command line options
p21-1-2-3 = <code>java -cp</code> hibernate_classpaths <code>org.hibernate.tool.hbm2ddl.SchemaExport</code> options mapping_files
p21-1-2-4 = <strong>Table 21.2. SchemaExport Command Line Options</strong>
th21-1-2-2-1 = Option
th21-1-2-2-2 = Description
td21-1-2-2-1 = --quiet
td21-1-2-2-2 = do not output the script to stdout
td21-1-2-2-3 = --drop
td21-1-2-2-4 = only drop the tables
td21-1-2-2-5 = --create
td21-1-2-2-6 = only create the tables
td21-1-2-2-7 = --text
td21-1-2-2-8 = do not export to the database
td21-1-2-2-9 = --output=my_schema.ddl
td21-1-2-2-10 = output the ddl script to a file
td21-1-2-2-11 = --naming=eg.MyNamingStrategy
td21-1-2-2-12 = select a NamingStrategy
td21-1-2-2-13 = --config=hibernate.cfg.xml
td21-1-2-2-14 = read Hibernate configuration from an XML file
td21-1-2-2-15 = --properties=hibernate.properties
td21-1-2-2-16 = read database properties from a file
td21-1-2-2-17 = --format
td21-1-2-2-18 = format the generated SQL nicely in the script
td21-1-2-2-19 = --delimiter=;
td21-1-2-2-20 = set an end of line delimiter for the script
p21-1-2-5 = You can even embed <code>SchemaExport</code> in your application:

#		**********************************************************************************************************
#		21.1.3. Properties
#		**********************************************************************************************************

title21-1-3 = 21.1.3. Properties
p21-1-3-1 = Database properties can be specified:
li21-1-3-1-1 = as system properties with <code>-D&lt;property&gt;</code>
li21-1-3-1-2 = in <code>hibernate.properties</code>
li21-1-3-1-3 = in a named properties file with <code>--properties</code>
p21-1-3-2 = The needed properties are:
p21-1-3-3 = <strong>Table 21.3. SchemaExport Connection Properties</strong>
th21-1-3-1-1 = Property Name
th21-1-3-1-2 = Description
td21-1-3-1-1 = hibernate.connection.driver_class
td21-1-3-1-2 = jdbc driver class
td21-1-3-1-3 = hibernate.connection.url
td21-1-3-1-4 = jdbc url
td21-1-3-1-5 = hibernate.connection.username
td21-1-3-1-6 = database user
td21-1-3-1-7 = hibernate.connection.password
td21-1-3-1-8 = user password
td21-1-3-1-9 = hibernate.dialect
td21-1-3-1-10 = dialect

#		**********************************************************************************************************
#		21.1.4. Using Ant
#		**********************************************************************************************************

title21-1-4 = 21.1.4. Using Ant
p21-1-4-1 = You can call <code>SchemaExport</code> from your Ant build script:

#		**********************************************************************************************************
#		21.1.5. Incremental schema updates
#		**********************************************************************************************************

title21-1-5 = 21.1.5. Incremental schema updates
p21-1-5-1 = The <code>SchemaUpdate</code> tool will update an existing schema with "incremental" changes. The <code>SchemaUpdate</code> depends upon the JDBC metadata API and, as such, will not work with all JDBC drivers.
p21-1-5-2 = <code>java -cp</code> hibernate_classpaths <code>org.hibernate.tool.hbm2ddl.SchemaUpdate</code> options mapping_files
p21-1-5-3 = <strong>Table 21.4. SchemaUpdate Command Line Options</strong>
th21-1-5-1-1 = Option
th21-1-5-1-2 = Description
td21-1-5-1-1 = --quiet
td21-1-5-1-2 = do not output the script to stdout
td21-1-5-1-3 = --text
td21-1-5-1-4 = do not export the script to the database
td21-1-5-1-5 = --naming=eg.MyNamingStrategy
td21-1-5-1-6 = select a <code>NamingStrategy</code>
td21-1-5-1-7 = --properties=hibernate.properties
td21-1-5-1-8 = read database properties from a file
td21-1-5-1-9 = --config=hibernate.cfg.xml
td21-1-5-1-10 = specify a .cfg.xml file
p21-1-5-4 = You can embed <code>SchemaUpdate</code> in your application:

#		**********************************************************************************************************
#		21.1.6. Using Ant for incremental schema updates
#		**********************************************************************************************************

title21-1-6 = 21.1.6. Using Ant for incremental schema updates
p21-1-6-1 = You can call <code>SchemaUpdate</code> from the Ant script:

#		**********************************************************************************************************
#		21.1.7. Schema validation
#		**********************************************************************************************************

title21-1-7 = 21.1.7. Schema validation
p21-1-7-1 = The <code>SchemaValidator</code> tool will validate that the existing database schema "matches" your mapping documents. The <code>SchemaValidator</code> depends heavily upon the JDBC metadata API and, as such, will not work with all JDBC drivers. This tool is extremely useful for testing.
p21-1-7-2 = <code>java -cp</code> hibernate_classpaths <code>org.hibernate.tool.hbm2ddl.SchemaValidator</code> options mapping_files
p21-1-7-3 = The following table displays the <code>SchemaValidator</code> command line options:
p21-1-7-4 = <strong>Table 21.5. SchemaValidator Command Line Options</strong>
th21-1-7-1-1 = Option
th21-1-7-1-2 = Description
td21-1-7-1-1 = --naming=eg.MyNamingStrategy
td21-1-7-1-2 = select a <code>NamingStrategy</code>
td21-1-7-1-3 = --properties=hibernate.properties
td21-1-7-1-4 = read database properties from a file
td21-1-7-1-5 = --config=hibernate.cfg.xml
td21-1-7-1-6 = specify a .cfg.xml file
p21-1-7-5 = You can embed <code>SchemaValidator</code> in your application:

#		**********************************************************************************************************
#		21.1.8. Using Ant for schema validation
#		**********************************************************************************************************

title21-1-8 = 21.1.8. Using Ant for schema validation
p21-1-8-1 = You can call <code>SchemaValidator</code> from the Ant script:












