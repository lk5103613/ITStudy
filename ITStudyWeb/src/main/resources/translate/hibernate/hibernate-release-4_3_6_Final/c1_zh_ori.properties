
#		**********************************************************************************************************
#		Chapter 1. Tutorial
#		p1
#		important-content
#		note-content
#		**********************************************************************************************************

title1 = 第一章. 教程
p1 = 针对新用户, 这一章会按照步骤循序渐进的介绍Hibernate, 以一个简单的使用内置数据库的应用程序开头。 这篇教程是以Michael Gloegl早先开发的一篇教程为基础的。 所有的代码都在项目资源的 <code>tutorials/web</code>文件夹下。
import-content = 阅读本篇教程需要一定的Java和SQL知识。 如果你对Java或SQL不是特别了解，建议你先看一些相关知识的资料再来学习Hibernate.
note-content = 这个版本包含了另外一个例子，位置在项目资源的<code>tutorial/eg</code>文件夹下。

#		**********************************************************************************************************
#		1.1. Part 1 - The first Hibernate Application
#		p2
#		note-content2
#		**********************************************************************************************************

title2 = 1.1. 第一部分 - 第一个Hibernate程序
p2 = 对于这个示例, 我们将会建立一个小的数据库应用来存储我们将要参加的活动和这个活动的发起者的信息.
note-content2 = 尽管你可以使用你想用的任何一款数据库，但为了避免描述特定数据库的安装和设置，所以我们选择了HSQLDB（一个将数据存在内存中的Java数据库）

#		**********************************************************************************************************
#		1.1.1. Setup
#		p5
#		tip-content
#		**********************************************************************************************************

title3 = 1.1.1. 安装
p3 = 我们要做的第一件事就是安装开发环境。 我们将会使用被很多人提倡使用的“标准化布局”工具，比如<a href="http://maven.apache.org/">Maven</a>（大概就这意思，不懂的学Maven，学完就懂了）。 Maven, 特别善于描述资源 <a href = "http://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html">布局</a>（就是说Maven很好的意思，不要在意细节。）。 由于我们的例子是一个Web应用， 我们需要创建并将用到 <code>src/main/java</code>, <code>src/main/resources</code> 和 <code>src/main/webapp</code> 这几个文件夹（就是新建一个文件夹，然后再在里面新建这三个目录）。
p4 = 由于Maven先进的传递依赖管理，以及自动创建项目的能力，我们将在这个教程中使用Maven。
tip-content = 使用Maven并不是强制的。 如果你想用其它东西来实现这个教程（比如Ant），布局还是一样的。 唯一的不同是你需要自己找到所有依赖的jar包。 如果你使用一些提供传递依赖管理的工具比如Ivy（不要问，我也不知道是什么东西），你还是可以使用以下提到的依赖。 否则, 你就要自己找到所有的依赖，无论明确依赖还是传递依赖，并切把他们加入到项目的classpath中。 如果要使用Hibernate, 这需要 hibernate3.jar, <code>lib/required</code>文件夹下所有的jar包和<code>lib/bytecode/cglib</code>，<code>lib/bytecode/javassist</code>文件夹下的所有文件；另外，你还需要servlet-api架包和slf4j等。。。<br/><strong>看不懂没关系，这段话的主旨就是   不用Maven后果很严重。。。。</strong>
p5 = 将这些保存成pom.xml文件，并放在项目根目录。

#		**********************************************************************************************************
#		1.1.2. The first class
#		p10
#		**********************************************************************************************************

title4 = 1.1.2. 第一个类
p6 = 接下来, 我们创建一个想要保存到数据库中的类； 这是一个简单的java实体类，只有几个属性而已：
p7 = 这个类使用了Java实体类标准的getter和setter方法，使得私有字段对外可见。 Java推荐这么做，虽然对使用Hibernate而言没有必要。 即使不用getter和setter，Hibernate依然可以直接访问这些私有字段，使用getter和setter的好处在于可以增强重构代码时的鲁棒性。
p8 = 属性id是特定event的唯一标示符。 如果想要使用Hibernate的完整功能，那么所有的持久化实体类（包括不太重要的从属类）都需要一个唯一标示。 实际上, 大多数应用程序, 尤其是web应用, 需要靠唯一标示来区分对象, 所以你应该把这个看做是一个特性而不是一个约束。 然而, 通常我们不会人为改动对象的id，所以id的setter方法应该为private的。只有Hibernate在保存完对象后会使用setter方法。 Hibernate可以直接访问public, private 和 protected的访问器，同样也可以直接访问public, private 和 protected的字段。如何设计可以满足你的程序，决定权最终在你手中。
p9 = 对所有持久化对象来说，必须要有一个没参数的构造函数；Hibernate必须利用反射为你创建一个对象。构造函数可以是private的，然而为了满足运行时代理生成和高效的数据检索需求，必须为package范围内可访问。
p10 = 保存这个文件到<code>src/main/java/org/hibernate/tutorial/domain</code> 文件夹。

#		**********************************************************************************************************
#		1.1.3. The mapping file
#		p21
#		import-content2
#		tip-content3
#		note-content3
#		**********************************************************************************************************

title5 = 1.1.3. 映射文件
p11 = Hibernate需要知道如何加载并存储持久化类(即刚才的Event类)。 这就是Hibernate映射文件扮演的角色。 映射文件告诉Hibernate数据库中哪张表需要访问，表中的哪个列是需要使用的。
p12 = 映射文件的基本结构如下:
p13 = Hibernate DTD是复杂的。 你可以在你的编译器或IDE中使用DTD，使得编译器可以自动填充xml元素以及属性。用txt打开DTD文件是查看所有元素和属性的最简单的方式。 Hibernate不会首先从网络中加载DTD文件，而是先在应用程序的classpath中查找。 DTD文件被包含在hibernate-core.jar文件中。
import-content2 = 在以后的例子中我们将会省略有关于DTD的讲解来缩短代码。当然，这是必须的。
p14 = 在两个hibernate-mapping标签中间，包含一个class元素。 所有的持久化对象需要与数据库中的一张表对应起来：
p15 = 到目前为止，我们已经讲述了Hibernate如何加载并保存<code>Event</code>类到数据库<code>Event</code>表中。每个实例转化为表中的一行。现在我们可以继续将实体类的唯一标示映射成为表的主键。 由于这些主键是没有意义的（就是说我们不会去修改或操作这些主键）， 我们让Hibernate代替我们生成主键:
p16 = 元素id标示它为唯一标示。 <code>name="id"</code>属相声明了Java实体类的属性名并告诉Hibernate使用getId()和setId()来访问字段。 <code>column</code> 属性告诉Hibernate <code>EVENTS</code>表的哪个列是主键。
p17 = 嵌套在最里面的generate元素制定了主键的生成策略（即主键如何生成）。 在这个例子中我们选择了<code>native</code>, 这个方案对于不同的数据库有一定等级的移植性。Hibernate生成id有许多种选择，比如数据库自动生成，全球唯一性id，应用程序指定的id等。同样，你也可以自己写插件扩展你id的生成方式。
tip-content2 = <code>native</code> 在可移植性方面已经不再被认为是最好的策略。以后我们将会在<a href="#c27-4">生成标示符</a>一节讨论到。
p18 = 最后，我们需要告诉Hibernate实体类剩下的字段。默认情况下，没有配置过的字段不会被存入数据库：
p19 = 与id元素相似，name元素告诉Hibernate要使用哪个getter和setter方法。在这个例子中，Hiberate会寻找<code>getDate()</code>, <code>setDate()</code>, <code>getTitle()</code> 和 <code>setTitle()</code>方法。
note-content3 = 为什么date字段中有column属性，而title中却没有呢？如果没有column属性，Hibernate会默认使用字段名作为数据库表的列名。 这在title中有用，然而，data在许多数据库中都是关键字，所以我们需要给它起另外一个名字。
p20 = title字段还少了一个type属性。在映射文件中定义和使用的类型并不是Java的数据类型；它们同样也不是SQL的数据类型。它们被称为<code>Hibernate映射类型</code> , 转换器可以将Java类型转换为SQL数据类型，反之亦然。所以，如果映射文件中没有明确指定Hibernate映射类型，那么Hibernate将会试着选择正确的类型进行转换。在一些情况下自动探测类型转换可能不是我们想要的。正如这个例子中date字段一样。但是Hiberate并不知道应该将<code>java.util.Date</code>转换为SQL数据类型的SQL date, date, timestap还是time。这里将Date映射到一个timestamp转换器上。
tip-content3 = Hibernate将会使用反射进行类型之间的转换。这会需要一些时间，如果应用程序的响应时间对你很重要，那么最好为每个字段都指定一个类型。
p21 = 将这个映射文件保存在 <code>src/main/resources/org/hibernate/tutorial/domain/Event.hbm.xml.</code>

#		**********************************************************************************************************
#		1.1.4. Hibernate configuration
#		p29
#		tip-content4
#		note-content4
#		caution-content
#		**********************************************************************************************************

title6 = 1.1.4. Hibernate 配置
p22 = 这个时候，你应该已经有一个持久化对象（即将要存入数据库中的对象）和一个映射文件在相应的位置。现在是时候配置Hibernate了。首先让我们将HSQLDB运行在“服务器模式”。
note-content4 = 我们这么做是为了在两次运行中间数据仍然能够保存。
p23 = 我们将利用Maven exec插件启动HSQLDB服务器，输入： <code>mvn exec:java -Dexec.mainClass="org.hsqldb.Server" -Dexec.args="-database.0 file:target/data/tutorial"</code> 你将会看到它启动并绑定到一个TCP/IP套接字(socket)；我们的应用程序稍后就会连接到这里。如果你在本教程中想要一个干净的数据库，那么关掉HSQLDB，删除<code>target/data</code>文件夹下的所有文件，然后再次启动HSQLDB.
p24 = Hibernate将会代表你的程序访问数据库， 所以它需要知道如何获得连接。在这个教程中我们会使用一个独立的连接池（而不是<code>javax.sql.DataSoource</code>）。Hibernate附带支持两个第三方开源数据池：c3p0 和 proxool。但是这个教程中我们使用Hibernate内建的数据池。
caution-content = 内建的数据池并不适合产品级应用。 相比较一些较好的连接池，Hibernate内建连接池缺少一些特性。
p25 = 对于Hibernate的配置，我们可以使用一个简单的<code>hibernate.properties</code>文件，一个稍微复杂些的<code>hibernate.properties</code>，或者更加复杂的编程实现。大多数用户更倾向于使用xml配置文件：
note-content5 = 注意这个配置文件指定了一个不同的DTD
p26 = 你配置的Hibernate的<code>SessionFactory</code>。SessionFactory是一个响应指定数据库的全局工厂。如有你有几个数据库，为了方便启动你应该将一些<code>&lt;SessionFactory&gt;</code>放在不同的配置文件中。
p27 = 前四个<code>property</code>元素包含了JDBC连接必要的信息。<code>dialet</code>元素指定了数据库方言。
tip-content4 = 在大多数情况下， Hibernate可以正确决定使用哪种方言。查看第<a href="#c27-3">方言解决方案</a>获得更多信息。
p28 = Hibernate对持久化对象的自动会话管理在这里是十分有用的。 将<code>hbm2ddl.auto</code>选项开启会在数据库中自动创建表格。也可以通过移除此配置选项来关闭它，或者重定向到一个<code>SchemaExport</code>的Ant任务中。 最后，将对应持久化对象的映射文件放入配置中。
p29 = 将这些保存至名为<code>hibernate.cfg.xml</code>的文件，并放入<code>src/main/resources</code>文件夹。

#		**********************************************************************************************************
#		1.1.5. Building with Maven
#		p30
#		tip-content4
#		note-content5
#		caution-content
#		**********************************************************************************************************

title7 = 1.1.5. 使用Maven
p30 = 我们将会使用Maven创建这个教程。希望你的电脑中已经安装好了Maven；你可以从这里下载<a href="http://maven.apache.org/download.cgi">Maven 下载页</a>。Maven将会载入我们之前创建的<code>/pom.xml</code>文件并且知道如何处理基本的项目任务。首先，让我们运行<code>compile</code>来确保我们可以编译我们到目前所做的一切。

#		**********************************************************************************************************
#		1.1.6. Startup and helpers
#		p37
#		tip-content4
#		note-content5
#		caution-content
#		**********************************************************************************************************

title8 = 1.1.6. 启动和辅助
p31 = 是时候加载并存储一些Event对象了，但是首先你必须完成一些基础代码的书写。想要启动Hibernate，你必须创建一个全局的<code>org.hibernate.SessionFactory</code>对象并且将它存储在易于访问的应用程序代码中。 <code>org.hibernate.SessionFactory</code>的作用是用来获得<code>org.hibernate.Session</code>实例（工厂类，大家懂的）。一个<code>org.hibernate.Session</code>代表一个单线程的工作单元。<code>org.hibernate.SessionFactory</code>是线程安全的，只会被实例化一次。
p32 = 我们将会创建一个<code>HibernateUtil</code> 工具类来使得启动和访问<code>org.hibernate.SessionFactory</code>更加的便捷。
p33 = 将这个代码保存为 <code>src/main/java/org/hibernate/tutorial/util/HibernateUtil.java</code>
p34 = 这个类不仅给<code>org.hibernate.SessionFactory</code>提供了全局的静态初始化器；还隐藏了它使用静态单例的事实。我们同样可以在应用服务的JNDI中或者其他地方查找 <code>org.hibernate.SessionFactory</code>引用。
p35 = 如果你在配置中给了<code>org.hibernate.SessionFactory</code>一个名字， 在<code>org.hibernate.SessionFactory</code>创建出来后，Hibernate将会试图用那个名字将它绑定到JNDI。另一个更好的选择是使用JMX部署，并让JMX-capable容器初始化创建一个<code>HibernateService</code>，然后绑定到JNDI。这种高级的方式我们会在稍后讨论。
p36 = 你现在需要配置一个日志系统。Hibernate使用通用的日志并提供两种选择：Log4j和JDK 1.4 logging。更多的开发者更倾向于使用Log4j:从Hibernate文档<code>etc/</code>文件夹中复制 <code>log4j.properties</code>到你的src文件夹，紧邻着<code>hibernate.cfg.xml</code>。如果你想要更多输出信息，可以自己修改配置。默认情况下，只有Hibernate启动信息显示在控制台。
p37 = 本教程的基本框架完成了，现在可以使用Hibernate做些真正的工作。

#		**********************************************************************************************************
#		1.1.7. Loading and storing objects
#		p51
#		tip-content4
#		note-content6
#		caution-content
#		important-content2
#		**********************************************************************************************************

title9 = 1.1.7. 加载和存储对象
p38 = 我们现在准备用Hibernate干点该干的事了。让我们从写一个具有<code>main()</code>方法的<code>EventManager</code>类开始：
p39 = 在<code>createAndStoreEvent()</code>方法中，我们创建了一个新的<code>Event</code>对象并且把它交给了Hibernate处理。这时，Hibernate将会处理SQL并执行插入操作到数据库。
p40 = <code>org.hibernate.Session</code>是设计用来做单一的工作单元。（执行单个原子的工作）。现在我们要保证事情简单，并假设<code>org.hibernate.Session</code>和数据库事务之间是一对一的关系。使用<code/>org.hibernate.Transaction</code> API 使我们的代码和实际的底层事务系统分离。在这个例子中我们使用的是基于JDBC的事务语法，它同样可在JTA运行。
p41 = <code>sessionFactory.getCurrentSession()</code>是做什么的？首先，一旦你获得了你的<code>org.hibernate.SessionFactory</code>，你可以随时随地随意次数的调用这个方法。<code>getCurrentSession()</code>方法总是返回当前的工作单元。 还记得我们在<code>src/main/resources/hibernate.cfg.xml</code>配置文件中把这个配置选项选择为"thread"吗？由于那个设置，当前的工作单元被绑定在当前Java线程中执行。
important-content2 = Hibernate提供了三种方法跟踪的当前session。基于“线程”的方法不用于生产使用;它只是用于这样的原型和教程。当前session跟踪稍后将会详细讨论。
p42 = <code>org.hibernate.Session</code>在第一次调用<code>getCurrentSession()</code>是生命周期开始。然后它被Hibernate绑定到当前线程。当事务结束的时候，不管是提交还是回滚，Hibernate会自动把Session从当前线程剥离，并且关闭它。假若你再次调用getCurrentSession()，你会得到一个新的Session，并且开始一个新的工作单元。这种线程绑定(thread-bound)的编程模型（model）是使用Hibernate的最广泛的方式,因为它支持对你的代码灵活分层(事务划分可以和你的数据访问代码分离开来,在本教程的后面部分就会这么做)。
p43 = 关于工作单元的生命周期，Hibernate <code>org.hibernate.Session</code>应该执行多次数据库操作么？上面的例子使用一个<code>org.hibernate.Session</code>执行一次操作。 然而这是一种理想情况；例子只是没有复杂到需要使用其他方式。Hibernate  <code>org.hibernate.Session</code> 的生命周期是十分灵活的， 但是你不应该把你的应用程序设计成为每一次数据库操作分配一个新的<code>org.hibernate.Session</code>。虽然接下来的例子中都是这样做的，将 "session-per-operation" 看做是一个反面教材。稍后一个真正的web应用将会说明这一点。
p44 = 查看 <a href="#c13">第十三章, 事务和并行</a> 来获取关于事务处理以及事务界定的详细信息。上一个例子也略过了所有错误处理以及事务回滚。
p45 = 要运行这个程序，我们需要使用Maven exec插件来调用我们的类： <code>mvn exec:java -Dexec.mainClass="org.hibernate.tutorial.EventManager" -Dexec.args="store"</code>
note-content6 = 你可能需要先运行<code>mvn compile</code>。
p46 = 因为你之前日志系统的配置，你应该能看到Hibernate的启动以及和许多输出信息。在输出信息的末尾，将会显示下面的信息：
p47 = 这是Hibernate执行的插入操作。
p48 = 为了能够显示存储的events，一个选项被加入到了main方法中：
p49 = 一个新的<code>listEvents()</code>方法也被加了进来：
p50 = 这里，我们使用了Hibernate查询语言(HQL)来载入所有数据库中的<code>Event</code>。Hibernate将会生成合适的SQL，发送给数据库并把获得到的数据填充到<code>Event</code>对象中。你可以使用HQL创建更加复杂的查询。查看 <a href="#c16">第十六章,  HQL: Hibernate查询语言</a>以获取更多信息。
p51 = 现在我们可以调用我们的新方法，再一次使用Maven exec插件：<code>mvn exec:java -Dexec.mainClass="org.hibernate.tutorial.EventManager" -Dexec.args="list"</code>

#		**********************************************************************************************************
#		1.2. 第二部分 - 关联映射
#		p52
#		tip-content4
#		note-content6
#		caution-content
#		important-content2
#		**********************************************************************************************************

title10 = 1.2. 第二部分 - 关联映射
p52 = 目前为止，我们已经将一个持久化对象映射到一个单独的数据表中。让我们稍微的扩展一下并添加一些类之间的关联关系。我们将会在应用中添加<code>person</code>类，并将person参与的所有事件存储起来。

#		**********************************************************************************************************
#		1.2.1. Mapping the Person class
#		p56
#		tip-content4
#		note-content6
#		caution-content
#		important-content2
#		**********************************************************************************************************

title11 = 1.2.1. 映射Person类
p53 = 最简单的Person类是这样的：
p54 = 将它保存在 <code>src/main/java/org/hibernate/tutorial/domain/Person.java</code><br/>下一步，创建一个新的映射文件<code>src/main/resources/org/hibernate/tutorial/domain/Person.hbm.xml</code>。
p55 = 最后，将新的映射添加到Hibernate的配置中：
p56 = 在两个实体类间创建关联关系。人可以参与事件，并且事件拥有参与者。在设计方面你必须解决的问题有： 方向性, 多重性, 以及集合行为。

#		**********************************************************************************************************
#		1.2.2. 基于Set的单向关联
#		p56
#		tip-content4
#		note-content6
#		caution-content
#		important-content2
#		**********************************************************************************************************

title12 = 1.2.2. 基于Set的单向关联
p57 = 在Person类中添加一个event的集合，你可以通过调用<code>Person#getEvents</code>轻易的从一个Person中获取他所参与的事件，而无须去执行一次显示的查询。多个值的关联关系对应到Java中便是它的集合；这里我们选择<code>java.util.Set</code>因为这个集合不会包含重复元素，而且本例子中顺序并不重要：
p58 = 在映射这个关联关系之前，让我们考虑一下另一个方面。我们可以仅保持单向关系，或者如果我们想进行双向查询，我们也可以在Event类中也加入一个集合。从功能上考虑，这不是必要的。你可以每次都执行显示查询来获得事件的参与者。如何设计将由你决定，但是这次讨论中关于多重性是很清楚的：两边都是“多”值的我们叫做多对多关联关系。于是，我们使用Hibernate的多对多(<code>&lt;many-to-manyy&gt;</code>)映射：
p59 = Hibernate支持许多集合的映射，<code>set</code>是最常用的。对于一个多对多关联关系，或者n对m的对象关系，一个中间表是必须的。在这张中间表中，每一行都是一个person和event之间的关联。表名由set标签的table属性决定。关联关系中的主键名，对Person来说，由<code>key</code>元素决定，而在event这边，由<code>many-to-many</code>属性定义。同时你也必须告诉Hibernate你集合中对象的类（即关联另一端集合的类）。
p60 = 因此映射数据表的结构是：

#		**********************************************************************************************************
#		1.2.3. Working the association
#		p67
#		tip-content4
#		note-content6
#		caution-content
#		important-content2
#		**********************************************************************************************************

title13 = 1.2.3. 使关联工作
p61 = 现在我们将在<code>EventManager</code>中添加一个新方法，这个方法将涉及一些People和一个Event：
p62 = 在加载了一个<code>Person</code>和一个<code>Event</code>之后，只需要简单的使用集合类的方法修改集合。没有显示的调用<code>update()</code>或者<code>save()</code>；Hibernate自动探测出集合发生了改变并需要更新。这叫做自动脏数据检查(automatic dirty checking)。你也可以尝试修改对象的名字或者日期或者任意参数。只要它们是在持久化状态（与Hibernate的<code>org.hibernate.Session</code>绑定),Hibernate会监视任何改变并在后台隐式执行SQL。将内存中的数据同步到数据库中这个过程，通常只在单元工作结束的时候发生，叫做刷新。在我们的代码中，单元工作以commit或者rollback结尾。
p63 = 你可以从不同的单元工作中载入person和event。或者你可以在<code>org.hibernate.Session</code>之外修改一个对象，当它不在持久化状态时（如果它之前被持久化，这个状态叫做脱管）。你甚至可以在一个集合脱管时修改它:
p64 = 调用<code>update()</code>方法使得一个脱管的对象重新变为持久化状态，它会重新绑定一个单元工作，所以在脱管状态下任何的修改都可以被更新并保存到数据库。这也包括你对集合或对象做的任何操作（添加/删除）。
p65 = 这在我们的例子中并不十分有用，但是这是一个十分重要的概念，你可以将它加入到你的项目中。在<code>EventManager</code>的<code>main</code>方法中添加一个新动作并在命令行中调用它，这个练习就算是完成了。如果你需要<code>Person</code>或者<code>Event</code>的id，那么就用<code>save()</code>方法返回那个对象（你可能需要修改一些之前的方法来返回id）。
p66 = 这是一个例子，例子中的两个类具有同等重要的关联关系：两个实体类。正如之前所说的，在特定的模型中也存在其它的类和类型，这些类和类型通常是“次要的”。一些你已经见到过的，比如<code>int</code>或者<code>java.lang.String</code>。我们称这些类为值类型，并且它们的实例依赖于一个特定的实体。这些类型没有它们的id，也不会在实体之间共享。两个Person不会引用同一个firstname对象，即使它们的firstname是相同的。值类型不仅仅存在于JDK,你完全可以书写自己的依赖类，比如<code>Address</code>或者<code>MonetaryAmount</code>。事实上，Hibernate认为所有的JDK类型都是值类型。
p67 = 你同样可以设计一个值类型的集合。这和其他实体的集合在概念上有很大的不同，但是在Java中看上去差不多。

#		**********************************************************************************************************
#		1.2.4. Collection of values
#		p74
#		tip-content4
#		note-content6
#		caution-content
#		important-content2
#		**********************************************************************************************************

title14 = 1.2.4. 值的集合
p68 = 让我们在<code>Person</code>实体中添加一个<code>email</code>的集合。这个集合是<code>Set&lt;String&gt;</code>:
p69 = 这个Set的映射如下：
p70 = 与之前的映射相比不同之处在于element元素，它使得Hibernate知道这个集合没有引用其他实体的，而是一个值类型的集合，在这里指的是<code>String</code>。在映射中使用小写的意思是告诉你它是一个Hibernate映射类型或转换器。同样的<code>set</code>元素的table属性指的是这个集合的数据库表名。<code>key</code>元素定义了在集合表中的外键列。<code>element</code>元素的column属性定义email地址被真正存放的列名。
p71 = 这是一个更新过后的图表：
p72 = 你会看到集合表实际上是用所有的列作为它的复合主键。这也意味着一个人不能有重复的email地址，这也正是我们使用<code>set</code>集合的原因。
p73 = 你现在可以试着在这个集合中添加几个元素，正如我们之前关联<code>person</code>和<code>event</code>一样。Java代码也是一样的：
p74 = 这次我们没有使用fetch查询来初始化集合。监视SQL日志并试图通过预先抓取来优化它。

#		**********************************************************************************************************
#		1.2.5. Bi-directional associations
#		p74
#		tip-content4
#		note-content7
#		caution-content
#		important-content2
#		**********************************************************************************************************

title15 = 1.2.5. 双向关联
p75 = 下面你将要映射一个双向关联。你将要使得<code>Person</code>和<code>Event</code>可以从任意一端访问另一端。数据库图表并没有改变，所以我们还是多对多。
note-content7 = 一个关系型数据库远比网络编程语言灵活的多，在编程语言中不需要考虑方向性；数据可以由任何一种方式进行访问和获取。
p76 = 首先，在<code>Event</code>中添加一个<code>participants</code>集合：
p77 = 现在在<code>Event.hbm.xml</code>书写映射关系。
p78 = 这些都是常见的映射配置。注意在两个映射文件中，<code>key</code>和<code>many-to-many</code>中的列名互换了。最重要的是Event的集合映射中新增了一个<code>inverse="true"</code>属性。
p79 = 它的意思是当Hibenrate需要两者之间的关联关系时，它应该关注另外一段，在这里是<code>Person</code>端，这将会极大地帮助你理解双向关联是如何在两个实体间被创建的。

#		**********************************************************************************************************
#		1.2.6. Working bi-directional links
#		p79
#		tip-content4
#		note-content7
#		caution-content
#		important-content2
#		**********************************************************************************************************

title16 = 1.2.6. 使双向关联工作
p80 = 首先，牢记在心Hibernate并不影响Java的语义。在单向的例子中我们是如何创建<Person>和<Event>之间的关联的？你在Person的event的集合中添加了一个Event的实例。如果你想让这个关联关系变成双向的，你必须要在另一端做同样的事，也就是在Event的person集合中添加一个person的实例。这个操作是绝对需要做的。
p81 = 许多开发人员为了保证关联双方的数据一致性而创建了关联管理方法(例如在<code>Person</code>中的<code>addToEvent</code>和<code>removeFromEvent</code>方法):
p82 = 集合的get 和set方法是protected的. 这保证在相同包中的类和其子类还可以访问这个方法，但是阻止了任何其他的人来直接的修改这个集合。在集合的另一端执行重复的操作。
p83 = 什么是映射反转属性呢？ 对你或者对Java而言一个双向链接是简单的在两端设置的正确的引用。 然而Hibernate并没有足够的信息来正确的执行<code>INSERT</code> 和 <code>UPDATE</code> 语句 (用来避免违反数据库约束)。 把关联的一端设置inverse将会告诉Hibernate忽略关联的这一端，把这一端看成是另外一端的镜像。这就是所需的全部信息， Hibernate利用这些信息来处理把一个有向导航模型转移到数据库schema时所用的问题。 要记住这个规则: 所有的双向关联都需要一端被设置为inverse的. 在一个 one-to-many 关联中他必须是代表多的那段,而在many-to-many关联中你可以任意选择一端，因为两端之间没有差别。

#		**********************************************************************************************************
#		1.3. Part 3 - The EventManager web application
#		p84
#		tip-content4
#		note-content7
#		caution-content
#		important-content2
#		**********************************************************************************************************

title17 = 1.3. 第三部分 - EventManager web 应用程序
p84 = HibernateWeb 应用程序使用 <code>Session</code> 和 <code>Transaction</code> 的方式几乎和独立用用程序是一样的。然而, 有一些常用的模式非常有用. 现在编写一个 EventManagerServlet. 这个servlet可以列出数据库中保存的所有events, 并且提供了一个HTML表单来新增events.

#		**********************************************************************************************************
#		1.3.1. Writing the basic servlet
#		p90
#		tip-content4
#		note-content7
#		caution-content
#		important-content2
#		**********************************************************************************************************

title18 = 1.3.1. 编写基本的 servlet
p85 = 首先我们需要创建基本的处理servlet。因为我们的servlet只处理 HTTP <code>GET</code> 请求, 我们只需要实现 doGet() 方法:
p86 = servlet保存为 <code>src/main/java/org/hibernate/tutorial/web/EventManagerServlet.java</code>
p87 = 这里使用的模式是 <code>session-per-request</code>。 当向这个servlet发送请求, 通过第一次调用SessionFactory的<code>getCurrentSession()</code>方法来打开一个新的Hibernate Session。然后开启一个数据库事务。 不管是读还是写所有的数据操作都是在一个事务中。在应用中都不要使用自动提交模式。
p88 = 不要为每一个数据库操作都开启一个新的<code>Hibernate Session</code>. 在整个请求范围内只使用一个<code>Session</code>. 使用 <code>getCurrentSession()</code>, 他会自动绑定到当前的Java线程.
p89 = 下面, 处理请求 并渲染响应的HTML。我们很快就会接触那部分。
p90 = 最后, 当请求处理和渲染完成时，这个工作单元结束. 如果在响应和渲染的过程中出现任何的问题, 将会抛出异常并且数据库事务回滚。 这样就完成了<code>session-per-request</code> 模式. 代替在每个Servlet中划分事务, 你应该写一个Servlet过滤器。查看Hibernate网站和维基百科来获取开放式图会话的更多信息. 你很快会需要它，如果你想使用JSP而不是Servlet来渲染视图的话

#		**********************************************************************************************************
#		1.3.2. Processing and rendering
#		p95
#		tip-content4
#		note-content7
#		caution-content
#		important-content2
#		**********************************************************************************************************

title19 = 1.3.2. 处理和渲染
p91 = 现在你可以实现请求的处理和页面的渲染。
p92 = 混合Java和HTML的这种编码风格, 在更复杂的应用中我们不会使用；记住，在这个教程中我们只介绍基本的Hibernate的概念. 由代码打印HTML的页眉和页脚。在这个页面中, 打印了一个Event实体的表单和所有从数据库中查询的events列表。 第一个方法很简单，只是为了输出html:
p93 = <code>listEvents()</code> 方法将Hibernate Session绑定到当前的线程来执行查询操作:
p94 = 最后, 保存的操作由<code>createAndStoreEvent()</code> 方法执行, 也使用了当前线程的Session:
p95 = 这个Servlet完成了. 对于Servlet的请求将会由单个的<code>Session</code>和<code>Transaction</code>处理. 早在单独的应用中, Hibernate可以自动绑定这些对象到当前的线程中执行。这就给了你自由来给代码分层和按照你喜欢的方式使用<code>SessionFactory</code>. 通常情况下你会使用更复杂的设计并且将操作数据的代码放到数据访问对象(DAO 模式)中. 查看Hibernate wiki获取更多示例。
#		**********************************************************************************************************
#		1.3.3. Deploying and testing
#		p91
#		tip-content4
#		note-content8
#		caution-content
#		important-content2
#		**********************************************************************************************************

title20 = 1.3.3. 部署和测试
p96 = 想要部署这个应用用于测试，我们必须创建一个Web ARchive (WAR). 首先我们必须在<code>src/main/webapp/WEB-INF/web.xml</code>中定义WAR描述符。
p97 = 在项目目录中使用mvn package命令来创建和部署应用并且复制hibernate-tutorial.war文件到Tomcat webapps 目录。
note-content8 = 如果没有安装tomcat, 从<a href="http://tomcat.apache.org/">http://tomcat.apache.org/</a>下载并且参考安装说明进行安装。我们的应用不需要修改Tomcat的配置。
p98 = 部署成功后启动tomcat, 通过 <code>http://localhost:8080/hibernate-tutorial/eventmanager</code>访问这个应用. 当第一个请求访问Servlet时请确保在Tomcatlog中看到Hibernate的初始化（在HibernateUtil中静态初始化）并且在产生异常时获取更详细的信息。

#		**********************************************************************************************************
#		1.4. Summary
#		p98
#		tip-content4
#		note-content8
#		caution-content
#		important-content2
#		**********************************************************************************************************

title21 = 1.4. 总结
p99 = 这个教程介绍了编写一个简单的单独的Hibernate应用程序和一个小的web应用的基本知识。更多的教程查看Hibernate <a href="http://hibernate.org/">网站</a>.
