
#		**********************************************************************************************************
#		Chapter 4. Persistent Classes
#		**********************************************************************************************************

title4 = 第四章. 持久化类
p4-1 = 在应用程序中实现了业务问题实体的类就是持久化类(e.g. 在电子商务应用中的Customer 和 Order). "持久"这个词在次数的意思是类是可以被持久化的, 而不是说他们在持久化状态(参考 <a href="#c11-1">Section 11.1, “Hibernate对象状态”</a> ).
p4-2 = 如果这些持久化类遵循一些简单的规则，Hibernate能够表现良好, 这些规则也被称作 简单传统Java对象(POJO:Plain Old Java Object)编程模型. 然而，这些规则并不是硬性需求. 实际上, Hibernate3对于你的持久化类几乎不做任何设想。你可以用其他的方法来表达领域模型(比如，使用java.util.Map 实例的树形结构).

#		**********************************************************************************************************
#		4.1. A simple POJO example
#		**********************************************************************************************************

title4-1 = 4.1. 一个简单的POJO例子
p4-1-1 = 我们将会在下面的章节中详细的描述持久化类的四个重要规则。

#		**********************************************************************************************************
#		4.1.1. Implement a no-argument constructor
#		**********************************************************************************************************

title4-1-1 = 4.1.1. 实现一个无参构造方法
p4-1-1-1 = <code>Cat</code>类有一个无参的构造方法。所以的持久化类必须有一个默认的构造器（可以不是public的），这样的话Hibernate就可以使用反射来实例化它们(<code>java.lang.reflect.Constructor.newInstance()</code>). 我们强烈建议，在Hibernate中，为了运行期代理的生成，构造方法至少是 包(package)内可见的。

#		**********************************************************************************************************
#		4.1.2. Provide an identifier property
#		**********************************************************************************************************

title4-1-2 = 4.1.2. 提供一个唯一标示属性
nc4-1-2-1 = 推荐这样做. 但是到现在都没有强制要求, 这一条将会弃用，因为在将来的版本中将会强制要求提供一个唯一标示属性。
p4-1-2-1 = <code>Cat</code> 有一个id属性.这个属性对应底层数据库中的主键列. 标示符的类型可以是任意的“基本”数据类型 (参考 <a href="#c4-1-2">4.1.2. 提供一个表示属性</a>). 参考 <a href="#c9-4">Section 9.4 联合标示主键</a> 查看联合标示符的更多信息.
nc4-1-2-2 = 不需要在数据表中单独为主键创建一个列，他们只要是可以唯一的标示这行数据在基本表中的唯一性即可。
p4-1-2-2 = 我们推荐在持久化类中使用命名一致的标示属性并且可以把它定义为一个可以为Null的类型 (i.e., 非原始数据类型).

#		**********************************************************************************************************
#		4.1.3. Prefer non-final classes (semi-optional)
#		**********************************************************************************************************

title4-1-3 = 4.1.3. 推荐使用非final的类（可选）
p4-1-3-1 = 代理（proxies）是Hibernate的一个重要的功能，它依赖的条件是，持久 化类或者是非final的，或者是实现了一个所有方法都声明为public的接口。 你可以用Hibernate持久化一个没有实现任何接口的final类，但是你 不能使用代理来延迟关联加载，这会限制你进行性能优化的选择。 如果要持久化一个只实现了一个接口部分方法的类， 你必须禁用代理。 参考 <a href="#persistent-classes-pojo-final-example-disable-proxies-xml">Example 4.2 hbm.xml中禁用代理</a> 和 <a href="#persistent-classes-pojo-final-example-disable-proxies-xml">Example 4.3 使用注解禁用代理</a>.
p4-1-3-2 = 如果一个final类实现了一个接口的全部方法, 你可以选择在产生代理的时候直接使用该接口。参考<a href="#persistent-classes-pojo-final-example-proxy-interface-xml">Example 4.4 在hbm.xml中使用代理接口</a> and <a href="#persistent-classes-pojo-final-example-proxy-interface-xml">Example 4.5 在注解中使用代理接口</a>.
p4-1-3-3 = 应该避免声明public final 方法，否则将会限制你使用该类来产生代理。 如果你想要使用一个带有public final方法的类， 你必须明确的禁止使用代理。参考 <a href="#persistent-classes-pojo-final-example-disable-proxies-xml">Example 4.2 在hbm.xml中禁用代理</a> and <a href="#persistent-classes-pojo-final-example-disable-proxies-xml">Example 4.3 使用注解禁用代理</a>.

#		**********************************************************************************************************
#		4.1.4. Declare accessors and mutators for persistent fields (optional)
#		**********************************************************************************************************

title4-1-4 = 4.1.4. 为持久化字段声明访问器(accessors)和是否可变的标志(mutators)(可选)
p4-1-4-1 = Cat 类为他的每一个持久化字段都声明了存取方法。许多其他的ORM工具直接持久化实例变量。我们相信，在关系数据库schema和类的内部数据结构之间引入间接层(原文为"非直接"，indirection)会好一些。 默认情况下Hibernate持久化JavaBeans风格的属性，认可 getFoo，isFoo 和 setFoo这种形式的方法名。如果需要，你可以对某些特定属性实行直接字段访问。
p4-1-4-2 = 属性不需要要声明为public的。Hibernate可以一样持久化可见性为package，protected， 或者private的字段。

#		**********************************************************************************************************
#		4.2. Implementing inheritance
#		**********************************************************************************************************

title4-2 = 4.2. 实现继承
p4-2-1 = 子类也必须遵守第一条和第二条规则。它从超类Cat继承了标识属性。

#		**********************************************************************************************************
#		4.3. Implementing equals() and hashCode()
#		**********************************************************************************************************

title4-3 = 4.3. 实现 <code>equals()</code> 和 <code>hashCode()</code>方法
p4-3-1 = 你必须覆写<code>equals()</code> 和 <code>hashCode()</code>方法如果你想：
li4-3-1 = 想把持久类的实例放入Set中（当表示多值关联时，推荐这么做）; 并且
li4-3-2 = 想重用脱管实例
p4-3-2 = Hibernate保证，仅在特定会话范围内，持久化标识（数据库的行）和Java标识是等价的。因此，一旦 我们混合了从不同会话中获取的实例，如果希望Set有明确的语义，就必 须实现<code>equals()</code> 和<code>hashCode()</code>。
p4-3-3 = 实现 <code>equals()</code>/<code>hashCode()</code>最显而易见的方法是比较两个对象标识符的值. 如果值相同，则两个对象对应于数据库的同一行, 因为它们是相等的. 如果都被添加到 Set，则在Set中只有一个元素.不幸的是，对生成的标识不能 使用这种方法。Hibernate仅对那些持久化对象赋标识值，一个新创建的实例将不会有任何标识值。此外， 如果一个实例没有被保存(unsaved)并且它当前正在一个Set中, 保存它将会给这个对象赋一个标识值。 如果 <code>equals()</code> 和 <code>hashCode()</code>基于标示符实现的, 则其哈希码将会改变，这违反了Set的规则。建议去Hibernate的站点阅读关于这个 问题的全部讨论。注意，这不是Hibernate的问题，而是一般的Java对象标识和Java对象等价的语义问题。
p4-3-4 = 我们建议使用业务键值相等(Business key equality)来实现equals() 和 hashCode()。 业务键值相等的意思是，equals()方法 仅仅比较形成业务键的属性，它能在现实世界里标识我们的实例（是一个自然的候选码）。
p4-3-5 = 业务键不必像数据库的主键那样固定不变(see <a href="#c13-1-3">Section 13.1.3 关注对象标示符</a>)。对业务键而言，不可变或唯一的属性是不错的选择。

#		**********************************************************************************************************
#		4.4. Dynamic models
#		**********************************************************************************************************

title4-4 = 4.4. 动态模型
nc4-4-1 = 以下特性在当前处于试验阶段，将来可能会有变化。
p4-4-1 = 在运行期，持久化实体没有必要一定表示为像POJO类或JavaBean对象那样的形式，Hibernate也支持动态模型 （在运行期使用Map的Map）。使用这种方法，你不需要写持久化类，只需要映射文件即可。
p4-4-2 = Hibernate默认工作在普通POJO模式。你可以使用配置选项default_entity_mode， 对特定的SessionFactory，设置一个默认的实体表示模式 。(参考<a href="#tb3-4-1">Table 3.3 Hibernate 配置属性</a>).
p4-4-3 = 下面的示例演示了使用MapS表示模型. 首先， 在映射文件中需要声明entity-name来替换类名，或者除了类名之外还要声明entity-name:
p4-4-4 = 虽然是用目标类名来声明关联的，但是关联的目标类型除了是POJO之外，也可以 是一个动态的实体。
p4-4-5 = 在使用dynamic-map为SessionFactory 设置了默认的实体模式之后，可以在运行期使用Map的 Map:
p4-4-6 = 动态映射的好处是，变化所需要的时间少了，因为原型不需要实现实体类。然而，你无法进行 编译期的类型检查，并可能由此会处理很多的运行期异常。幸亏有了Hibernate映射，它使得数 据库的schema能容易的规格化和合理化,并允许稍后在此之上添加合适的领域模型实现。
p4-4-7 = 实体表示模式也能在每个<code>Session</code>的基础上设置：:
p4-4-8 = 请注意，用EntityMode调用<code>getSession()</code>是在 Session的API中，而不是SessionFactory。这样，新的Session共享底层的JDBC连接、事务、和其他的上下文信息。 这意味着，你不需要在第二个Session中调用 <code>flush()</code> 和 <code>close()</code> , 同样的，把事务和连接的处理 交给原来的工作单元。

#		**********************************************************************************************************
#		4.5. Tuplizers
#		**********************************************************************************************************

title4-5 = 4.5. 元组片断映射
p4-5-1 = <code>org.hibernate.tuple.Tuplizer</code> 以及其子接口负责根据给定的org.hibernate.EntityMode，来复现片断数据。 如果给定的片断数据被认为其是一种数据结构， "tuplizer"就是一个知道如何创建这样的数据结构, 以及如何给这个数据结构赋值的东西。例如，对于POJO这种实体模式，对应的tuplizer知道通过其构造方法来创建一个POJO，再通过其属性访问器来访问POJO属性。
p4-5-2 = 有两大类高层Tuplizer：
li4-5-1 = <code>org.hibernate.tuple.entity.EntityTuplizer</code> 负责管理上面提到的实体的契约。
li4-5-2 = <code>org.hibernate.tuple.component.ComponentTuplizer</code> 则是针对组件的。
p4-5-3 = 用户也可以插入其自定义的tuplizer。或许您需要一种不同于dynamic-map entity-mode中使用的java.util.HashMap的java.util.Map实现。 或许您需要与默认策略不同的代理生成策略。通过自定义tuplizer实现，这两个目标您都可以达到。Tuplizer定义被附加到它们期望管理的entity或者component映射中。回到Customer实体示例， <a href="#example-specify-custom-tuplizer-ann">Example 4.6 在注解中指定自定义元组片段映射</a> 展示了如何使用注解来指定一个自定义的<code>org.hibernate.tuple.entity.EntityTuplizer</code> ，而 <a href="#example-specify-custom-tuplizer-xml">Example 4.7 在hbm.xml中指定元组片段映射</a> 表明同样可以使用 <code>hbm.xml</code>实现

#		**********************************************************************************************************
#		4.6. EntityNameResolvers
#		**********************************************************************************************************

title4-6 = 4.6. EntityNameResolvers
p4-6-1 = <code>org.hibernate.EntityNameResolver</code> 用来解析一个给实例的的实体名。 这个接口仅仅定义了resolveEntityName 方法，传入实体的实例并且返回预期的实体名(允许返回null以表明这个解析器不知道怎样解析给定实例的实体名). 总的来说, org.hibernate.EntityNameResolver在动态模型中非常的有用. 可以使用代理接口作为域模型的例子. 在org.hibernate.test.dynamicentity.tuplizer2中Hibernate测试套件提供了具体使用的示例. 为了说明，仅仅列举出测试包中的部分代码。
p4-6-2 = 要想注册一个 <code>org.hibernate.EntityNameResolver</code> ，用户必须:
li4-6-1 = 实现自定义的tuplizer (参考 <a href="#c4-5">Section 4.5 元组片段映射</a>), 实现getEntityNameResolvers 方法
li4-6-2 = 使用<code>org.hibernate.impl.SessionFactoryImpl</code> (<code>org.hibernate.SessionFactory</code>的实现类) 的registerEntityNameResolver 方法注册.















