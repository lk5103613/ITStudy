
#		**********************************************************************************************************
#		Chapter 7. Collection mapping
#		**********************************************************************************************************

title7 = 第七章. 集合映射

#		**********************************************************************************************************
#		7.1. Persistent collections
#		**********************************************************************************************************

title7-1 = 7.1. 持久化集合
p7-1-1 = 一般情况下Hibernate都允许持久化集合。被持久化的集合几乎可以包含所有的Hibernate类型，包括：基础类型， 自定义类型， 组件和其他实体的引用。在本章中值和引用语义的区别是十分重要的。一个集合中的对象可能是值类型的（它的生命周期完全由集合决定），或者也可以是另一个实体的引用，这样的对象拥有自己的生命周期。对于后者而言，只有两个对象之间的“关联”才被认作集合的状态。
p7-1-2 =Hibernate要求持久化集合值字段必须声明为接口 (查看 <a href="#example.collection.mapping.annotations">Example 7.2, \u201CCollection mapping</code> using <code>@OneToMany</code> and <code>@JoinColumn\u201D</code></a>). 实际的接口可能是 <code>java.util.Set</code>, <code>java.util.Collection</code>, <code>java.util.List</code>, <code>java.util.Map</code>, <code>java.util.SortedSet</code>, <code>java.util.SortedMap</code> 或者任何你喜欢的类型（“任何你喜欢的类型”的意思是你必须创建一个实现了<code>org.hibernate.usertype.UserCollectionType</code>的类）。
p7-1-3 = 注意在<a href="#example.collection.mapping.annotations">Example 7.2, \u201CCollection mapping using @OneToMany and @JoinColumn\u201D</a>中是如何用<code>HashSet</code>实例来初始化实例变量的。这是用于初始化新创建(尚未持久化)的类实例中集合值属性的最佳方法。当你用<code>persist()</code>方法持久化这个实例的时候，Hibernate实际上会将HashSet的实例替换成Hibernate自己的Set实例。当心以下错误：
p7-1-4 = 根据不同的接口类型，被Hibernate注射的持久化集合类的表现类似<code>HashMap</code>, <code>HashSet</code>, <code>TreeMap</code>, <code>TreeSet</code> 或者 <code>ArrayList</code>。
p7-1-5 = 集合实例有着与值类型相同的行为。当被持久化对象引用时他们会自动被持久化，当不被引用后会自动删除。如果一个持久化对象将集合传给了另一个持久化对象，它的元素可能从一张表传递到另一个。两个实体不能共享同一个集合类实例的引用。由于底层关系模型的原因，集合值属性不支持null语义。Hibernate无法区分null集合和一个空集合。
nc7-1-1 = 使用持久化集合与使用普通Java集合是一样的。但是你要理解双向关联的语义。（查看 <a href="#c7-3-2">Section 7.3.2, \u201CBidirectional associations\u201D</a>）。

#		**********************************************************************************************************
#		7.2. How to map collections
#		**********************************************************************************************************

title7-2 = 7.2. 怎样映射集合
p7-2-1 = 你可以使用注解的方式映射集合， <code>Lists</code>, <code>Maps</code> 和 <code>Sets</code>可以用<code>@OneToMany</code> and <code>@ManyToMany</code>进行映射。对于基本值类型的集合和内嵌类型使用<code>@ElementCollection</code>。在最简单的情况下，集合映射看起来是这样的：
p7-2-2 = <code>Product</code>使用关联列<code>PART_ID</code>描述了与<code>Part</code>类的单向关系。在这种单向一对多的语义中你还可以使用一个联系表 <a href="#example-one-to-many-with-join-table">Example 7.3, \u201CCollection mapping using @OneToMany and @JoinTable\u201D</a>。
p7-2-3 = 在没有指定<code>@JoinColumn</code> 或者 <code>@JoinTable</code>的情况下，Hibernate将会使用单向一对多的数据表。表名将会形如：“拥有者表名_另一边的表名”。拥有者表引用的外键名称形如：“拥有者表_拥有者表主键列名”。另一边引用的外键名称形如：“拥有者字段名_另一边的主键列名”。A unique constraint is added to the foreign key referencing the other side table to reflect the one to many.
p7-2-4 = 现在我们来看看如何用映射文件来映射集合。在这个例子中第一步就是选择正确的映射元素。这由接口的类型决定。比如，<code>&lt;set&gt;</code>元素用来映射<code>Set</code>类型。
p7-2-5 = 在<a href="#example.collections.set">Example 7.4, \u201CMapping a Set using &lt;set&gt;\u201D</a>中一个一对多关联关系将<code>Product</code>和<code>Part</code>联系起来。这种关联关系需要在Part表中存在一个外键，也可能需要一个索引。这个映射相对普通Java集合失去了一些特定的语义：
li7-2-1-1 = 一个包含了实体类的实例不能属于多于一个的集合实例。
li7-2-1-2 = 一个包含了实体类的实例不能出现多于一个集合索引的值。
p7-2-6 = 让我们更详细的看一下<code>&lt;one-to-many&gt;</code>标签，它有一下属性。
td7-2-1-1 = <code>class</code> (必选): 关联的类名称。
td7-2-1-2 = <code>not-found</code> (可选 - 默认为exception): 指定外键引用的数据不存在时如何处理： ignore会将行数据不存在视为一个空（null）关联。
td7-2-1-3 = <code>entity-name</code> (可选): 关联类的实体名称，可是看做类的替代。
p7-2-7 = <code>&lt;one-to-many&gt;</code>元素不需要定义每一列。也不需要导出定义表名。
wc7-2-1 =  如果<code>&lt;one-to-many&gt;</code>关联关系的外键列被定义为非空，你必须为<code>&lt;key&gt;</code>映射<code>not-null="true"</code>，或者对双向关联的集合标记<code>inverse="true"</code>。查看<a href="#c7-3-2">Section 7.3.2, \u201CBidirectional associations\u201D</a>。
p7-2-8 = 除了例子<a href="#example-one-to-many-with-join-table">Example 7.4, \u201CMapping a Set using <set>\u201D</a>中使用的<code>&lt;set&gt;</code>标签之外，还可以使用<code>&lt;list&gt;</code>, <code>&lt;map&gt;</code>, <code>&lt;bag&gt;</code>, <code>&lt;array&gt;</code> 和 <code>&lt;primitive-array&gt;</code>映射元素。<code>&lt;map&gt;</code>最具代表性：
td7-2-2-1 = <code>name</code>: 集合属性名称
td7-2-2-2 = <code>table</code> (可选 - 默认为属性名称): 集合表的名称。它不能在一对多关联中使用。
td7-2-2-3 = <code>schema</code> (可选): 表的schema的名称, 他将覆盖在根元素中定义的schema
td7-2-2-4 = <code>lazy</code> (可选 - 默认为true):  可以用来关闭延迟加载(false)，指定一直使用预先抓取,或者打开"extra-lazy" 抓取，此时大多数操作不会初始化集合类，这个操作适合用于非常大的集合。
td7-2-2-5 = <code>inverse</code> (可选 - 默认为false): 标记这个集合作为双向关联关系中的方向一端。
td7-2-2-6 = <code>cascade</code> (可选 - 默认为none): 让操作级联到子实体。
td7-2-2-7 = <code>sort</code> (可选): 指定集合的排列顺序, 其可以为自然的(natural)或者给定一个用来比较的类。
td7-2-2-8 = <code>order-by</code> (可选): 指定表的字段加上asc或者desc(可选), 定义Map,Set和Bag的迭代顺序。
td7-2-2-9 = <code>where</code> (可选): 指定任意的SQL where条件, 该条件将在重新载入或者删除这个集合时使用，当集合中的数据仅仅是所有可用数据的一个子集时这个条件非常有用。
td7-2-2-10 = <code>fetch</code> (可选, 默认为select): 用于在外连接抓取、通过后续select抓取和通过后续subselect抓取之间选择。
td7-2-2-11 = <code>batch-size</code> (可选, 默认为1): 指定通过延迟加载取得集合实例的批处理块大小（"batch size"）。
td7-2-2-12 = <code>access</code> (可选 - 默认为property): Hibernate用来访问集合属性值的策略。
td7-2-2-13 = <code>optimistic-lock</code> (可选 - 默认为true): 指定当集合状态改变时是否增长实体的版本。对于一对多关联你可能想要关掉它。
td7-2-2-14 = <code>mutable</code> (可选 - 默认为true): 如果值为false则说明集合中的元素值不会发生改变。在一些情况下可以优化性能。
p7-2-9 = 在浏览完基础集合映射之后，我们要集中精力来学习映射注意事项，索引映射以及值类型映射。

#		**********************************************************************************************************
#		7.2.1. Collection foreign keys
#		**********************************************************************************************************

title7-2-1 = 7.2.1. 集合外键
p7-2-1-1 = 在数据库中，集合实例由持有集合的实体的外键辨别。这个外键被当做集合关键列加以引用。集合关键列通过<code>@JoinColumn</code>注解或者<code>&lt;key&gt;</code>元素进行映射。
p7-2-1-2 = 在外键列上可以有非空约束。对于大多数集合来说，这是隐含的。对单向一对多关联来说，外键默认是可以为空的，因此你可能需要这样指定
p7-2-1-3 = 或者
p7-2-1-4 = 外键约束可以使用<code>ON DELETE CASCADE</code>。在XML中可以这样表示：
p7-2-1-5 = 使用注解时Hibernate指定<code>@OnDelete</code>必须被使用。
p7-2-1-6 = 查看 <a href="#c5-1-11-3">Section 5.1.11.3, \u201CKey\u201D</a> 来获取更多关于 <code>&lt;key&gt;</code>元素的信息。

#		**********************************************************************************************************
#		7.2.2. Indexed collections
#		**********************************************************************************************************

title7-2-2 = 7.2.2. 集合索引
p7-2-2-1 = 接下来的章节中我们会详细的探讨索引集合 <code>List</code>和<code>Map</code>如何将他们的索引映射到Hibernate中。

#		**********************************************************************************************************
#		7.2.2.1. Lists
#		**********************************************************************************************************

title7-2-2-1 = 7.2.2.1. Lists
p7-2-2-1-1 = Lists映射有两种不同的方式：
li7-2-2-1-1-1 = 作为有序集合，它的顺序不会体现在数据库中
li7-2-2-1-1-2 = 作为索引集合，它的顺序体现在数据库中
p7-2-2-1-2 = 想要在内存中对集合进行排序，在你的属性上添加<code>@javax.persistence.OrderBy</code>。这个注解会把集合转化为以逗号分隔开的一列，然后按照你的注解进行排序（比如名称，年龄，体重等），如果给定的字符串为空，那么集合会按照目标主键进行排序。
p7-2-2-1-3 = 要想将索引信息存入特定的列，在属性上使用注解<code>@javax.persistence.OrderColumn</code>。这个注解描述了保存索引值的列的列名和属性。这个列由包含外键的表拥有。如果没有指定列名，那么默认的名称是被指定的属性名，加上_，加上ORDER（在下面的例子中，它将会是orders_ORDER）。
nc7-2-2-1-1 = 我们建议你将残留的 <code>@org.hibernate.annotations.IndexColumn</code>转换为JPA标准的<code>@javax.persistence.OrderColumn</code>。<br/>如果你正在使用一个自定义list index base（可能当前使用的而是<code>org.hibernate.annotations.IndexColumn.literal</code>属性），你可以结合使用<code>@org.hibernate.annotations.ListIndexBase</code>和<code>@javax.persistence.OrderColumn</code>来指定。在Java中base的默认值为0。
p7-2-2-1-4 = 再看一下Hibernate映射文件的组成，数组或集合的索引总是<code>integer</code>类型的并且都是使用<code>&lt;list-index&gt;</code>来映射。被映射的列包含的顺序值默认是从0开始的。
td7-2-2-1-1-1 = <code>column_name</code> (必须): 持有集合索引值的列的名称。
td7-2-2-1-1-2 = <code>base</code> (可选 - 默认为0): 索引列第一个元素的值。
p7-2-2-1-5 = 如果你的表中没有一个索引列，并且你依然希望使用<code>List</code>作为属性值，你可以在属性上添加一个Hibernate <code>&lt;bag&gt;</code>。从数据库获取到信息时<code>bag</code>并不保留顺序信息，但是它可以自定义顺序。

#		**********************************************************************************************************
#		7.2.2.2. Maps
#		**********************************************************************************************************

title7-2-2-2 = 7.2.2.2. Maps
p7-2-2-2-1 = Maps 存在的问题是如何存储键值，这里有几种解决方案。Maps可以引用一个关联实体的属性作为键值，也可以有一个专门的列来存储明确的键值。
p7-2-2-2-2 = 使用<code>@MapKey</code>(name="myProperty"),指定目标实体的一个属性作为map的键值， myProperty 是目标实体的一个属性名。 当使用 @MapKey 但是没用给定name属性时，则默认使用目标实体的主键。map的键值和属性指向相同的列。没用定义额外的列来存储map的key。因为map的key代表了一个目标属性。需要注意的是，一旦加载之后，map的key和目标实体的属性不在同步。换句话说，如果你修改了属性的值，在Java模型中key不会自动的修改。
p7-2-2-2-3 = 另一种方式是map的key被应射成一个或多个列。可以使用以下几个注解来自定义映射:
li7-2-2-2-1-1 = <code>@MapKeyColumn</code> 如果map的key是基本类型。如果没有指定列名, 属性名加下划线加上KEY(例如 <code>orders_KEY</code>)。
li7-2-2-2-1-2 = <code>@MapKeyEnumerated / @MapKeyTemporal</code> 如果map的key是枚举或者Date类型。
li7-2-2-2-1-3 = <code>@MapKeyJoinColumn/@MapKeyJoinColumns</code> 如果map的key是别的实体。
li7-2-2-2-1-4 = <code>@AttributeOverride/@AttributeOverrides</code> 当map的key是可嵌入对象时。在可嵌入对象的属性名前添加key前缀。
p7-2-2-2-4 = 如果你不想使用泛型，你也可以使用<code>@MapKeyClass</code>来定义key的类型。
nc7-2-2-2-1-1 = 我们推荐你使用以上的方式来代替 <code>@org.hibernate.annotations.MapKey</code> / <code>@org.hibernate.annotation.MapKeyManyToMany</code>
p7-2-2-2-5 = 使用Hibernate映射文件盒使用注解时等价的。你需要使用<code>&lt;map-key&gt;</code>, <code>&lt;map-key-many-to-many&gt;</code> 和 <code>&lt;composite-map-key&gt;</code>。 <code>&lt;map-key&gt;</code> 用于基本类型，<code>&lt;map-key-many-to-many&gt;</code> 用于实体应用，<code>&lt;composite-map-key&gt;</code> 用于组件类型。
td7-2-2-2-1-1 = <code>column</code> (可选): 保存集合索引值的列。 
td7-2-2-2-1-2 = <code>formula</code> (可选): 用于产生map的key的SQL 语句。
td7-2-2-2-1-3 = <code>type</code> (必须的): map 的key的类型。
td7-2-2-2-2-1 = <code>column</code> (可选): 集合索引值的外键列名。 
td7-2-2-2-2-2 = <code>formula</code> (可选): 用于计算map的key的外键的一个SQL表达式。
td7-2-2-2-2-3 = <code>class</code> (必须): 用于map的key的实体类。

#		**********************************************************************************************************
#		7.2.3. Collections of basic types and embeddable objects
#		**********************************************************************************************************

title7-2-3 = 7.2.3. 基础类型和可嵌入对象的集合
p7-2-3-1 = 在某些情况下，你不需要关联两个实体，只需要使用<code>@ElementCollection</code>来简单的创建一个基本类型的或者可嵌入对象类型的集合。
p7-2-3-2 = 在保存几何数据的集合表上使用<code>@CollectionTable</code> 注解。如果省略了集合表的名字，则默认使用所包含实体的类名和集合属性名使用下划线结合产生的名字。在我们的例子中是User_nicknames。
p7-2-3-3 = 使用<code>@Column</code>注解来标注基本类型的列。如果没有设置，默认为属性名：在我们的示例中是nicknames。
p7-2-3-4 = 但是不仅仅局限于基本类型，集合类型可以是任何的可嵌入对象。要想在集合表中覆写可嵌入兑现改的列，需要使用<code>@AttributeOverride</code> 注解。
p7-2-3-5 = 这样的可嵌入对象不能包含集合本身。
nc7-2-3-1 = 在 <code>@AttributeOverride</code>中, 你必须使用value前缀来覆写在map的value中使用的可嵌入对象的属性，并且使用key前缀来覆写在map中作为key的可嵌入对象的属性。
nc7-2-3-2 = 我们推荐使用<code>@ElementCollection</code>注解来代替<code>@org.hibernate.annotations.CollectionOfElements</code> 注解。
p7-2-3-6 = 如果使用映射文件的方法，集合使用<code>&lt;element&gt;</code>来映射。例如：
td7-2-3-1-1 = <code>column</code> (可选): 保存了集合元素值的列的名字。 
td7-2-3-1-2 = <code>formula</code> (可选): 一个 SQL 表达式，用于计算元素。
td7-2-3-1-3 = <code>type</code> (必须): 集合元素的类型。

#		**********************************************************************************************************
#		7.3. Advanced collection mappings
#		**********************************************************************************************************

title7-3 = 7.3. 高级的集合映射

#		**********************************************************************************************************
#		7.3.1. Sorted collections
#		**********************************************************************************************************

title7-3-1 = 7.3.1. 有序集合
p7-3-1-1 = Hibernate 支持集合实现<code>java.util.SortedMap</code> 和 <code>java.util.SortedSet</code>接口。可以使用<code>@Sort</code>注解来指定一个比较器。你可以在unsorted, natural 或者 custom中来选择比较器的类型。如果你想使用自己实现的比较器，你需要使用comparator 属性来指定实现类。注意，你需要使用 SortedSet 或者 SortedMap 接口。
p7-3-1-2 = 在Hibernate映射文件中使用<code>&lt;sort&gt;</code>来指定一个比较器:
p7-3-1-3 = sort 属性的值可以是unsorted, natural 和<code>java.util.Comparator</code>的实现类。
tc7-3-1-1 = 排序集合通常表现为 <code>java.util.TreeSet</code> 或 <code>java.util.TreeMap</code>。
p7-3-1-4 = 如果你希望数据库自己来给集合元素排序，给set或者bag或者map映射使用 order-by属性,这种解决方案可以使用inkedHashSet 或 LinkedHashMap来实现，这样排序就会在数据库查询时执行，而不是在内存中。
nc7-3-1-1 = order-by 属性的值是SQL 排序不是 HQL 排序。
p7-3-1-5 = 使用集合的 <code>filter()</code>可以让关联在运行时按照任何的规则排序：

#		**********************************************************************************************************
#		7.3.2. Bidirectional associations
#		**********************************************************************************************************

title7-3-2 = 7.3.2. 双向关联
p7-3-2-1 = 双向关联允许通过关联的任意一端访问另外一端。有两种类型的双向关联:
dd7-3-2-1-1 = set 或者 bag 值在一端，单独值子啊另外一端 
dd7-3-2-1-2 = 两端都是set 或者 bag 值
p7-3-2-2 = 通常在一个多对一个双向关联中，谁是关联的拥有者。对应的一对多关联使用<code>@OneToMany(mappedBy=...)</code>注解。
p7-3-2-3 = <code>Troop</code> 通过troop 属性和Solider有一个一对多的关联。在mappedBy一端你不是必须要定义一个物理映射。
p7-3-2-4 = 要映射一个双向的一对多，把<code>one-to-many</code> 端作为关联的拥有者时，你需要一除掉mappedBy 元素并且设置多对一 <code>@JoinColumn</code>的 insertable 和 updatable 为false。这种方案不会得到什么明显的优化并且还会增加一些额外的<code>UPDATE</code> 语句。
p7-3-2-5 = 在Hibernate映射文件中怎样配置双向映射呢？通过把一个一对多关联，作为一个多对一关联映射到同一张表的字段上，并且在“多”的那一端定义<code>inverse="true"</code>。
p7-3-2-6 = 在一的一段定义<code>inverse="true"</code> 不会影响级联操作，二者是正交的概念。
p7-3-2-7 = 一个many-to-many 关联使用 @ManyToMany 注解定义。 你也需要使用 @JoinTable注解来描述关联表和链接条件。如果是双向关联，其中一端必须是关联的拥有者，而另一端必须使用inverse(ie. 当在关联表中修改关系值时将会被忽略):
p7-3-2-8 = 在这个例子中<code>@JoinTable</code> 定义了一个name, 一个链接列的数组，和一个反转链接列的数组。后者是关联表中指向Employee 主键的列( "另一端")。正如前面看到的，另外一端不是必须要定义物理映射：一个简单的包含拥有者一端的属性名的mappedBy 参数，来绑定两者。
p7-3-2-9 = 像其他的注解，多数值都会存在多对多的关系。试用以下规则，不需要在单向多对多中定义任何的物理关联。表明是关系拥有者的表明, _ 和另外一端的表名的组合。引用关系拥有者的表外键名又拥有者的表名, _ 和拥有者主键列名。引用另外一端的外键名由拥有者的属性名， _,和另外一端的主键列组成。对于单向的一对多关系也有同样的规则。
p7-3-2-10 = <code>Store_City</code> 作为连接表. <code>Store_id</code> 列是Store表的外键。<code>implantedIn_id</code> 列是City表的外键。
p7-3-2-11 = 不需要定义任何的物理映射，在双向的多对多关联中遵循以下规则。表名由关系拥有者的表名，_和另外一端的表名组成，引用拥有者的外键名字由另外一端的属性名，_和关系持有者的主键列组成。引用另外一端的外键名由关系持有者的属性名，_和另外一端的主键列组成。对于单项的一对多也遵循同样的规则。
p7-3-2-12 = <code>Store_Customer</code> 作为连接表。<code>stores_id</code> 列是Store 表的外键。<code>customers_id</code> 列是Customer表的外键。
p7-3-2-13 = 在Hibernate映射文件中，可以通过将两个多对多映射到同一张数据表并且在其中一端设置inverse来实现双向多对多关联。 
nc7-3-2-1 = 你不能选择一个索引集合。
p7-3-2-14 = <a href="##example-many-to-many-mapping-file">Example 7.27, \u201C使用Hibernate映射文件实现多对多关联\u201D</a> 演示了一个双向关联，展示了每个category 可以有多个item而每个item可以在多个category中。
p7-3-2-15 = 只需要把关联的inverse端修改为不是可持久化的。这意味着针对每一个双向关联，Hibernate在内存中有两个实现：一个链接是从A到B，另外一个是从B到A。这就很容易理解Java对象模型和怎样在Java中创建多对多的关联：
p7-3-2-16 = non-inverse端用于把内存表示保存到数据库。

#		**********************************************************************************************************
#		7.3.3. Bidirectional associations with indexed collections
#		**********************************************************************************************************

title7-3-3 = 7.3.3. 索引集合的双向关联
p7-3-3-1 = 当使用Hibernate映射文件映射索引集合的双向关联时需要考虑更多的内容 (当一端是 <code>&lt;list&gt;</code> 或者 <code>&lt;map&gt;</code>)。如果子类有一个属性，并且这个属性映射到索引列，你可以在集合映射中使用<code>inverse="true"</code> :
p7-3-3-2 = 如果子类中没有这种属性，那么这个关联不是严格意义上的双向。这就是说,有些属性在其中一端是可以访问的但是在另外一端不能被访问到。在这种情况下，你不能把集合映射为inverse="true"。你可以使用以下的方式来映射：
p7-3-3-3 = 在这个映射中要注意，集合值的一端负责更新外键。

#		**********************************************************************************************************
#		7.3.4. Ternary associations
#		**********************************************************************************************************

title7-3-4 = 7.3.4. 三重关联
p7-3-4-1 = 有三种可能的途径来映射一个三重关联。第一种是使用一个Map，把其中一个关联作为其索引:
p7-3-4-2 = 第二种方式是简单的把关联重新建模为一个实体类，这是我们最经常使用的方法。最后一种是使用组合元素，我们将会在后面讨论。

#		**********************************************************************************************************
#		7.3.5. Using an <idbag>
#		**********************************************************************************************************

title7-3-5 = 7.3.5. 使用&lt;idbag&gt;
p7-3-5-1 = 前面看到的大多数的多对多关联和值集合都是映射成为带有联合主键的表的。尽管有人建议实体应该使用组合标示符（代理标示符）。 看上去一个单纯的关联表并不能从代表标示符中获得什么好处（虽然使用组合值的集合可能会获得一点好处）出于这个原因，Hibernate提供了一个功能，让你把多对多关联和值集合映射到一个使用代理标示符的表中。
p7-3-5-2 = <code>&lt;idbag&gt;</code> 元素让你使用bag语义来映射一个List(或者一个collection),例如:
p7-3-5-3 =  <code>&lt;idbag&gt;</code> 有一个i人工的id生成器，就像一个实体类一样。为不同的集合行分配不同的代理键。然而，Hibernate没有提供任何机制来获取一个特定的行的代理键的值。
p7-3-5-4 =  <code>&lt;idbag&gt;</code>的更新性能优于常规的 <code>&lt;bag&gt;</code>。Hibernate可以有效的找到某个单独的行并且可以更新和删除它们，类似于list, map和set。
p7-3-5-5 = 在目前的实现中，还不支持使用identifier标示符生成器策略来生成 <code>&lt;idbag&gt;</code>集合的标示符。

#		**********************************************************************************************************
#		7.4. Collection examples
#		**********************************************************************************************************

title7-4 = 7.4. 集合实例
p7-4-1 = 本章我们讨论集合的例子。
p7-4-2 = 下面的类里有一个Child实例的集合：
p7-4-3 = 如果每个子实例至多有一个父实例，那么最自然的映射是一个一对多的映射：
p7-4-4 = 在以下的表定义中反映了这个映射关系：
p7-4-5 = 如果父类是必须的，那么就可以使用双向一对多的关联了：
p7-4-6 = 注意<code>NOT NULL</code> 约束:
p7-4-7 = 另外,如果你绝对坚持这个关联应该是单向的，你可以对key映射声明 <code>NOT NULL</code> 约束。
p7-4-8 = 另一方面，如果一个子类可以有多个父类，那么就应该使用 many-to-many 关联。
p7-4-9 = 表定义:
p7-4-10 = 更多的例子，以及一个完整的父/子关系映射参考 <a href="#c23">Chapter 23, Example: Parent/Child</a> 。 在后面的章节中甚至可能出现更加复杂的关系映射。




















