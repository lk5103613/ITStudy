th1 = Property name
th2 = Purpose
th3 = RDBMS
th4 = Dialect
th5 = Category
th6 = Function
th7 = Transaction Factory
th8 = Application Server
#		**********************************************************************************************************
#		Chapter 3. Configuration
#		**********************************************************************************************************

title3 = Chapter 3. Configuration
p3-1 = Hibernate is designed to operate in many different environments and, as such, there is a broad range of configuration parameters. Fortunately, most have sensible default values and Hibernate is distributed with an example hibernate.properties file in etc/ that displays the various options. Simply put the example file in your classpath and customize it to suit your needs.

#		**********************************************************************************************************
#		3.1. Programmatic configuration
#		**********************************************************************************************************

title3-1 = 3.1. Programmatic configuration
p3-1-1 = An instance of <code>org.hibernate.cfg.Configuration</code> represents an entire set of mappings of an application's Java types to an SQL database. The <code>org.hibernate.cfg.Configuration</code> is used to build an immutable <code>org.hibernate.SessionFactory</code>. The mappings are compiled from various XML mapping files.
p3-1-2 = You can obtain a <code>org.hibernate.cfg.Configuration</code> instance by instantiating it directly and specifying XML mapping documents. If the mapping files are in the classpath, use <code>addResource()</code>. For example:
p3-1-3 = An alternative way is to specify the mapped class and allow Hibernate to find the mapping document for you:
p3-1-4 = Hibernate will then search for mapping files named <code>/org/hibernate/auction/Item.hbm.xml</code> and <code>/org/hibernate/auction/Bid.hbm.xml</code> in the classpath. This approach eliminates any hardcoded filenames.
p3-1-5 = A <code>org.hibernate.cfg.Configuration</code> also allows you to specify configuration properties. For example:
p3-1-6 = This is not the only way to pass configuration properties to Hibernate. Some alternative options include:
li3-1-1 = Pass an instance of <code>java.util.Properties</code> to <code>Configuration.setProperties()</code>.
li3-1-2 = Place a file named hibernate.properties in a root directory of the classpath.
li3-1-3 = Set <code>System</code> properties using <code>java -Dproperty=value</code>.
li3-1-4 = Include <code>&lt;property&gt;</code> elements in <code>hibernate.cfg.xml</code> (this is discussed later).
p3-1-7 = If you want to get started <code>quicklyhibernate.properties</code> is the easiest approach.
p3-1-8 = The <code>org.hibernate.cfg.Configuration</code> is intended as a startup-time object that will be discarded once a SessionFactory is created.

#		**********************************************************************************************************
#		3.2. Obtaining a SessionFactory
#		**********************************************************************************************************

title3-2 = 3.2. Obtaining a SessionFactory
p3-2-1 = When all mappings have been parsed by the <code>org.hibernate.cfg.Configuration</code>, the application must obtain a factory for <code>org.hibernate.Session</code> instances. This factory is intended to be shared by all application threads:
p3-2-2 = Hibernate does allow your application to instantiate more than one org.hibernate.SessionFactory. This is useful if you are using more than one database.

#		**********************************************************************************************************
#		3.3. JDBC connections
#		**********************************************************************************************************

title3-3 = 3.3. JDBC connections
p3-3-1 = It is advisable to have the org.hibernate.SessionFactory create and pool JDBC connections for you. If you take this approach, opening a org.hibernate.Session is as simple as:
p3-3-2 = Once you start a task that requires access to the database, a JDBC connection will be obtained from the pool.
p3-3-3 = Before you can do this, you first need to pass some JDBC connection properties to Hibernate. All Hibernate property names and semantics are defined on the class <code>org.hibernate.cfg.Environment</code>. The most important settings for JDBC connection configuration are outlined below.
p3-3-4 = Hibernate will obtain and pool connections using <code>java.sql.DriverManager</code> if you set the following properties:
tb3-3-1 = Table 3.1. Hibernate JDBC Properties
td3-3-1 = JDBC driver class
td3-3-2 = JDBC URL
td3-3-3 = database user
td3-3-4 = database user password
td3-3-5 = maximum number of pooled connections
p3-3-5 = Hibernate's own connection pooling algorithm is, however, quite rudimentary. It is intended to help you get started and is not intended for use in a production system, or even for performance testing. You should use a third party pool for best performance and stability. Just replace the <code>hibernate.connection.pool_size</code> property with connection pool specific settings. This will turn off Hibernate's internal pool. For example, you might like to use c3p0.
p3-3-6 = C3P0 is an open source JDBC connection pool distributed along with Hibernate in the lib directory. Hibernate will use its org.hibernate.connection.C3P0ConnectionProvider for connection pooling if you set <code>hibernate.c3p0.*</code> properties. If you would like to use Proxool, refer to the packaged hibernate.properties and the Hibernate web site for more information.
p3-3-7 = The following is an example hibernate.properties file for c3p0:
p3-3-8 = For use inside an application server, you should almost always configure Hibernate to obtain connections from an application server javax.sql.Datasource registered in JNDI. You will need to set at least one of the following properties:
tb3-3-2 = Table 3.2. Hibernate Datasource Properties
td3-3-6 = datasource JNDI name
td3-3-7 = URL of the JNDI provider (optional)
td3-3-8 = class of the JNDI InitialContextFactory (optional)
td3-3-9 = database user (optional)
td3-3-10 = database user password (optional)
p3-3-9 = Here is an example <code>hibernate.properties</code> file for an application server provided JNDI datasource:
p3-3-10 = JDBC connections obtained from a JNDI datasource will automatically participate in the container-managed transactions of the application server.
p3-3-11 = Arbitrary connection properties can be given by prepending "hibernate.connection" to the connection property name. For example, you can specify a charSet connection property using <code>hibernate.connection.charSet</code>.
p3-3-12 = You can define your own plugin strategy for obtaining JDBC connections by implementing the interface org.hibernate.connection.ConnectionProvider, and specifying your custom implementation via the <code>hibernate.connection.provider_class</code> property.

#		**********************************************************************************************************
#		3.4. Optional configuration properties
#		**********************************************************************************************************

title3-4 = 3.4. Optional configuration properties
p3-4-1 = There are a number of other properties that control the behavior of Hibernate at runtime. All are optional and have reasonable default values.
wc3-4-1 = Some of these properties are "system-level" only. System-level properties can be set only via java -Dproperty=value or hibernate.properties. They cannot be set by the other techniques described above.
tb3-4-1 = Table 3.3. Hibernate Configuration Properties
td3-4-1 = The classname of a Hibernate <code>org.hibernate.dialect.Dialect</code> which allows Hibernate to generate SQL optimized for a particular relational database.<br/><strong>e.g.</strong> full.classname.of.Dialect<br/><br/>In most cases Hibernate will actually be able to choose the correct <code>org.hibernate.dialect.Dialect</code> implementation based on the JDBC metadata returned by the JDBC driver.
td3-4-2 = Write all SQL statements to console. This is an alternative to setting the log category org.hibernate.SQL to debug.<br/><strong>e.g.</strong> true | false
td3-4-3 = Pretty print the SQL in the log and console. <strong>e.g.</strong> true | false
td3-4-4 = Qualify unqualified table names with the given schema/tablespace in generated SQL. <strong>e.g.</strong> SCHEMA_NAME
td3-4-5 = Qualifies unqualified table names with the given catalog in generated SQL. <strong>e.g.</strong> CATALOG_NAME
td3-4-6 = The org.hibernate.SessionFactory will be automatically bound to this name in JNDI after it has been created.<br/><strong>e.g.</strong> jndi/composite/name
td3-4-7 = Sets a maximum "depth" for the outer join fetch tree for single-ended associations (one-to-one, many-to-one). A 0 disables default outer join fetching.<br/><strong>e.g.</strong> recommended values between 0 and 3
td3-4-8 = Sets a default size for Hibernate batch fetching of associations. <strong>e.g.</strong> recommended values 4, 8, 16
td3-4-9 = Sets a default mode for entity representation for all sessions opened from this SessionFactory, defaults to pojo.<br/><strong>e.g.</strong> dynamic-map | pojo
td3-4-10 = Forces Hibernate to order SQL updates by the primary key value of the items being updated. This will result in fewer transaction deadlocks in highly concurrent systems. <strong>e.g.</strong> true | false
td3-4-11 = If enabled, Hibernate will collect statistics useful for performance tuning. <strong>e.g.</strong> true | false
td3-4-12 = If enabled, generated identifier properties will be reset to default values when objects are deleted. <strong>e.g.</strong> true | false
td3-4-13 = If turned on, Hibernate will generate comments inside the SQL, for easier debugging, defaults to false.<br/><strong>e.g.</strong> true | false
td3-4-14 = Setting is relevant when using @GeneratedValue. It indicates whether or not the new IdentifierGenerator implementations are used for javax.persistence.GenerationType.AUTO, javax.persistence.GenerationType.TABLE and javax.persistence.GenerationType.SEQUENCE. Default to false to keep backward compatibility.<br/><strong>e.g.</strong> true | false
nc-3-4-1 = We recommend all new projects which make use of to use @GeneratedValue to also set hibernate.id.new_generator_mappings=true as the new generators are more efficient and closer to the JPA 2 specification semantic. However they are not backward compatible with existing databases (if a sequence or a table is used for id generation).
tb3-4-2 = Table 3.4. Hibernate JDBC and Connection Properties
td3-4-15 = A non-zero value determines the JDBC fetch size (calls Statement.setFetchSize()).
td3-4-16 = A non-zero value enables use of JDBC2 batch updates by Hibernate. e.g. recommended values between 5 and 30
td3-4-17 = Set this property to true if your JDBC driver returns correct row counts from executeBatch(). It is usually safe to turn this option on. Hibernate will then use batched DML for automatically versioned data. Defaults to false.<br/><strong>e.g.</strong> true | false
td3-4-18 = Select a custom org.hibernate.jdbc.Batcher. Most applications will not need this configuration property.<br/><strong>e.g.</strong> classname.of.BatcherFactory
td3-4-19 = Enables use of JDBC2 scrollable resultsets by Hibernate. This property is only necessary when using user-supplied JDBC connections. Hibernate uses connection metadata otherwise. <strong>e.g.</strong> true | false
td3-4-20 = Use streams when writing/reading binary or serializable types to/from JDBC. *system-level property*<br/><strong>e.g.</strong> true | false
td3-4-21 = Enables use of JDBC3 PreparedStatement.getGeneratedKeys() to retrieve natively generated keys after insert. Requires JDBC3+ driver and JRE1.4+, set to false if your driver has problems with the Hibernate identifier generators. By default, it tries to determine the driver capabilities using connection metadata.<br/><strong>e.g.</strong> true|false
td3-4-22 = The classname of a custom org.hibernate.connection.ConnectionProvider which provides JDBC connections to Hibernate.<br/><strong>e.g.</strong> classname.of.ConnectionProvider
td3-4-23 = Sets the JDBC transaction isolation level. Check java.sql.Connection for meaningful values, but note that most databases do not support all isolation levels and some define additional, non-standard isolations.<br/><strong>e.g.</strong> 1, 2, 4, 8
td3-4-24 = Enables autocommit for JDBC pooled connections (it is not recommended). <strong>e.g.</strong> true | false
td3-4-25 = Specifies when Hibernate should release JDBC connections. By default, a JDBC connection is held until the session is explicitly closed or disconnected. For an application server JTA datasource, use after_statement to aggressively release connections after every JDBC call. For a non-JTA connection, it often makes sense to release the connection at the end of each transaction, by using after_transaction. auto will choose after_statement for the JTA and CMT transaction strategies and after_transaction for the JDBC transaction strategy.<br/><strong>e.g.</strong> auto (default) | on_close | after_transaction | after_statement<br/><br/>This setting only affects Sessions returned from SessionFactory.openSession. For Sessions obtained through SessionFactory.getCurrentSession, the CurrentSessionContext implementation configured for use controls the connection release mode for those Sessions. See Section 2.2, \u201CContextual sessions\u201D
td3-4-26 = Pass the JDBC property <propertyName> to DriverManager.getConnection().
td3-4-27 = Pass the property <propertyName> to the JNDI InitialContextFactory.
tb3-4-3 = Table 3.5. Hibernate Cache Properties
td3-4-28 = The classname of a custom CacheProvider.<br/><strong>e.g.</strong> classname.of.CacheProvider
td3-4-29 = Optimizes second-level cache operation to minimize writes, at the cost of more frequent reads. This setting is most useful for clustered caches and, in Hibernate, is enabled by default for clustered cache implementations. <strong>e.g.</strong> true|false
td3-4-30 = Enables the query cache. Individual queries still have to be set cachable. <strong>e.g.</strong> true|false
td3-4-31 = Can be used to completely disable the second level cache, which is enabled by default for classes which specify a <cache> mapping.<br/><strong>e.g.</strong> true|false
td3-4-32 = The classname of a custom QueryCache interface, defaults to the built-in StandardQueryCache.<br/><strong>e.g.</strong> classname.of.QueryCache
td3-4-33 = A prefix to use for second-level cache region names. <strong>e.g.</strong> prefix
td3-4-34 = Forces Hibernate to store data in the second-level cache in a more human-friendly format. <strong>e.g.</strong> true|false
td3-4-35 = Enables the automatic eviction of a bi-directional association's collection cache when an element in the ManyToOne collection is added/updated/removed without properly managing the change on the OneToMany side. <strong>e.g.</strong> true|false (default: false)
td3-4-36 = Setting used to give the name of the default org.hibernate.annotations.CacheConcurrencyStrategy to use when either @Cacheable or @Cache is used. @Cache(strategy="..") is used to override this default.
tb3-4-4 = Table 3.6. Hibernate Transaction Properties
td3-4-37 = The classname of a TransactionFactory to use with Hibernate Transaction API (defaults to JDBCTransactionFactory).<br/><strong>e.g.</strong> classname.of.TransactionFactory
td3-4-38 = A JNDI name used by JTATransactionFactory to obtain the JTA UserTransaction from the application server.<br/><strong>e.g.</strong> jndi/composite/name
td3-4-39 = The classname of a TransactionManagerLookup. It is required when JVM-level caching is enabled or when using hilo generator in a JTA environment.<br/><strong>e.g.</strong> classname.of.TransactionManagerLookup
td3-4-40 = If enabled, the session will be automatically flushed during the before completion phase of the transaction. Built-in and automatic session context management is preferred, see Section 2.2, \u201CContextual sessions\u201D.<br/><strong>e.g.</strong> true | false
td3-4-41 = If enabled, the session will be automatically closed during the after completion phase of the transaction. Built-in and automatic session context management is preferred, see Section 2.2, \u201CContextual sessions\u201D.<br/><strong>e.g.</strong> true | false
tb3-4-5 = Table 3.7. Miscellaneous Properties
td3-4-42 = Supply a custom strategy for the scoping of the "current" Session. See <a href="#c2-2">Section 2.2, \u201CContextual sessions\u201D</a> for more information about the built-in strategies.<br/><strong>e.g.</strong> jta | thread | managed | custom.Class
td3-4-43 = Chooses the HQL parser implementation. e.g. org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory or org.hibernate.hql.internal.classic.ClassicQueryTranslatorFactory
td3-4-44 = Is used to map from tokens in Hibernate queries to SQL tokens (tokens might be function or literal names, for example). e.g. hqlLiteral=SQL_LITERAL, hqlFunction=SQLFUNC
td3-4-45 = Automatically validates or exports schema DDL to the database when the SessionFactory is created. With create-drop, the database schema will be dropped when the SessionFactory is closed explicitly.<br/><strong>e.g.</strong> validate | update | create | create-drop
td3-4-46 = Comma-separated names of the optional files containing SQL DML statements executed during the SessionFactory creation. This is useful for testing or demoing: by adding INSERT statements for example you can populate your database with a minimal set of data when it is deployed.<br/>File order matters, the statements of a give file are executed before the statements of the following files. These statements are only executed if the schema is created ie if hibernate.hbm2ddl.auto is set to create or create-drop.<br/><br/><strong>e.g.</strong> /humans.sql,/dogs.sql
td3-4-47 = The classname of a custom ImportSqlCommandExtractor (defaults to the built-in SingleLineSqlCommandExtractor). This is useful for implementing dedicated parser that extracts single SQL statements from each import file. Hibernate provides also MultipleLinesSqlCommandExtractor which supports instructions/comments and quoted strings spread over multiple lines (mandatory semicolon at the end of each statement).<br/><strong>e.g.</strong> classname.of.ImportSqlCommandExtractor
td3-4-48 = Enables the use of bytecode manipulation instead of runtime reflection. This is a System-level property and cannot be set in hibernate.cfg.xml. Reflection can sometimes be useful when troubleshooting. Hibernate always requires javassist even if you turn off the optimizer.<br/><strong>e.g.</strong> true | false
td3-4-49 = At the moment, javassist is the only supported bytecode provider.<br/><strong>e.g.</strong> javassist

#		**********************************************************************************************************
#		3.4.1. SQL Dialects
#		**********************************************************************************************************

title3-4-1 = 3.4.1. SQL Dialects
p3-4-1-1 = Always set the hibernate.dialect property to the correct org.hibernate.dialect.Dialect subclass for your database. If you specify a dialect, Hibernate will use sensible defaults for some of the other properties listed above. This means that you will not have to specify them manually.
tb3-4-1-1 = Table 3.8. Hibernate SQL Dialects (hibernate.dialect)

#		**********************************************************************************************************
#		3.4.2. Outer Join Fetching
#		**********************************************************************************************************

title3-4-2 = 3.4.2. Outer Join Fetching
p3-4-2-1 = If your database supports ANSI, Oracle or Sybase style outer joins, outer join fetching will often increase performance by limiting the number of round trips to and from the database. This is, however, at the cost of possibly more work performed by the database itself. Outer join fetching allows a whole graph of objects connected by many-to-one, one-to-many, many-to-many and one-to-one associations to be retrieved in a single SQL SELECT.
p3-4-2-2 = Outer join fetching can be disabled globally by setting the property hibernate.max_fetch_depth to 0. A setting of 1 or higher enables outer join fetching for one-to-one and many-to-one associations that have been mapped with fetch="join".
p3-4-2-3 = See <a href="#c20-1">Section 20.1, \u201CFetching strategies\u201D</a> for more information.

#		**********************************************************************************************************
#		3.4.3. Binary Streams
#		**********************************************************************************************************

title3-4-3 = 3.4.3. Binary Streams
p3-4-3-1 = Oracle limits the size of byte arrays that can be passed to and/or from its JDBC driver. If you wish to use large instances of binary or serializable type, you should enable hibernate.jdbc.use_streams_for_binary. This is a system-level setting only.

#		**********************************************************************************************************
#		3.4.4. Second-level and query cache
#		**********************************************************************************************************

title3-4-4 = 3.4.4. Second-level and query cache
p3-4-4-1 = The properties prefixed by hibernate.cache allow you to use a process or cluster scoped second-level cache system with Hibernate. See the <a href="#c20-2">Section 20.2, \u201CThe Second Level Cache\u201D</a> for more information.

#		**********************************************************************************************************
#		3.4.5. Query Language Substitution
#		**********************************************************************************************************

title3-4-5 = 3.4.5. Query Language Substitution
p3-4-5-1 = You can define new Hibernate query tokens using hibernate.query.substitutions. For example:
p3-4-5-2 = This would cause the tokens true and false to be translated to integer literals in the generated SQL.
p3-4-5-3 = This would allow you to rename the SQL LOWER function.

#		**********************************************************************************************************
#		3.4.6. Hibernate statistics
#		**********************************************************************************************************

title3-4-6 = 3.4.6. Hibernate statistics
p3-4-6-1 = If you enable hibernate.generate_statistics, Hibernate exposes a number of metrics that are useful when tuning a running system via <code>SessionFactory.getStatistics()</code>. Hibernate can even be configured to expose these statistics via JMX. Read the Javadoc of the interfaces in <code>org.hibernate.stats</code> for more information.

#		**********************************************************************************************************
#		3.5. Logging
#		**********************************************************************************************************

title3-5 = 3.5. Logging
ic3-5-1 = Completely out of date. Hibernate uses JBoss Logging starting in 4.0. This will get documented as we migrate this content to the Developer Guide.
p3-5-1 = Hibernate utilizes <a href="http://www.slf4j.org/">Simple Logging Facade for Java</a> (SLF4J) in order to log various system events. SLF4J can direct your logging output to several logging frameworks (NOP, Simple, log4j version 1.2, JDK 1.4 logging, JCL or logback) depending on your chosen binding. In order to setup logging you will need slf4j-api.jar in your classpath together with the jar file for your preferred binding - slf4j-log4j12.jar in the case of Log4J. See the SLF4J <a href="http://www.slf4j.org/manual.html">documentation</a> for more detail. To use Log4j you will also need to place a log4j.properties file in your classpath. An example properties file is distributed with Hibernate in the <code>src/</code> directory.
p3-5-2 = It is recommended that you familiarize yourself with Hibernate's log messages. A lot of work has been put into making the Hibernate log as detailed as possible, without making it unreadable. It is an essential troubleshooting device. The most interesting log categories are the following:
tb3-5-1 = Table 3.9. Hibernate Log Categories
td3-5-1 = Log all SQL DML statements as they are executed
td3-5-2 = Log all JDBC parameters
td3-5-3 = Log all SQL DDL statements as they are executed
td3-5-4 = Log the state of all entities (max 20 entities) associated with the session at flush time
td3-5-5 = Log all second-level cache activity
td3-5-6 = Log transaction related activity
td3-5-7 = Log all JDBC resource acquisition
td3-5-8 = Log HQL and SQL ASTs during query parsing
td3-5-9 = Log all JAAS authorization requests
td3-5-10 = Log everything. This is a lot of information but it is useful for troubleshooting
p3-5-3 = When developing applications with Hibernate, you should almost always work with debug enabled for the category <code>org.hibernate.SQL</code>, or, alternatively, the property <code>hibernate.show_sql</code> enabled.

#		**********************************************************************************************************
#		3.6. Implementing a NamingStrategy
#		**********************************************************************************************************

title3-6 = 3.6. Implementing a NamingStrategy
p3-6-1 = The interface <code>org.hibernate.cfg.NamingStrategy</code> allows you to specify a "naming standard" for database objects and schema elements.
p3-6-2 = You can provide rules for automatically generating database identifiers from Java identifiers or for processing "logical" column and table names given in the mapping file into "physical" table and column names. This feature helps reduce the verbosity of the mapping document, eliminating repetitive noise (TBL_ prefixes, for example). The default strategy used by Hibernate is quite minimal.
p3-6-3 = You can specify a different strategy by calling <code>Configuration.setNamingStrategy()</code> before adding mappings:
p3-6-4 = <code>org.hibernate.cfg.ImprovedNamingStrategy</code> is a built-in strategy that might be a useful starting point for some applications.

#		**********************************************************************************************************
#		3.7. Implementing a PersisterClassProvider
#		**********************************************************************************************************

title3-7 = 3.7. Implementing a PersisterClassProvider
p3-7-1 = You can configure the persister implementation used to persist your entities and collections:
li3-7-1 = by default, Hibernate uses persisters that make sense in a relational model and follow Java Persistence's specification
li3-7-2 = you can define a PersisterClassProvider implementation that provides the persister class used of a given entity or collection
li3-7-3 =  finally, you can override them on a per entity and collection basis in the mapping using @Persister or its XML equivalent
p3-7-2 = The latter in the list the higher in priority.
p3-7-3 = You can pass the <code>PersisterClassProvider</code> instance to the Configuration object.
p3-7-4 = The persister class provider methods, when returning a non null persister class, override the default Hibernate persisters. The entity name or the collection role are passed to the methods. It is a nice way to centralize the overriding logic of the persisters instead of spreading them on each entity or collection mapping.

#		**********************************************************************************************************
#		3.8. XML configuration file
#		**********************************************************************************************************

title3-8 = 3.8. XML configuration file
p3-8-1 = An alternative approach to configuration is to specify a full configuration in a file named <code>hibernate.cfg.xml</code>. This file can be used as a replacement for the <code>hibernate.properties</code> file or, if both are present, to override properties.
p3-8-2 = The XML configuration file is by default expected to be in the root of your CLASSPATH. Here is an example:
p3-8-3 = The advantage of this approach is the externalization of the mapping file names to configuration. The <code>hibernate.cfg.xml</code> is also more convenient once you have to tune the Hibernate cache. It is your choice to use either <code>hibernate.properties</code> or <code>hibernate.cfg.xml</code>. Both are equivalent, except for the above mentioned benefits of using the XML syntax.
p3-8-4 = With the XML configuration, starting Hibernate is then as simple as:
p3-8-5 = You can select a different XML configuration file using:

#		**********************************************************************************************************
#		3.9. Java EE Application Server integration
#		**********************************************************************************************************

title3-9 = 3.9. Java EE Application Server integration
p3-9-1 = Hibernate has the following integration points for J2EE infrastructure:
li3-9-1 = Container-managed datasources: Hibernate can use JDBC connections managed by the container and provided through JNDI. Usually, a JTA compatible TransactionManager and a ResourceManager take care of transaction management (CMT), especially distributed transaction handling across several datasources. You can also demarcate transaction boundaries programmatically (BMT), or you might want to use the optional Hibernate Transaction API for this to keep your code portable.
li3-9-2 = Automatic JNDI binding: Hibernate can bind its SessionFactory to JNDI after startup.
li3-9-3 = JTA Session binding: the Hibernate Session can be automatically bound to the scope of JTA transactions. Simply lookup the SessionFactory from JNDI and get the current Session. Let Hibernate manage flushing and closing the Session when your JTA transaction completes. Transaction demarcation is either declarative (CMT) or programmatic (BMT/UserTransaction).
li3-9-4 = JMX deployment: if you have a JMX capable application server (e.g. JBoss AS), you can choose to deploy Hibernate as a managed MBean. This saves you the one line startup code to build your SessionFactory from a Configuration. The container will startup your HibernateService and also take care of service dependencies (datasource has to be available before Hibernate starts, etc).
p3-9-2 = Depending on your environment, you might have to set the configuration option <code>hibernate.connection.aggressive_release</code> to true if your application server shows "connection containment" exceptions.

#		**********************************************************************************************************
#		3.9.1. Transaction strategy configuration
#		**********************************************************************************************************

title3-9-1 = 3.9.1. Transaction strategy configuration
p3-9-1-1 = The Hibernate Session API is independent of any transaction demarcation system in your architecture. If you let Hibernate use JDBC directly through a connection pool, you can begin and end your transactions by calling the JDBC API. If you run in a J2EE application server, you might want to use bean-managed transactions and call the JTA API and <code>UserTransaction</code> when needed.
p3-9-1-2 = To keep your code portable between these two (and other) environments we recommend the optional Hibernate Transaction API, which wraps and hides the underlying system. You have to specify a factory class for Transaction instances by setting the Hibernate configuration property <code>hibernate.transaction.factory_class</code>.
p3-9-1-3 = There are three standard, or built-in, choices:
dd3-9-1-1 = delegates to database (JDBC) transactions (default)
dd3-9-1-2 = delegates to container-managed transactions if an existing transaction is underway in this context (for example, EJB session bean method). Otherwise, a new transaction is started and bean-managed transactions are used.
dd3-9-1-3 = delegates to container-managed JTA transactions
p3-9-1-4 = You can also define your own transaction strategies (for a CORBA transaction service, for example).
p3-9-1-5 = Some features in Hibernate (i.e., the second level cache, Contextual Sessions with JTA, etc.) require access to the JTA TransactionManager in a managed environment. In an application server, since J2EE does not standardize a single mechanism, you have to specify how Hibernate should obtain a reference to the TransactionManager:
tb3-9-1-1 = Table 3.10. JTA TransactionManagers

#		**********************************************************************************************************
#		3.9.2. JNDI-bound SessionFactory
#		**********************************************************************************************************

title3-9-2 = 3.9.2. JNDI-bound SessionFactory
p3-9-2-1 = A JNDI-bound Hibernate SessionFactory can simplify the lookup function of the factory and create new Sessions. This is not, however, related to a JNDI bound Datasource; both simply use the same registry.
p3-9-2-2 = If you wish to have the SessionFactory bound to a JNDI namespace, specify a name (e.g. java:hibernate/SessionFactory) using the property hibernate.session_factory_name. If this property is omitted, the SessionFactory will not be bound to JNDI. This is especially useful in environments with a read-only JNDI default implementation (in Tomcat, for example).
p3-9-2-3 = When binding the SessionFactory to JNDI, Hibernate will use the values of hibernate.jndi.url, hibernate.jndi.class to instantiate an initial context. If they are not specified, the default InitialContext will be used.
p3-9-2-4 = Hibernate will automatically place the SessionFactory in JNDI after you call cfg.buildSessionFactory(). This means you will have this call in some startup code, or utility class in your application, unless you use JMX deployment with the HibernateService (this is discussed later in greater detail).
p3-9-2-5 = If you use a JNDI SessionFactory, an EJB or any other class, you can obtain the SessionFactory using a JNDI lookup.
p3-9-2-6 = It is recommended that you bind the SessionFactory to JNDI in a managed environment and use a static singleton otherwise. To shield your application code from these details, we also recommend to hide the actual lookup code for a SessionFactory in a helper class, such as HibernateUtil.getSessionFactory(). Note that such a class is also a convenient way to startup Hibernate\u2014see chapter 1.

#		**********************************************************************************************************
#		3.9.3. Current Session context management with JTA
#		**********************************************************************************************************

title3-9-3 = 3.9.3. Current Session context management with JTA
p3-9-3-1 = The easiest way to handle Sessions and transactions is Hibernate's automatic "current" Session management. For a discussion of contextual sessions see <a href="#c2-2">Section 2.2, \u201CContextual sessions\u201D</a>. Using the "jta" session context, if there is no Hibernate Session associated with the current JTA transaction, one will be started and associated with that JTA transaction the first time you call <code>sessionFactory.getCurrentSession()</code>. The Sessions retrieved via <code>getCurrentSession()</code> in the "jta" context are set to automatically flush before the transaction completes, close after the transaction completes, and aggressively release JDBC connections after each statement. This allows the Sessions to be managed by the life cycle of the JTA transaction to which it is associated, keeping user code clean of such management concerns. Your code can either use JTA programmatically through UserTransaction, or (recommended for portable code) use the Hibernate Transaction API to set transaction boundaries. If you run in an EJB container, declarative transaction demarcation with CMT is preferred.












