
#		**********************************************************************************************************
#		Chapter 6. Types
#		**********************************************************************************************************

title6 = Chapter 6. Types
p6-1 = As an Object/Relational Mapping solution, Hibernate deals with both the Java and JDBC representations of application data. An online catalog application, for example, most likely has Product object with a number of attributes such as a sku, name, etc. For these individual attributes, Hibernate must be able to read the values out of the database and write them back. This 'marshalling' is the function of a Hibernate type, which is an implementation of the org.hibernate.type.Type interface. In addition, a Hibernate type describes various aspects of behavior of the Java type such as "how is equality checked?" or "how are values cloned?".
ic6-1 = A Hibernate type is neither a Java type nor a SQL datatype; it provides a information about both.<br/>When you encounter the term type in regards to Hibernate be aware that usage might refer to the Java type, the SQL/JDBC type or the Hibernate type.
p6-2 = Hibernate categorizes types into two high-level groups: value types (see <a href="#c6-1">Section 6.1, \u201CValue types\u201D</a>) and entity types (see <a href="#c6-2">Section 6.2, \u201CEntity types\u201D</a>).

#		**********************************************************************************************************
#		6.1. Value types
#		**********************************************************************************************************

title6-1 = 6.1. Value types
p6-1-1 = The main distinguishing characteristic of a value type is the fact that they do not define their own lifecycle. We say that they are "owned" by something else (specifically an entity, as we will see later) which defines their lifecycle. Value types are further classified into 3 sub-categories: basic types (see Section 6.1.1, \u201CBasic value types\u201D), composite types (see <a href="#c6-1-2">Section 6.1.2, \u201CComposite types\u201D</a>) amd collection types (see <a href="#c6-1-3">Section 6.1.3, \u201CCollection types\u201D</a>).

#		**********************************************************************************************************
#		6.1.1. Basic value types
#		**********************************************************************************************************

title6-1-1 = 6.1.1. Basic value types
p6-1-1-1 = The norm for basic value types is that they map a single database value (column) to a single, non-aggregated Java type. Hibernate provides a number of built-in basic types, which we will present in the following sections by the Java type. Mainly these follow the natural mappings recommended in the JDBC specification. We will later cover how to override these mapping and how to provide and use alternative type mappings.

#		**********************************************************************************************************
#		6.1.1.1. java.lang.String
#		**********************************************************************************************************

title6-1-1-1 = 6.1.1.1. java.lang.String
dd6-1-1-1-1-1 = Maps a string to the JDBC VARCHAR type. This is the standard mapping for a string if no Hibernate type is specified.<br/><br/>Registered under string and <code>java.lang.String</code> in the type registry (see <a href="#c6-5">Section 6.5, \u201CType registry\u201D</a>).
dd6-1-1-1-1-2 = Maps a string to a JDBC CLOB type<br/><br/>Registered under materialized_clob in the type registry (see <a href="c6-5">Section 6.5, \u201CType registry\u201D</a>).
dd6-1-1-1-1-3 = Maps a string to a JDBC LONGVARCHAR type<br/><br/>Registered under text in the type registry (see <a href="#c6-5">Section 6.5, \u201CType registry\u201D</a>).

#		**********************************************************************************************************
#		6.1.1.2. java.lang.Character (or char primitive)
#		**********************************************************************************************************

title6-1-1-2 = 6.1.1.2. java.lang.Character (or char primitive)
dd6-1-1-2-1-1 = Maps a char or <code>java.lang.Character</code> to a JDBC CHAR<br/><br/>Registered under char and java.lang.Character in the type registry (see <a href="#c6-5">Section 6.5, \u201CType registry\u201D</a>).

#		**********************************************************************************************************
#		6.1.1.3. java.lang.Boolean (or boolean primitive)
#		**********************************************************************************************************

title6-1-1-3 = 6.1.1.3. java.lang.Boolean (or boolean primitive)
dd6-1-1-3-1-1 = Maps a boolean to a JDBC BIT type<br/><br/>Registered under boolean and <code>java.lang.Boolean</code> in the type registry (see <a href="#c6-5">Section 6.5, \u201CType registry\u201D</a>). 
dd6-1-1-3-1-2 = Maps a boolean to a JDBC INTEGER type as <code>0 = false</code>, <code>1 = true</code><br/><br/>Registered under numeric_boolean in the type registry (see <a href="#c6-5">Section 6.5, \u201CType registry\u201D</a>).
dd6-1-1-3-1-3 = Maps a boolean to a JDBC CHAR type as <code>('N' | 'n') = false</code>, <code>( 'Y' | 'y' ) = true</code><br/><br/>Registered under <code>yes_no</code> in the type registry (see <a href="#c6-5">Section 6.5, \u201CType registry\u201D</a>).
dd6-1-1-3-1-4 = Maps a boolean to a JDBC CHAR type as <code>('F' | 'f') = false</code>, <code>( 'T' | 't' ) = true</code><br/><br/>Registered under <code>true_false</code> in the type registry (see <a href="#c6-5">Section 6.5, \u201CType registry\u201D</a>).

#		**********************************************************************************************************
#		6.1.1.4. java.lang.Byte (or byte primitive)
#		**********************************************************************************************************

title6-1-1-4 = 6.1.1.4. java.lang.Byte (or byte primitive)
dd6-1-1-4-1-1 = Maps a byte or java.lang.Byte to a JDBC TINYINT<br/><br/>Registered under byte and <code>java.lang.Byte</code> in the type registry (see <a href="#c6-5">Section 6.5, \u201CType registry\u201D</a>).

#		**********************************************************************************************************
#		6.1.1.5. java.lang.Short (or short primitive)
#		**********************************************************************************************************

title6-1-1-5 = 6.1.1.5. java.lang.Short (or short primitive)
dd6-1-1-5-1-1 = Maps a short or <code>java.lang.Short</code> to a JDBC SMALLINT<br/><br/>Registered under short and <code>java.lang.Short</code> in the type registry (see <a href="#c6-5">Section 6.5, \u201CType registry\u201D</a>).

#		**********************************************************************************************************
#		6.1.1.6. java.lang.Integer (or int primitive)
#		**********************************************************************************************************

title6-1-1-6 = 6.1.1.6. java.lang.Integer (or int primitive)
dd6-1-1-6-1-1 = Maps an int or java.lang.Integer to a JDBC INTEGER<br/><br/>Registered under int and <code>java.lang.Integerin</code> the type registry (see <a href="#c6-5">Section 6.5, \u201CType registry\u201D</a>).

#		**********************************************************************************************************
#		6.1.1.7. java.lang.Long (or long primitive)
#		**********************************************************************************************************

title6-1-1-7 = 6.1.1.7. java.lang.Long (or long primitive)
dd6-1-1-7-1-1 = Maps a long or java.lang.Long to a JDBC BIGINT<br/><br/>Registered under long and <code>java.lang.Long</code> in the type registry (see <a href="#c6-5">Section 6.5, \u201CType registry\u201D</a>).

#		**********************************************************************************************************
#		6.1.1.8. java.lang.Float (or float primitive)
#		**********************************************************************************************************

title6-1-1-8 = 6.1.1.8. java.lang.Float (or float primitive)
dd6-1-1-8-1-1 = Maps a float or java.lang.Float to a JDBC FLOAT<br/><br/>Registered under float and <code>java.lang.Float</code> in the type registry (see <a href="#c6-5">Section 6.5, \u201CType registry\u201D</a>).

#		**********************************************************************************************************
#		6.1.1.9. java.lang.Double (or double primitive)
#		**********************************************************************************************************

title6-1-1-9 = 6.1.1.9. java.lang.Double (or double primitive)
dd6-1-1-9-1-1 = Maps a double or <code>java.lang.Double</code> to a JDBC DOUBLE<br/><br/>Registered under double and <code>java.lang.Double</code> in the type registry (see <a href="#c6-5">Section 6.5, \u201CType registry\u201D</a>).

#		**********************************************************************************************************
#		6.1.1.10. java.math.BigInteger
#		**********************************************************************************************************

title6-1-1-10 = 6.1.1.10. java.math.BigInteger
dd6-1-1-10-1-1 = Maps a <code>java.math.BigInteger</code> to a JDBC NUMERIC<br/><br/>Registered under <code>big_integer</code> and <code>java.math.BigInteger</code> in the type registry (see <a href="#c6-5">Section 6.5, \u201CType registry\u201D</a>).

#		**********************************************************************************************************
#		6.1.1.11. java.math.BigDecimal
#		**********************************************************************************************************

title6-1-1-11 = 6.1.1.11. java.math.BigDecimal
dd6-1-1-11-1-1 = Maps a java.math.BigDecimal to a JDBC NUMERIC<br/><br/>Registered under <code>big_decimal</code> and <code>java.math.BigDecimal</code> in the type registry (see <a href="#c6-5">Section 6.5, \u201CType registry\u201D</a>).

#		**********************************************************************************************************
#		6.1.1.12. java.util.Date or java.sql.Timestamp
#		**********************************************************************************************************

title6-1-1-12 = 6.1.1.12. java.util.Date or java.sql.Timestamp
dd6-1-1-12-1-1 = Maps a <code>java.sql.Timestamp</code> to a JDBC TIMESTAMP<br/><br/>Registered under timestamp, <code>java.sql.Timestamp</code> and <code>java.util.Date</code> in the type registry (see <a href="#c6-5">Section 6.5, \u201CType registry\u201D</a>).

#		**********************************************************************************************************
#		6.1.1.13. java.sql.Time
#		**********************************************************************************************************

title6-1-1-13 = 6.1.1.13. java.sql.Time
dd6-1-1-13-1-1 = Maps a <code>java.sql.Time</code> to a JDBC TIME<br/><br/>Registered under time and <code>java.sql.Time</code> in the type registry (see <a href="#c6-5">Section 6.5, \u201CType registry\u201D</a>).

#		**********************************************************************************************************
#		6.1.1.14. java.sql.Date
#		**********************************************************************************************************

title6-1-1-14 = 6.1.1.14. java.sql.Date
dd6-1-1-14-1-1 = Maps a <code>java.sql.Date</code> to a JDBC DATE<br/><br/>Registered under date and <code>java.sql.Date</code> in the type registry (see <a href="#c6-5">Section 6.5, \u201CType registry\u201D</a>).

#		**********************************************************************************************************
#		6.1.1.15. java.util.Calendar
#		**********************************************************************************************************

title6-1-1-15 = 6.1.1.15. java.util.Calendar
dd6-1-1-15-1-1 = Maps a <code>java.util.Calendar</code> to a JDBC TIMESTAMP<br/><br/>Registered under calendar, <code>java.util.Calendar</code> and <code>java.util.GregorianCalendar</code> in the type registry (see <a href="#c6-5">Section 6.5, \u201CType registry\u201D</a>).
dd6-1-1-15-1-2 = Maps a <code>java.util.Calendar</code> to a JDBC DATE<br/><br/>Registered under calendar_date in the type registry (see <a href="#c6-5">Section 6.5, \u201CType registry\u201D</a>).

#		**********************************************************************************************************
#		6.1.1.16. java.util.Currency
#		**********************************************************************************************************

title6-1-1-16 = 6.1.1.16. java.util.Currency
dd6-1-1-16-1-1 = Maps a <code>java.util.Currency</code> to a JDBC VARCHAR (using the Currency code)<br/><br/>Registered under currency and <code>java.util.Currency</code> in the type registry (see <a href="#c6-5">Section 6.5, \u201CType registry\u201D</a>).

#		**********************************************************************************************************
#		6.1.1.17. java.util.Locale
#		**********************************************************************************************************

title6-1-1-17 = 6.1.1.17. java.util.Locale
dd6-1-1-17-1-1 = Maps a <code>java.util.Locale</code> to a JDBC VARCHAR (using the Locale code)<br/><br/>Registered under locale and java.util.Locale in the type registry (see <a href="#c6-5">Section 6.5, \u201CType registry\u201D</a>).

#		**********************************************************************************************************
#		6.1.1.18. java.util.TimeZone
#		**********************************************************************************************************

title6-1-1-18 = 6.1.1.18. java.util.TimeZone
dd6-1-1-18-1-1 = Maps a <code>java.util.TimeZone</code> to a JDBC VARCHAR (using the TimeZone ID)<br/><br/>Registered under timezone and <code>java.util.TimeZone</code> in the type registry (see <a href="#c6-5">Section 6.5, \u201CType registry\u201D</a>).

#		**********************************************************************************************************
#		6.1.1.19. java.net.URL
#		**********************************************************************************************************

title6-1-1-19 = 6.1.1.19. java.net.URL
dd6-1-1-19-1-1 = Maps a <code>java.net.URL</code> to a JDBC VARCHAR (using the external form)<br/><br/>Registered under url and <code>java.net.URL</code> in the type registry (see <a href="#c6-5">Section 6.5, \u201CType registry\u201D</a>).

#		**********************************************************************************************************
#		6.1.1.20. java.lang.Class
#		**********************************************************************************************************

title6-1-1-20 = 6.1.1.20. java.lang.Class
dd6-1-1-20-1-1 = Maps a <code>java.lang.Class</code> to a JDBC VARCHAR (using the Class name)<br/><br/>Registered under class and <code>java.lang.Class</code> in the type registry (see <a href="#c6-5">Section 6.5, \u201CType registry\u201D</a>).

#		**********************************************************************************************************
#		6.1.1.21. java.sql.Blob
#		**********************************************************************************************************

title6-1-1-21 = 6.1.1.21. java.sql.Blob
dd6-1-1-21-1-1 = Maps a <code>java.sql.Blob</code> to a JDBC BLOB<br/><br/>Registered under blob and <code>java.sql.Blob</code> in the type registry (see <a href="#c6-5">Section 6.5, \u201CType registry\u201D</a>).

#		**********************************************************************************************************
#		6.1.1.22. java.sql.Clob
#		**********************************************************************************************************

title6-1-1-22 = 6.1.1.22. java.sql.Clob 
dd6-1-1-22-1-1 = Maps a <code>java.sql.Clob</code> to a JDBC CLOB<br/><br/>Registered under clob and <code>java.sql.Clob</code> in the type registry (see <a href="#c6-5">Section 6.5, \u201CType registry\u201D</a>).

#		**********************************************************************************************************
#		6.1.1.23. byte[]
#		**********************************************************************************************************

title6-1-1-23 = 6.1.1.23. byte[]
dd6-1-1-23-1-1 = Maps a primitive byte[] to a JDBC VARBINARY<br/><br/>Registered under binary and byte[] in the type registry (see <a href="#c6-5">Section 6.5, \u201CType registry\u201D</a>).
dd6-1-1-23-1-2 = Maps a primitive byte[] to a JDBC BLOB<br/><br/>Registered under materialized_blob in the type registry (see <a href="#c6-5">Section 6.5, \u201CType registry\u201D</a>).
dd6-1-1-23-1-3 = Maps a primitive byte[] to a JDBC LONGVARBINARY<br/><br/>Registered under image in the type registry (see <a href="#c6-5">Section 6.5, \u201CType registry\u201D</a>).

#		**********************************************************************************************************
#		6.1.1.24. Byte[]
#		**********************************************************************************************************

title6-1-1-24 = 6.1.1.24. Byte[]
dd6-1-1-24-1-1 = Maps a java.lang.Byte[] to a JDBC VARBINARY<br/><br/>Registered under wrapper-binary, Byte[] and java.lang.Byte[] in the type registry (see <a href="#c6-5">Section 6.5, \u201CType registry\u201D</a>).

#		**********************************************************************************************************
#		6.1.1.25. char[]
#		**********************************************************************************************************

title6-1-1-25 = 6.1.1.25. char[]
dd6-1-1-25-1-1 = Maps a char[] to a JDBC VARCHAR<br/><br/>Registered under characters and char[] in the type registry (see <a href="#c6-5">Section 6.5, \u201CType registry\u201D</a>).

#		**********************************************************************************************************
#		6.1.1.26. Character[]
#		**********************************************************************************************************

title6-1-1-26 = 6.1.1.26. Character[]
dd6-1-1-26-1-1 = Maps a java.lang.Character[] to a JDBC VARCHAR<br/><br/>Registered under wrapper-characters, Character[] and java.lang.Character[] in the type registry (see <a href="#c6-5">Section 6.5, \u201CType registry\u201D</a>).

#		**********************************************************************************************************
#		6.1.1.27. java.util.UUID
#		**********************************************************************************************************

title6-1-1-27 = 6.1.1.27. java.util.UUID
dd6-1-1-27-1-1 = Maps a <code>java.util.UUID</code> to a JDBC BINARY<br/><br/>Registered under uuid-binary and <code>java.util.UUID</code> in the type registry (see <a href="#c6-5">Section 6.5, \u201CType registry\u201D</a>).
dd6-1-1-27-1-2 = Maps a <code>java.util.UUID</code> to a JDBC CHAR (though VARCHAR is fine too for existing schemas)<br/><br/>Registered under uuid-char in the type registry (see <a href="#c6-5">Section 6.5, \u201CType registry\u201D</a>).
dd6-1-1-27-1-3 = Maps a <code>java.util.UUID</code> to the PostgreSQL UUID data type (through Types#OTHER which is how the PostgreSQL JDBC driver defines it).<br/><br/>Registered under pg-uuid in the type registry (see <a href="#c6-5">Section 6.5, \u201CType registry\u201D</a>).

#		**********************************************************************************************************
#		6.1.1.28. java.io.Serializable
#		**********************************************************************************************************

title6-1-1-28 = 6.1.1.28. java.io.Serializable
dd6-1-1-28-1-1 = Maps implementors of <code>java.lang.Serializable</code> to a JDBC VARBINARY<br/><br/>Unlike the other value types, there are multiple instances of this type. It gets registered once under <code>java.io.Serializable</code>. Additionally it gets registered under the specific <code>java.io.Serializable</code> implementation class names.

#		**********************************************************************************************************
#		6.1.2. Composite types
#		**********************************************************************************************************

title6-1-2 = 6.1.2. Composite types
nc6-1-2-1 = The Java Persistence API calls these embedded types, while Hibernate traditionally called them components. Just be aware that both terms are used and mean the same thing in the scope of discussing Hibernate.
p6-1-2-1 = Components represent aggregations of values into a single Java type. For example, you might have an <code>Address</code> class that aggregates street, city, state, etc information or a Name class that aggregates the parts of a person's Name. In many ways a component looks exactly like an entity. They are both (generally speaking) classes written specifically for the application. They both might have references to other application-specific classes, as well as to collections and simple JDK types. As discussed before, the only distinguishing factory is the fact that a component does not own its own lifecycle nor does it define an identifier.

#		**********************************************************************************************************
#		6.1.3. Collection types
#		**********************************************************************************************************

title6-1-3 = 6.1.3. Collection types
ic6-1-3-1 = It is critical understand that we mean the collection itself, not its contents. The contents of the collection can in turn be basic, component or entity types (though not collections), but the collection itself is owned.
p6-1-3-1 = Collections are covered in <a href="#c7">Chapter 7, Collection mapping</a>.

#		**********************************************************************************************************
#		6.2. Entity types
#		**********************************************************************************************************

title6-2 = 6.2. Entity types
p6-2-1 = The definition of entities is covered in detail in <a href="#c4">Chapter 4, Persistent Classes</a>. For the purpose of this discussion, it is enough to say that entities are (generally application-specific) classes which correlate to rows in a table. Specifically they correlate to the row by means of a unique identifier. Because of this unique identifier, entities exist independently and define their own lifecycle. As an example, when we delete a Membership, both the User and Group entities remain.
nc6-2-1 = This notion of entity independence can be modified by the application developer using the concept of cascades. Cascades allow certain operations to continue (or "cascade") across an association from one entity to another. Cascades are covered in detail in <a href="#c8">Chapter 8, Association Mappings</a>.

#		**********************************************************************************************************
#		6.3. Significance of type categories
#		**********************************************************************************************************

title6-3 = 6.3. Significance of type categories
p6-3-1 = Why do we spend so much time categorizing the various types of types? What is the significance of the distinction?
p6-3-2 = The main categorization was between entity types and value types. To review we said that entities, by nature of their unique identifier, exist independently of other objects whereas values do not. An application cannot "delete" a Product sku; instead, the sku is removed when the Product itself is deleted (obviously you can update the sku of that Product to null to make it "go away", but even there the access is done through the Product).
p6-3-3 = Nor can you define an association to that Product sku. You can define an association to Product based on its sku, assuming sku is unique, but that is totally different.
p6-3-4 = TBC...

#		**********************************************************************************************************
#		6.4. Custom types
#		**********************************************************************************************************

title6-4 = 6.4. Custom types
p6-4-1 = Hibernate makes it relatively easy for developers to create their own value types. For example, you might want to persist properties of type java.lang.BigInteger to VARCHAR columns. Custom types are not limited to mapping values to a single table column. So, for example, you might want to concatenate together FIRST_NAME, INITIAL and SURNAME columns into a <code>java.lang.String</code>.
p6-4-2 = There are 3 approaches to developing a custom Hibernate type. As a means of illustrating the different approaches, lets consider a use case where we need to compose a java.math.BigDecimal and <code>java.util.Currency</code> together into a custom Money class.

#		**********************************************************************************************************
#		6.4.1. Custom types using org.hibernate.type.Type
#		**********************************************************************************************************

title6-4-1 = 6.4.1. Custom types using org.hibernate.type.Type
p6-4-1-1 = The first approach is to directly implement the <code>org.hibernate.type.Type</code> interface (or one of its derivatives). Probably, you will be more interested in the more specific <code>org.hibernate.type.BasicType</code> contract which would allow registration of the type (see <a href="#c6-5">Section 6.5, \u201CType registry\u201D</a>). The benefit of this registration is that whenever the metadata for a particular property does not specify the Hibernate type to use, Hibernate will consult the registry for the exposed property type. In our example, the property type would be Money, which is the key we would use to register our type in the registry:
ic6-4-1-1 = It is important that we registered the type before adding mappings.

#		**********************************************************************************************************
#		6.4.2. Custom types using org.hibernate.usertype.UserType
#		**********************************************************************************************************

title6-4-2 = 6.4.2. Custom types using org.hibernate.usertype.UserType
nc6-4-2-1 = Both <code>org.hibernate.usertype.UserType</code> and <code>org.hibernate.usertype.CompositeUserType</code> were originally added to isolate user code from internal changes to the <code>org.hibernate.type.Type</code> interfaces.
p6-4-2-1 = The second approach is the use the <code>org.hibernate.usertype.UserType</code> interface, which presents a somewhat simplified view of the <code>org.hibernate.type.Type</code> interface. Using a <code>org.hibernate.usertype.UserType</code>, our Money custom type would look as follows:
p6-4-2-2 = There is not much difference between the <code>org.hibernate.type.Type</code> example and the <code>org.hibernate.usertype.UserType</code> example, but that is only because of the snippets shown. If you choose the <code>org.hibernate.type.Type</code> approach there are quite a few more methods you would need to implement as compared to the <code>org.hibernate.usertype.UserType</code>.

#		**********************************************************************************************************
#		6.4.3. Custom types using org.hibernate.usertype.CompositeUserType
#		**********************************************************************************************************

title6-4-3 = 6.4.3. Custom types using org.hibernate.usertype.CompositeUserType
p6-4-3-1 = The third and final approach is the use the <code>org.hibernate.usertype.CompositeUserType</code> interface, which differs from <code>org.hibernate.usertype.UserType</code> in that it gives us the ability to provide Hibernate the information to handle the composition within the Money class (specifically the 2 attributes). This would give us the capability, for example, to reference the amount attribute in an HQL query. Using a <code>org.hibernate.usertype.CompositeUserType</code>, our Money custom type would look as follows:

#		**********************************************************************************************************
#		6.5. Type registry
#		**********************************************************************************************************

title6-5 = 6.5. Type registry
p6-5-1 = Internally Hibernate uses a registry of basic types (see <a href="#c6-1-1">Section 6.1.1, \u201CBasic value types\u201D</a>) when it needs to resolve the specific <code>org.hibernate.type.Type</code> to use in certain situations. It also provides a way for applications to add extra basic type registrations as well as override the standard basic type registrations.
p6-5-2 = To register a new type or to override an existing type registration, applications would make use of the registerTypeOverride method of the <code>org.hibernate.cfg.Configuration</code> class when bootstrapping Hibernate. For example, lets say you want Hibernate to use your custom SuperDuperStringType; during bootstrap you would call:
p6-5-3 = The argument to registerTypeOverride is a <code>org.hibernate.type.BasicType</code> which is a specialization of the <code>org.hibernate.type.Type</code> we saw before. It adds a single method:
p6-5-4 = One approach is to use inheritance (SuperDuperStringType extends <code>org.hibernate.type.StringType</code>); another is to use delegation.


























