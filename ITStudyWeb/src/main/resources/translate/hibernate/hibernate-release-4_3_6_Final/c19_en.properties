
#		**********************************************************************************************************
#		Chapter 19. Filtering data
#		**********************************************************************************************************

title19 = Chapter 19. Filtering data
p19-1 = Hibernate provides an innovative new approach to handling data with "visibility" rules. A Hibernate filter is a global, named, parameterized filter that can be enabled or disabled for a particular Hibernate session.

#		**********************************************************************************************************
#		19.1. Hibernate filters
#		**********************************************************************************************************

title19-1 = 19.1. Hibernate filters
p19-1-1 = Hibernate has the ability to pre-define filter criteria and attach those filters at both a class level and a collection level. A filter criteria allows you to define a restriction clause similar to the existing "where" attribute available on the class and various collection elements. These filter conditions, however, can be parameterized. The application can then decide at runtime whether certain filters should be enabled and what their parameter values should be. Filters can be used like database views, but they are parameterized inside the application.
p19-1-2 = Using annotatons filters are defined via <code>@org.hibernate.annotations.FilterDef</code> or <code>@org.hibernate.annotations.FilterDefs</code>. A filter definition has a <code>name()</code> and an array of <code>parameters()</code>. A parameter will allow you to adjust the behavior of the filter at runtime. Each parameter is defined by a <code>@ParamDef</code> which has a name and a type. You can also define a <code>defaultCondition()</code> parameter for a given <code>@FilterDef</code> to set the default condition to use when none are defined in each individual <code>@Filter</code>. <code>@FilterDef(s)</code> can be defined at the class or package level.
p19-1-3 = We now need to define the SQL filter clause applied to either the entity load or the collection load. <code>@Filter</code> is used and placed either on the entity or the collection element. The connection between <code>@FilterName</code> and <code>@Filter</code> is a matching name.
p19-1-4 = When the collection use an association table as a relational representation, you might want to apply the filter condition to the association table itself or to the target entity table. To apply the constraint on the target entity, use the regular <code>@Filter</code> annotation. However, if you want to target the association table, use the <code>@FilterJoinTable</code> annotation.
p19-1-5 = By default, Hibernate attempts to automatically determine all points within the <code>@Filter</code> SQL condition fragment that an alias should be injected. To control the alias injection, set deduceAliasInjectionPoints to false within the <code>@Filter</code>. Injection points are then marked using <code>@SqlFragmentAlias</code> annotations or within the SQLs condition fragment using '{'alias'}'.
p19-1-6 = In addition to allowing explicit alias control, deduceAliasInjectionPoints provides an out when Hibernate assumes an ANSI SQL reserved keyword is a column and incorrectly aliases it.
p19-1-7 = Using Hibernate mapping files for defining filters the situtation is very similar. The filters must first be defined and then attached to the appropriate mapping elements. To define a filter, use the <code>&lt;filter-def/&gt;</code> element within a <code>&lt;hibernate-mapping/&gt;</code> element:
p19-1-8 = This filter can then be attached to a class or collection (or, to both or multiples of each at the same time):
p19-1-9 = The methods on Session are: <code>enableFilter</code>(String filterName), <code>getEnabledFilter</code>(String filterName), and <code>disableFilter</code>(String filterName). By default, filters are not enabled for a given session. Filters must be enabled through use of the <code>Session.enableFilter()</code> method, which returns an instance of the Filter interface. If you used the simple filter defined above, it would look like this:
p19-1-10 = Methods on the org.hibernate.Filter interface do allow the method-chaining common to much of Hibernate.
p19-1-11 = The following is a full example, using temporal data with an effective record date pattern:
p19-1-12 = In order to ensure that you are provided with currently effective records, enable the filter on the session prior to retrieving employee data:
p19-1-13 = Even though a salary constraint was mentioned explicitly on the results in the above HQL, because of the enabled filter, the query will return only currently active employees who have a salary greater than one million dollars.
p19-1-14 = If you want to use filters with outer joining, either through HQL or load fetching, be careful of the direction of the condition expression. It is safest to set this up for left outer joining. Place the parameter first followed by the column name(s) after the operator.
p19-1-15 = After being defined, a filter might be attached to multiple entities and/or collections each with its own condition. This can be problematic when the conditions are the same each time. Using <code>&lt;filter-def/&gt;</code> allows you to definine a default condition, either as an attribute or CDATA:
p19-1-16 = This default condition will be used whenever the filter is attached to something without specifying a condition. This means you can give a specific condition as part of the attachment of the filter that overrides the default condition in that particular case.























