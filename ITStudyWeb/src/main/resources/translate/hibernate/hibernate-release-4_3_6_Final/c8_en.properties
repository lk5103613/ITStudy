
#		**********************************************************************************************************
#		Chapter 8. Association Mappings
#		**********************************************************************************************************

title8 = Chapter 8. Association Mappings

#		**********************************************************************************************************
#		8.1. Introduction
#		**********************************************************************************************************

title8-1 = 8.1. Introduction
p8-1-1 = Association mappings are often the most difficult thing to implement correctly. In this section we examine some canonical cases one by one, starting with unidirectional mappings and then bidirectional cases. We will use <code>Person</code> and <code>Address</code> in all the examples.
p8-1-2 = Associations will be classified by multiplicity and whether or not they map to an intervening join table.
p8-1-3 = Nullable foreign keys are not considered to be good practice in traditional data modelling, so our examples do not use nullable foreign keys. This is not a requirement of Hibernate, and the mappings will work if you drop the nullability constraints.

#		**********************************************************************************************************
#		8.2. Unidirectional associations
#		**********************************************************************************************************

title8-2 = 8.2. Unidirectional associations

#		**********************************************************************************************************
#		8.2.1. Many-to-one
#		**********************************************************************************************************

title8-2-1 = 8.2.1. Many-to-one
p8-2-1-1 = A unidirectional many-to-one association is the most common kind of unidirectional association.

#		**********************************************************************************************************
#		8.2.2. One-to-one
#		**********************************************************************************************************

title8-2-2 = 8.2.2. One-to-one
p8-2-2-1 = A unidirectional one-to-one association on a foreign key is almost identical. The only difference is the column unique constraint.
p8-2-2-2 = A unidirectional one-to-one association on a primary key usually uses a special id generator In this example, however, we have reversed the direction of the association:

#		**********************************************************************************************************
#		8.2.3. One-to-many
#		**********************************************************************************************************

title8-2-3 = 8.2.3. One-to-many
p8-2-3-1 = A unidirectional one-to-many association on a foreign key is an unusual case, and is not recommended.
p8-2-3-2 = You should instead use a join table for this kind of association.

#		**********************************************************************************************************
#		8.3. Unidirectional associations with join tables
#		**********************************************************************************************************

title8-3 = 8.3. Unidirectional associations with join tables

#		**********************************************************************************************************
#		8.3.1. One-to-many
#		**********************************************************************************************************

title8-3-1 = 8.3.1. One-to-many
p8-3-1-1 = A unidirectional one-to-many association on a join table is the preferred option. Specifying <code>unique="true"</code>, changes the multiplicity from many-to-many to one-to-many.

#		**********************************************************************************************************
#		8.3.2. Many-to-one
#		**********************************************************************************************************

title8-3-2 = 8.3.2. Many-to-one
p8-3-2-1 = A unidirectional many-to-one association on a join table is common when the association is optional. For example:

#		**********************************************************************************************************
#		8.3.3. One-to-one
#		**********************************************************************************************************

title8-3-3 = 8.3.3. One-to-one
p8-3-3-1 = A unidirectional one-to-one association on a join table is possible, but extremely unusual.

#		**********************************************************************************************************
#		8.3.4. Many-to-many
#		**********************************************************************************************************

title8-3-4 = 8.3.4. Many-to-many
p8-3-4-1 = Finally, here is an example of a unidirectional many-to-many association.

#		**********************************************************************************************************
#		8.4. Bidirectional associations
#		**********************************************************************************************************

title8-4 = 8.4. Bidirectional associations

#		**********************************************************************************************************
#		8.4.1. one-to-many / many-to-one
#		**********************************************************************************************************

title8-4-1 = 8.4.1. one-to-many / many-to-one
p8-4-1-1 = A bidirectional many-to-one association is the most common kind of association. The following example illustrates the standard parent/child relationship.
p8-4-1-2 = If you use a <code>List</code>, or other indexed collection, set the key column of the foreign key to not null. Hibernate will manage the association from the collections side to maintain the index of each element, making the other side virtually inverse by setting <code>update="false"</code> and <code>insert="false"</code>:
p8-4-1-3 = If the underlying foreign key column is NOT NULL, it is important that you define not-null="true" on the <code>&lt;key&gt;</code> element of the collection mapping. Do not only declare <code>not-null="true"</code> on a possible nested <code>&lt;column&gt;</code> element, but on the <code>&lt;key&gt;</code> element.

#		**********************************************************************************************************
#		8.4.2. One-to-one
#		**********************************************************************************************************

title8-4-2 = 8.4.2. One-to-one
p8-4-2-1 = A bidirectional one-to-one association on a foreign key is common:
p8-4-2-2 = A bidirectional one-to-one association on a primary key uses the special id generator:

#		**********************************************************************************************************
#		8.5. Bidirectional associations with join tables
#		**********************************************************************************************************

title8-5 = 8.5. Bidirectional associations with join tables

#		**********************************************************************************************************
#		8.5.1. one-to-many / many-to-one
#		**********************************************************************************************************

title8-5-1 = 8.5.1. one-to-many / many-to-one
p8-5-1-1 = The following is an example of a bidirectional one-to-many association on a join table. The <code>inverse="true"</code> can go on either end of the association, on the collection, or on the join.

#		**********************************************************************************************************
#		8.5.2. one to one
#		**********************************************************************************************************

title8-5-2 = 8.5.2. one to one
p8-5-2-1 = A bidirectional one-to-one association on a join table is possible, but extremely unusual.

#		**********************************************************************************************************
#		8.5.3. Many-to-many
#		**********************************************************************************************************

title8-5-3 = 8.5.3. Many-to-many
p8-5-3-1 = Here is an example of a bidirectional many-to-many association.

#		**********************************************************************************************************
#		8.6. More complex association mappings
#		**********************************************************************************************************

title8-6 = 8.6. More complex association mappings
p8-6-1 = More complex association joins are extremely rare. Hibernate handles more complex situations by using SQL fragments embedded in the mapping document. For example, if a table with historical account information data defines <code>accountNumber</code>, <code>effectiveEndDate</code> and <code>effectiveStartDatecolumns</code>, it would be mapped as follows:
p8-6-2 = You can then map an association to the current instance, the one with null effectiveEndDate, by using:
p8-6-3 = In a more complex example, imagine that the association between <code>Employee</code> and <code>Organization</code> is maintained in an Employment table full of historical employment data. An association to the employee's most recent employer, the one with the most recent startDate, could be mapped in the following way:
p8-6-4 = This functionality allows a degree of creativity and flexibility, but it is more practical to handle these kinds of cases using HQL or a criteria query.































