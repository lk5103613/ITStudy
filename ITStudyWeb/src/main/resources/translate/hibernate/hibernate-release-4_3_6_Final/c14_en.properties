
#		**********************************************************************************************************
#		Chapter 14. Interceptors and events
#		**********************************************************************************************************

title14 = Chapter 14. Interceptors and events
p14-1 = It is useful for the application to react to certain events that occur inside Hibernate. This allows for the implementation of generic functionality and the extension of Hibernate functionality.

#		**********************************************************************************************************
#		14.1. Interceptors
#		**********************************************************************************************************

title14-1 = 14.1. Interceptors
p14-1-1 = The <code>Interceptor</code> interface provides callbacks from the session to the application, allowing the application to inspect and/or manipulate properties of a persistent object before it is saved, updated, deleted or loaded. One possible use for this is to track auditing information. For example, the following Interceptor automatically sets the createTimestamp when an Auditable is created and updates the <code>lastUpdateTimestamp property</code> when an Auditable is updated.
p14-1-2 = You can either implement Interceptor directly or extend <code>EmptyInterceptor</code>.
p14-1-3 = There are two kinds of inteceptors: <code>Session-scoped</code> and <code>SessionFactory-scoped</code>.
p14-1-4 = A <code>Session-scoped</code> interceptor is specified when a session is opened.
p14-1-5 = A SessionFactory-scoped interceptor is registered with the <code>Configuration</code> object prior to building the SessionFactory. Unless a session is opened explicitly specifying the interceptor to use, the supplied interceptor will be applied to all sessions opened from that SessionFactory. SessionFactory-scoped interceptors must be thread safe. Ensure that you do not store session-specific states, since multiple sessions will use this interceptor potentially concurrently.

#		**********************************************************************************************************
#		14.2. Event system
#		**********************************************************************************************************

title14-2 = 14.2. Event system
p14-2-1 = If you have to react to particular events in your persistence layer, you can also use the Hibernate event architecture. The event system can be used in addition, or as a replacement, for interceptors.
p14-2-2 = Many methods of the Session interface correlate to an event type. The full range of defined event types is declared as enum values on <code>org.hibernate.event.spi.EventType</code>. When a request is made of one of these methods, the Hibernate Session generates an appropriate event and passes it to the configured event listeners for that type. Out-of-the-box, these listeners implement the same processing in which those methods always resulted. However, you are free to implement a customization of one of the listener interfaces (i.e., the LoadEvent is processed by the registered implementation of the LoadEventListener interface), in which case their implementation would be responsible for processing any <code>load()</code> requests made of the Session.
nc14-2-1 = See the Hibernate Developer Guide for information on registering custom event listeners.
p14-2-3 = The listeners should be considered stateless; they are shared between requests, and should not save any state as instance variables.
p14-2-4 = A custom listener implements the appropriate interface for the event it wants to process and/or extend one of the convenience base classes (or even the default event listeners used by Hibernate out-of-the-box as these are declared non-final for this purpose). Here is an example of a custom load event listener:

#		**********************************************************************************************************
#		14.3. Hibernate declarative security
#		**********************************************************************************************************

title14-3 = 14.3. Hibernate declarative security
p14-3-1 = Usually, declarative security in Hibernate applications is managed in a session facade layer. Hibernate allows certain actions to be permissioned via JACC, and authorized via JAAS. This is an optional functionality that is built on top of the event architecture.
p14-3-2 = First, you must configure the appropriate event listeners, to enable the use of JACC authorization. Again, see <strong>Hibernate Developer Guide</strong> for the details. Below is an example of an appropriate <code>org.hibernate.integrator.spi.Integrator</code> implementation for this purpose.
p14-3-3 = You must also decide how to configure your JACC provider. One option is to tell Hibernate what permissions to bind to what roles and have it configure the JACC provider. This would be done in the <code>hibernate.cfg.xml</code> file.



























