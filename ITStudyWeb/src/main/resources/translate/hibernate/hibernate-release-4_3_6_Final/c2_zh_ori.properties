
#		**********************************************************************************************************
#		Chapter 2. Architecture
#		p1
#		important-content
#		note-content
#		caution-content
#		**********************************************************************************************************

title2 = 第二章. 体系结构

#		**********************************************************************************************************
#		2.1. Overview
#		p2
#		important-content
#		note-content
#		caution-content
#		**********************************************************************************************************

title2-1 = 2.1. 概览
p2-1 = 下面的图表展示了Hibernate的大致体系结构：
p2-2 = 遗憾的是由于Hibernate过于灵活，可以用于各种不同的解决方案，我们不能向大家展示出所有情况下的体系结构。 但是我们这里会展示2种极端的情况。

#		**********************************************************************************************************
#		2.1.1. Minimal architecture
#		p2
#		important-content
#		note-content
#		caution-content
#		**********************************************************************************************************

title2-1-1 = 2.1.1. 最小的架构
p2-1-1-1 = “最小的”结构指的是应用程序自己管理JDBC连接并把这些连接交给Hibernate处理；另外应用程序还自己管理事务。这种情况下使用了最少的HibernateAPI。

#		**********************************************************************************************************
#		2.1.2. 复杂的架构
#		p2
#		important-content
#		note-content
#		caution-content
#		**********************************************************************************************************

title2-1-2 = 2.1.2. 复杂的架构
p2-1-2-1 = “复杂的”架构指的是底层的JDBC/JTA API完全由Hibernate管理，应用程序不去关心这些细节。

#		**********************************************************************************************************
#		2.1.3. Basic APIs
#		p2
#		important-content
#		note-content
#		caution-content
#		**********************************************************************************************************

title2-1-3 = 2.1.3. 基础的API
p2-1-3-1 = 在这简略的讨论一下在前面的图中提到的一些API对象(在后面的章节中你会看到更详细的内容).
subtitle2-1-3-1 = <code>SessionFactory (org.hibernate.SessionFactory)</code>
p2-1-3-2 = 是单个数据库编译过的映射的缓存，它是线程安全的。它是<code>org.hibernate.Session</code>实例的工厂。使用了<code>org.hibernate.connection.ConnectionProvider</code>。 它可以为在事务之间可重用的数据提供二级缓存。
subtitle2-1-3-2 = Session (<code>org.hibernate.Session</code>)
p2-1-3-3 = 这个对象在应用与持久层之间做交互，它是单线程的，生命周期很短。它隐藏了<code>java.sql.Connection</code>。是<code>org.hibernate.Transaction</code>的工厂类。它持有应用程序持久化对象和集合的一级缓存;这个缓存在遍历查询或按照id查找对象时会用到。
subtitle2-1-3-3 = 持久化对象和集合
p2-1-3-4 = 带有持久化状态的，具有业务功能的单线程对象，此对象生存期很短。这些对象可以使普通的JavaBeans/POJOs。它们被明确的分配到一个<code>org.hibernate.Session</code>。一旦<code>org.hibernate.Session</code>关闭了，它们会变成脱管状态并且可以被应用的其他层随意使用（比如，直接作为数据传输对象与表示层交互）。 <a href="#c11">第十一章, 对象</a> 讨论了 transient, persistent 和 detached 对象状态。
subtitle2-1-3-4 = Transient 和 detached 状态的对象和集合
p2-1-3-5 = 持久化对象的实例当前没有被分配到一个<code>org.hibernate.Session</code>上。它们可能已经被程序实例化但是还没有持久化， 或者创建它们的<code>org.hibernate.Session</code>已经被关闭。<a href="#c11">第十一章, 对象</a> 讨论了 transient, persistent 和 detached 三种状态
subtitle2-1-3-5 = Transaction (<code>org.hibernate.Transaction</code>)
p2-1-3-6 = (可选的) 应用程序来指定原子工作单元的对象，它是单线程的且生命周期很短。它将应用程序与底层的JDBC, JTA或者CORBA事务分离开来。有时一个<code>org.hibernate.Session</code> 可能包含多个<code>org.hibernate.Transactions</code>。 然而, 无论使用底层的API或者<code>org.hibernate.Transaction</code>，事务隔离永远是必须的。
subtitle2-1-3-6 = ConnectionProvider (<code>org.hibernate.connection.ConnectionProvider</code>)
p2-1-3-7 = (可选的) 既是一个JDBC连接的工厂，也是它的连接池。 它将应用程序与底层的<code>javax.sql.DataSource</code> 或者 <code>java.sql.DriverManager</code>隔离开来。它不暴露给应用程序，但是可以被开发者扩展。
subtitle2-1-3-7 = TransactionFactory (<code>org.hibernate.TransactionFactory</code>)
p2-1-3-8 = (可选的) 是<code>org.hibernate.Transaction</code>实例的工厂类。它不会暴露给应用程序，但是可以被开发者扩展。
subtitle2-1-3-8 = 扩展接口
p2-1-3-9 = Hibernate提供了一系列可选的扩展接口，你可以实现它们来自定义持久层的行为。查看API文档来获取更多细节。

#		**********************************************************************************************************
#		2.2. Contextual sessions
#		p2
#		important-content
#		note-content
#		caution-content
#		**********************************************************************************************************

title2-2 = 2.2. 上下文相关的Session
p2-2-1 = 许多使用Hibernate的应用需要某种形式的“上下文相关”的Session, 特定的Session在特定的上下文范围始终有效。然而，对于不同的应用而言对于上下文的组成的定义非常的不同; 不同的上下文对于当前的概念定义了不同的范围. 在3.0之前，使用Hibernate的程序要么采用自行编写的基于ThreadLocal的上下文Session。要么采用HibernateUtil这样的辅助类，要么采用第三方框架,例如spring或者pico，他们提供了基于代理或者基于拦截器的上下文相关Session。
p2-2-2 = 从3.0.1开始, Hibernate 添加了 <code>SessionFactory.getCurrentSession()</code> 方法. 最初, 它假定采用了JTA事务,JTA定义了当前Session的事务和上下文。Hibernate开发团队坚信，因为有好几个独立的JTA TransactionManager实现稳定可用，不论是否被部署到一个J2EE容器中，大多数（假若不是所有的）应用程序都应该采用JTA事务管理。基于这一点，采用JTA的上下文关联的Session可以满足你的一切需要。
p2-2-3 = 然而, 从版本 3.1开始, <code>SessionFactory.getCurrentSession()</code> 的后台实现是可插拔的。因此，我们引入了新的扩展接口 <code>org.hibernate.context.spi.CurrentSessionContext</code>和新的配置参数<code>hibernate.current_session_context_class</code>, 以便对什么是“当前Session” 的范围和上下文的定义进行插拔。
p2-2-4 = 参阅 <code>org.hibernate.context.spi.CurrentSessionContext</code>接口的JavaDoc文档，哪里有关于契约的详细讨论。它定义了一个单一方法，currentSession(),特定的实现用它来负责跟踪当前的上下文Session。 Hibernate内置了此接口的三种实现:
li2-2-1 = <code>org.hibernate.context.internal.JTASessionContext</code>: 当前session根据JTA来跟踪和界定。这和以前的仅支持JTA的方法是完全一样的。详情请参阅Javadoc。
li2-2-2 = <code>org.hibernate.context.internal.ThreadLocalSessionContext</code>:当前session通过当前执行的线程来跟踪和界定。详情也请参阅Javadoc。
li2-2-3 = <code>org.hibernate.context.internal.ManagedSessionContext</code>: 当前session通过当前执行的线程来跟踪和界定。但是，你需要负责使用这个类的静态方法将Session实例绑定、或者取消绑定，它并不会打开(open)、flush或者关闭(close)任何Session。
p2-2-5 = 前两种实现都提供了“每个数据库事务对应一个session”的编程模型。 也称作每次请求一个session。Hibernate session的起始和终结由数据库事务的生存来控制。 假若你在纯粹的 Java SE之上采用自行编写代码来管理事务,而不是JTA, 建议你使用Hibernate Transaction API来把底层事务实现从你的代码中隐藏掉。如果你使用 JTA, 请使用JTA接口来管理Transaction。如果你在支持CMT的EJB容器中执行代码, 事务边界是声明式定义的，你不需要在代码中进行任何事务或session管理操作，参考<a href="#c13">Chapter 13, 事务和并发</a> 来获取更多的信息和示例代码。
p2-2-6 = <code>hibernate.current_session_context_class</code> 配置参数定义了应该采用哪个<code>org.hibernate.context.spi.CurrentSessionContext</code>实现。为了向下兼容 ，如果未配置此参数但是配置了<code>org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform</code>， Hibernate 将会使用 <code>org.hibernate.context.internal.JTASessionContext</code>. 一般而言, 此参数的值指明了要使用的实现类的全名。但那三种内置的实现可以使用简写，即"jta"、"thread"和"managed"。