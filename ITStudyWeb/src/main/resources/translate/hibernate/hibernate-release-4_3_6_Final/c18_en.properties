
#		**********************************************************************************************************
#		Chapter 18. Native SQL
#		**********************************************************************************************************

title18 = Chapter 18. Native SQL
p18-1 = You can also express queries in the native SQL dialect of your database. This is useful if you want to utilize database-specific features such as query hints or the <code>CONNECT</code> keyword in Oracle. It also provides a clean migration path from a direct SQL/JDBC based application to Hibernate.
p18-2 = Hibernate allows you to specify handwritten SQL, including stored procedures, for all create, update, delete, and load operations.

#		**********************************************************************************************************
#		18.1. Using a SQLQuery
#		**********************************************************************************************************

title18-1 = 18.1. Using a SQLQuery
p18-1-1 = Execution of native SQL queries is controlled via the <code>SQLQuery</code> interface, which is obtained by calling <code>Session.createSQLQuery()</code>. The following sections describe how to use this API for querying. 

#		**********************************************************************************************************
#		18.1.1. Scalar queries
#		**********************************************************************************************************

title18-1-1 = 18.1.1. Scalar queries
p18-1-1-1 = The most basic SQL query is to get a list of scalars (values).
p18-1-1-2 = These will return a List of Object arrays (Object[]) with scalar values for each column in the CATS table. Hibernate will use ResultSetMetadata to deduce the actual order and types of the returned scalar values.
p18-1-1-3 = To avoid the overhead of using ResultSetMetadata, or simply to be more explicit in what is returned, one can use <code>addScalar()</code>:
p18-1-1-4 = This query specified:
li18-1-1-1-1 = the SQL query string 
li18-1-1-1-2 = the columns and types to return
p18-1-1-5 = This will return Object arrays, but now it will not use <code>ResultSetMetadata</code> but will instead explicitly get the ID, NAME and BIRTHDATE column as respectively a Long, String and a Short from the underlying resultset. This also means that only these three columns will be returned, even though the query is using * and could return more than the three listed columns.
p18-1-1-6 = It is possible to leave out the type information for all or some of the scalars.
p18-1-1-7 = This is essentially the same query as before, but now <code>ResultSetMetaData</code> is used to determine the type of NAME and BIRTHDATE, where as the type of ID is explicitly specified.
p18-1-1-8 = How the java.sql.Types returned from ResultSetMetaData is mapped to Hibernate types is controlled by the Dialect. If a specific type is not mapped, or does not result in the expected type, it is possible to customize it via calls to <code>registerHibernateType</code> in the Dialect.

#		**********************************************************************************************************
#		18.1.2. Entity queries
#		**********************************************************************************************************

title18-1-2 = 18.1.2. Entity queries
p18-1-2-1 = The above queries were all about returning scalar values, basically returning the "raw" values from the resultset. The following shows how to get entity objects from a native sql query via <code>addEntity()</code>.
p18-1-2-2 = This query specified:
li18-1-2-1-1 = the SQL query string
li18-1-2-1-2 = the entity returned by the query
p18-1-2-3 = Assuming that Cat is mapped as a class with the columns ID, NAME and BIRTHDATE the above queries will both return a List where each element is a Cat entity.
p18-1-2-4 = If the entity is mapped with a <code>many-to-one</code> to another entity it is required to also return this when performing the native query, otherwise a database specific "column not found" error will occur. The additional columns will automatically be returned when using the * notation, but we prefer to be explicit as in the following example for a <code>many-to-one</code> to a Dog: 
p18-1-2-5 = This will allow <code>cat.getDog()</code> to function properly.

#		**********************************************************************************************************
#		18.1.3. Handling associations and collections
#		**********************************************************************************************************

title18-1-3 = 18.1.3. Handling associations and collections
p18-1-3-1 = It is possible to eagerly join in the Dog to avoid the possible extra roundtrip for initializing the proxy. This is done via the <code>addJoin()</code> method, which allows you to join in an association or collection.
p18-1-3-2 = In this example, the returned Cat's will have their dog property fully initialized without any extra roundtrip to the database. Notice that you added an alias name ("cat") to be able to specify the target property path of the join. It is possible to do the same eager joining for collections, e.g. if the <code>Cat</code> had a one-to-many to <code>Dog</code> instead.
p18-1-3-3 = At this stage you are reaching the limits of what is possible with native queries, without starting to enhance the sql queries to make them usable in Hibernate. Problems can arise when returning multiple entities of the same type or when the default alias/column names are not enough.

#		**********************************************************************************************************
#		18.1.4. Returning multiple entities
#		**********************************************************************************************************

title18-1-4 = 18.1.4. Returning multiple entities
p18-1-4-1 = Until now, the result set column names are assumed to be the same as the column names specified in the mapping document. This can be problematic for SQL queries that join multiple tables, since the same column names can appear in more than one table.
p18-1-4-2 = Column alias injection is needed in the following query (which most likely will fail):
p18-1-4-3 = The query was intended to return two Cat instances per row: a cat and its mother. The query will, however, fail because there is a conflict of names; the instances are mapped to the same column names. Also, on some databases the returned column aliases will most likely be on the form "c.ID", "c.NAME", etc. which are not equal to the columns specified in the mappings ("ID" and "NAME").
p18-1-4-4 = The following form is not vulnerable to column name duplication:
p18-1-4-5 = This query specified:
li18-1-4-1-1 = the SQL query string, with placeholders for Hibernate to inject column aliases
li18-1-4-1-2 = the entities returned by the query
p18-1-4-6 = The <code>cat.*</code> and <code>mother.*</code> notation used above is a shorthand for "all properties". Alternatively, you can list the columns explicitly, but even in this case Hibernate injects the SQL column aliases for each property. The placeholder for a column alias is just the property name qualified by the table alias. In the following example, you retrieve Cats and their mothers from a different table (cat_log) to the one declared in the mapping metadata. You can even use the property aliases in the where clause.

#		**********************************************************************************************************
#		18.1.4.1. Alias and property references
#		**********************************************************************************************************

title18-1-4-1 = 18.1.4.1. Alias and property references
p18-1-4-1-1 = In most cases the above alias injection is needed. For queries relating to more complex mappings, like composite properties, inheritance discriminators, collections etc., you can use specific aliases that allow Hibernate to inject the proper aliases.
p18-1-4-1-2 = The following table shows the different ways you can use the alias injection. Please note that the alias names in the result are simply examples; each alias will have a unique and probably different name when used.
p18-1-4-1-3 = <strong>Table 18.1. Alias injection names</strong>
th18-1-4-1-1-1 = Description
th18-1-4-1-1-2 = Syntax
th18-1-4-1-1-3 = Example
td18-1-4-1-1-1 = A simple property
td18-1-4-1-1-2 = '{'[aliasname].[propertyname]'}'
td18-1-4-1-1-3 = A_NAME as '{'item.name'}'
td18-1-4-1-1-4 = A composite property 
td18-1-4-1-1-5 = '{'[aliasname].[componentname].[propertyname]'}'
td18-1-4-1-1-6 = CURRENCY as '{'item.amount.currency'}', VALUE as '{'item.amount.value'}'
td18-1-4-1-1-7 = Discriminator of an entity
td18-1-4-1-1-8 = '{'[aliasname].class'}'
td18-1-4-1-1-9 = DISC as '{'item.class'}'
td18-1-4-1-1-10 = All properties of an entity
td18-1-4-1-1-11 = '{'[aliasname].*'}'
td18-1-4-1-1-12 = '{'item.*'}'
td18-1-4-1-1-13 = A collection key
td18-1-4-1-1-14 = '{'[aliasname].key'}'
td18-1-4-1-1-15 = ORGID as '{'coll.key'}'
td18-1-4-1-1-16 = The id of an collection
td18-1-4-1-1-17 = '{'[aliasname].id'}'
td18-1-4-1-1-18 = EMPID as '{'coll.id'}'
td18-1-4-1-1-19= The element of an collection
td18-1-4-1-1-20 = '{'[aliasname].element'}'
td18-1-4-1-1-21 = XID as '{'coll.element'}'
td18-1-4-1-1-22 = property of the element in the collection
td18-1-4-1-1-23 = '{'[aliasname].element.[propertyname]'}'
td18-1-4-1-1-24 = NAME as '{'coll.element.name'}'
td18-1-4-1-1-25 = All properties of the element in the collection
td18-1-4-1-1-26 = '{'[aliasname].element.*'}'
td18-1-4-1-1-27 = '{'coll.element.*'}'
td18-1-4-1-1-28 = All properties of the collection
td18-1-4-1-1-29 = '{'[aliasname].*'}'
td18-1-4-1-1-30 = '{'coll.*'}'

#		**********************************************************************************************************
#		18.1.5. Returning non-managed entities
#		**********************************************************************************************************

title18-1-5 = 18.1.5. Returning non-managed entities
p18-1-5-1 = It is possible to apply a ResultTransformer to native SQL queries, allowing it to return non-managed entities.
p18-1-5-2 = This query specified:
li18-1-5-1-1 = the SQL query string
li18-1-5-1-2 = a result transformer
p18-1-5-3 = The above query will return a list of CatDTO which has been instantiated and injected the values of NAME and BIRTHNAME into its corresponding properties or fields.

#		**********************************************************************************************************
#		18.1.6. Handling inheritance
#		**********************************************************************************************************

title18-1-6 = 18.1.6. Handling inheritance
p18-1-6-1 = Native SQL queries which query for entities that are mapped as part of an inheritance must include all properties for the baseclass and all its subclasses.

#		**********************************************************************************************************
#		18.1.7. Parameters
#		**********************************************************************************************************

title18-1-7 = 18.1.7. Parameters
p18-1-7-1 = Native SQL queries support positional as well as named parameters:

#		**********************************************************************************************************
#		18.2. Named SQL queries
#		**********************************************************************************************************

title18-2 = 18.2. Named SQL queries
p18-2-1 = Named SQL queries can also be defined in the mapping document and called in exactly the same way as a named HQL query (see <a href="#c11-4-1-7">Section 11.4.1.7, \u201CExternalizing named queries\u201D</a>). In this case, you do not need to call <code>addEntity()</code>.
p18-2-2 = The <code>&lt;return-join&gt;</code> element is use to join associations and the <code>&lt;load-collection&gt;</code> element is used to define queries which initialize collections,
p18-2-3 = A named SQL query may return a scalar value. You must declare the column alias and Hibernate type using the <code>&lt;return-scalar&gt;</code> element:
p18-2-4 = You can externalize the resultset mapping information in a <code>&lt;resultset&gt;</code> element which will allow you to either reuse them across several named queries or through the <code>setResultSetMapping()</code> API.
p18-2-5 = You can, alternatively, use the resultset mapping information in your hbm files directly in java code.
p18-2-6 = So far we have only looked at externalizing SQL queries using Hibernate mapping files. The same concept is also available with anntations and is called named native queries. You can use <code>@NamedNativeQuery</code> (<code>@NamedNativeQueries</code>) in conjunction with <code>@SqlResultSetMapping</code> (<code>@SqlResultSetMappings</code>). Like <code>@NamedQuery</code>, <code>@NamedNativeQuery</code> and <code>@SqlResultSetMapping</code> can be defined at class level, but their scope is global to the application. Lets look at a view examples.
p18-2-7 = <a href="#example-named-native-query-annotation-with-result-set-mapping">Example 18.7, \u201CNamed SQL query using @NamedNativeQuery together with @SqlResultSetMapping\u201D</a> shows how a resultSetMapping parameter is defined in <code>@NamedNativeQuery</code>. It represents the name of a defined <code>@SqlResultSetMapping</code>. The resultset mapping declares the entities retrieved by this native query. Each field of the entity is bound to an SQL alias (or column name). All fields of the entity including the ones of subclasses and the foreign key columns of related entities have to be present in the SQL query. Field definitions are optional provided that they map to the same column name as the one declared on the class property. In the example 2 entities, Night and Area, are returned and each property is declared and associated to a column name, actually the column name retrieved by the query.
p18-2-8 = In <a href="#example-implicit-result-set-mapping">Example 18.8, \u201CImplicit result set mapping\u201D</a> the result set mapping is implicit. We only describe the entity class of the result set mapping. The property / column mappings is done using the entity mapping values. In this case the model property is bound to the model_txt column.
p18-2-9 = Finally, if the association to a related entity involve a composite primary key, a <code>@FieldResult</code> element should be used for each foreign key column. The <code>@FieldResult</code> name is composed of the property name for the relationship, followed by a dot ("."), followed by the name or the field or property of the primary key. This can be seen in <a href="#example-field-result-annotation-with-associations">Example 18.9, \u201CUsing dot notation in @FieldResult for specifying associations \u201D</a>.
tc18-2-1 = If you retrieve a single entity using the default mapping, you can specify the <code>resultClass</code> attribute instead of <code>resultSetMapping</code>:
p18-2-10 = In some of your native queries, you'll have to return scalar values, for example when building report queries. You can map them in the <code>@SqlResultsetMapping</code> through <code>@ColumnResult</code>. You actually can even mix, entities and scalar returns in the same native query (this is probably not that common though).
p18-2-11 = An other query hint specific to native queries has been introduced: <code>org.hibernate.callable</code> which can be true or false depending on whether the query is a stored procedure or not.

#		**********************************************************************************************************
#		18.2.1. Using return-property to explicitly specify column/alias names
#		**********************************************************************************************************

title18-2-1 = 18.2.1. Using return-property to explicitly specify column/alias names
p18-2-1-1 = You can explicitly tell Hibernate what column aliases to use with <code>&lt;return-property&gt;</code>, instead of using the <pre>'{''}'</pre>-syntax to let Hibernate inject its own aliases.For example:
p18-2-1-2 = <code>&lt;return-property&gt;</code> also works with multiple columns. This solves a limitation with the '{''}'-syntax which cannot allow fine grained control of multi-column properties.
p18-2-1-3 = In this example <code>&lt;return-property&gt;</code> was used in combination with the '{''}'-syntax for injection. This allows users to choose how they want to refer column and properties.
p18-2-1-4 = If your mapping has a discriminator you must use <code>&lt;return-discriminator&gt;</code> to specify the discriminator column.

#		**********************************************************************************************************
#		18.2.2. Using stored procedures for querying
#		**********************************************************************************************************

title18-2-2 = 18.2.2. Using stored procedures for querying
p18-2-2-1 = Hibernate provides support for queries via stored procedures and functions. Most of the following documentation is equivalent for both. The stored procedure/function must return a resultset as the first out-parameter to be able to work with Hibernate. An example of such a stored function in Oracle 9 and higher is as follows:
p18-2-2-2 = To use this query in Hibernate you need to map it via a named query.
p18-2-2-3 = Stored procedures currently only return scalars and entities. <code>&lt;return-join&gt;</code> and <code>&lt;load-collection&gt;</code> are not supported.

#		**********************************************************************************************************
#		18.2.2.1. Rules/limitations for using stored procedures
#		**********************************************************************************************************

title18-2-2-1 = 18.2.2.1. Rules/limitations for using stored procedures
p18-2-2-1-1 = You cannot use stored procedures with Hibernate unless you follow some procedure/function rules. If they do not follow those rules they are not usable with Hibernate. If you still want to use these procedures you have to execute them via <code>session.connection()</code>. The rules are different for each database, since database vendors have different stored procedure semantics/syntax.
p18-2-2-1-2 = Stored procedure queries cannot be paged with <code>setFirstResult()/setMaxResults()</code>.
p18-2-2-1-3 = The recommended call form is standard SQL92: <code>'{' ? = call functionName(<parameters>) '}'</code> or <code>'{' ? = call procedureName(<parameters>'}'</code>. Native call syntax is not supported.
p18-2-2-1-4 = For Oracle the following rules apply:
li18-2-2-1-1-1 = A function must return a result set. The first parameter of a procedure must be an OUT that returns a result set. This is done by using a <code>SYS_REFCURSOR</code> type in Oracle 9 or 10. In Oracle you need to define a REF CURSOR type. See Oracle literature for further information.
p18-2-2-1-5 = For Sybase or MS SQL server the following rules apply:
li8-2-2-1-2-1 = The procedure must return a result set. Note that since these servers can return multiple result sets and update counts, Hibernate will iterate the results and take the first result that is a result set as its return value. Everything else will be discarded.
li8-2-2-1-2-2 = If you can enable <code>SET NOCOUNT ON</code> in your procedure it will probably be more efficient, but this is not a requirement.

#		**********************************************************************************************************
#		18.3. Custom SQL for create, update and delete
#		**********************************************************************************************************

title18-3 = 18.3. Custom SQL for create, update and delete
p18-3-1 = Hibernate can use custom SQL for create, update, and delete operations. The SQL can be overridden at the statement level or inidividual column level. This section describes statement overrides. For columns, see <a href="#c5-6">Section 5.6, \u201CColumn transformers: read and write expressions\u201D</a>. <a href="#example-custom-crdu-via-annotations">Example 18.11, \u201CCustom CRUD via annotations\u201D</a> shows how to define custom SQL operatons using annotations.
p18-3-2 = <code>@SQLInsert</code>, <code>@SQLUpdate</code>, <code>@SQLDelete</code>, <code>@SQLDeleteAll</code> respectively override the INSERT, UPDATE, DELETE, and DELETE all statement. The same can be achieved using Hibernate mapping files and the <code>&lt;sql-insert&gt;</code>, <code>&lt;sql-update&gt;</code> and <code>&lt;sql-delete&gt;</code> nodes. This can be seen in <a href="#example-custom-crdu-via-xml">Example 18.12, \u201CCustom CRUD XML\u201D</a>.
p18-3-3 = If you expect to call a store procedure, be sure to set the callable attribute to true. In annotations as well as in xml.
p18-3-4 = To check that the execution happens correctly, Hibernate allows you to define one of those three strategies:
li8-3-1-1 = none: no check is performed: the store procedure is expected to fail upon issues 
li8-3-1-2 = count: use of rowcount to check that the update is successful
li8-3-1-3 = param: like COUNT but using an output parameter rather that the standard mechanism
p18-3-5 = To define the result check style, use the check parameter which is again available in annoations as well as in xml.
p18-3-6 = You can use the exact same set of annotations respectively xml nodes to override the collection related statements -see <a href="#example-overriding-sql-collections-annotations">Example 18.13, \u201COverriding SQL statements for collections using annotations\u201D</a>.
tc18-3-1 = The parameter order is important and is defined by the order Hibernate handles properties. You can see the expected order by enabling debug logging for the org.hibernate.persister.entity level. With this level enabled Hibernate will print out the static SQL that is used to create, update, delete etc. entities. (To see the expected sequence, remember to not include your custom SQL through annotations or mapping files as that will override the Hibernate generated static sql)
p18-3-7 = Overriding SQL statements for secondary tables is also possible using <code>@org.hibernate.annotations.Table</code> and either (or all) attributes sqlInsert, sqlUpdate, sqlDelete:
p18-3-8 = The previous example also shows that you can give a comment to a given table (primary or secondary): This comment will be used for DDL generation.
tc18-3-2 = The SQL is directly executed in your database, so you can use any dialect you like. This will, however, reduce the portability of your mapping if you use database specific SQL.
p18-3-9 = Last but not least, stored procedures are in most cases required to return the number of rows inserted, updated and deleted. Hibernate always registers the first statement parameter as a numeric output parameter for the CUD operations:

#		**********************************************************************************************************
#		18.4. Custom SQL for loading
#		**********************************************************************************************************

title18-4 = 18.4. Custom SQL for loading
p18-4-1 = You can also declare your own SQL (or HQL) queries for entity loading. As with inserts, updates, and deletes, this can be done at the individual column level as described in <a href="#c5-6">Section 5.6, \u201CColumn transformers: read and write expressions\u201D</a> or at the statement level. Here is an example of a statement level override:
p18-4-2 = This is just a named query declaration, as discussed earlier. You can reference this named query in a class mapping:
p18-4-3 = This even works with stored procedures.
p18-4-4 = You can even define a query for collection loading:
p18-4-5 = You can also define an entity loader that loads a collection by join fetching:
p18-4-6 = The annotation equivalent <code>&lt;loader&gt;</code> is the @Loader annotation as seen in <a href="#example-custom-crdu-via-annotations">Example 18.11, \u201CCustom CRUD via annotations\u201D</a>.





























