
#		**********************************************************************************************************
#		Chapter 20. Improving performance
#		**********************************************************************************************************

title20 = Chapter 20. Improving performance

#		**********************************************************************************************************
#		20.1. Fetching strategies
#		**********************************************************************************************************

title20-1 = 20.1. Fetching strategies
p20-1-1 = Hibernate uses a fetching strategy to retrieve associated objects if the application needs to navigate the association. Fetch strategies can be declared in the O/R mapping metadata, or over-ridden by a particular HQL or <code>Criteria</code> query.
p20-1-2 = Hibernate defines the following fetching strategies:
li20-1-1-1 = <code>Join fetching</code>: Hibernate retrieves the associated instance or collection in the same <code>SELECT</code>, using an <code>OUTER JOIN</code>.
li20-1-1-2 = <code>Select fetching</code>: a second <code>SELECT</code> is used to retrieve the associated entity or collection. Unless you explicitly disable lazy fetching by specifying <code>lazy="false"</code>, this second select will only be executed when you access the association.
li20-1-1-3 = <code>Subselect fetching</code>: a second <code>SELECT</code> is used to retrieve the associated collections for all entities retrieved in a previous query or fetch. Unless you explicitly disable lazy fetching by specifying <code>lazy="false"</code>, this second select will only be executed when you access the association.
li20-1-1-4 = <code>Batch fetching</code>: an optimization strategy for select fetching. Hibernate retrieves a batch of entity instances or collections in a single <code>SELECT</code> by specifying a list of primary or foreign keys.
p20-1-3 = Hibernate also distinguishes between:
li20-1-2-1 = <code>Immediate fetching</code>: an association, collection or attribute is fetched immediately when the owner is loaded.
li20-1-2-2 = <code>Lazy collection fetching</code>: a collection is fetched when the application invokes an operation upon that collection. This is the default for collections.
li20-1-2-3 = <code>"Extra-lazy" collection fetching</code>: individual elements of the collection are accessed from the database as needed. Hibernate tries not to fetch the whole collection into memory unless absolutely needed. It is suitable for large collections.
li20-1-2-4 = <code>Proxy fetching</code>: a single-valued association is fetched when a method other than the identifier getter is invoked upon the associated object.
li20-1-2-5 = <code>"No-proxy" fetching</code>: a single-valued association is fetched when the instance variable is accessed. Compared to proxy fetching, this approach is less lazy; the association is fetched even when only the identifier is accessed. It is also more transparent, since no proxy is visible to the application. This approach requires buildtime bytecode instrumentation and is rarely necessary.
li20-1-2-6 = <code>Lazy attribute fetching</code>: an attribute or single valued association is fetched when the instance variable is accessed. This approach requires buildtime bytecode instrumentation and is rarely necessary.
p20-1-4 = We have two orthogonal notions here: when is the association fetched and how is it fetched. It is important that you do not confuse them. We use fetch to tune performance. We can use lazy to define a contract for what data is always available in any detached instance of a particular class.

#		**********************************************************************************************************
#		20.1.1. Working with lazy associations
#		**********************************************************************************************************

title20-1-1 = 20.1.1. Working with lazy associations
p20-1-1-1 = By default, Hibernate uses lazy select fetching for collections and lazy proxy fetching for single-valued associations. These defaults make sense for most associations in the majority of applications.
p20-1-1-2 = If you set <code>hibernate.default_batch_fetch_size</code>, Hibernate will use the batch fetch optimization for lazy fetching. This optimization can also be enabled at a more granular level.
p20-1-1-3 = Please be aware that access to a lazy association outside of the context of an open Hibernate session will result in an exception. For example:
p20-1-1-4 = Since the permissions collection was not initialized when the Session was closed, the collection will not be able to load its state. Hibernate does not support lazy initialization for detached objects. This can be fixed by moving the code that reads from the collection to just before the transaction is committed.
p20-1-1-5 = Alternatively, you can use a non-lazy collection or association, by specifying <code>lazy="false"</code> for the association mapping. However, it is intended that lazy initialization be used for almost all collections and associations. If you define too many non-lazy associations in your object model, Hibernate will fetch the entire database into memory in every transaction.
p20-1-1-6 = On the other hand, you can use join fetching, which is non-lazy by nature, instead of select fetching in a particular transaction. We will now explain how to customize the fetching strategy. In Hibernate, the mechanisms for choosing a fetch strategy are identical for single-valued associations and collections.

#		**********************************************************************************************************
#		20.1.2. Tuning fetch strategies
#		**********************************************************************************************************

title20-1-2 = 20.1.2. Tuning fetch strategies
p20-1-2-1 = Select fetching (the default) is extremely vulnerable to N+1 selects problems, so we might want to enable join fetching in the mapping document:
p20-1-2-2 = The <code>fetch</code> strategy defined in the mapping document affects:
li20-1-2-1-1 = retrieval via <code>get()</code> or <code>load()</code>
li20-1-2-1-2 = retrieval that happens implicitly when an association is navigated
li20-1-2-1-3 = <code>Criteria</code> queries
li20-1-2-1-4 = HQL queries if <code>subselect</code> fetching is used
p20-1-2-3 = Irrespective of the fetching strategy you use, the defined non-lazy graph is guaranteed to be loaded into memory. This might, however, result in several immediate selects being used to execute a particular HQL query.
p20-1-2-4 = Usually, the mapping document is not used to customize fetching. Instead, we keep the default behavior, and override it for a particular transaction, using left join fetch in HQL. This tells Hibernate to fetch the association eagerly in the first select, using an outer join. In the Criteria query API, you would use <code>setFetchMode(FetchMode.JOIN)</code>.
p20-1-2-5 = If you want to change the fetching strategy used by <code>get()</code> or <code>load()</code>, you can use a Criteria query. For example:
p20-1-2-6 = This is Hibernate's equivalent of what some ORM solutions call a "fetch plan".
p20-1-2-7 = A completely different approach to problems with N+1 selects is to use the second-level cache.

#		**********************************************************************************************************
#		20.1.3. Single-ended association proxies
#		**********************************************************************************************************

title20-1-3 = 20.1.3. Single-ended association proxies
p20-1-3-1 = Lazy fetching for collections is implemented using Hibernate's own implementation of persistent collections. However, a different mechanism is needed for lazy behavior in single-ended associations. The target entity of the association must be proxied. Hibernate implements lazy initializing proxies for persistent objects using runtime bytecode enhancement which is accessed via the bytecode provider.
p20-1-3-2 = At startup, Hibernate generates proxies by default for all persistent classes and uses them to enable lazy fetching of <code>many-to-one</code> and <code>one-to-one</code> associations.
p20-1-3-3 = The mapping file may declare an interface to use as the proxy interface for that class, with the proxy attribute. By default, Hibernate uses a subclass of the class. The proxied class must implement a default constructor with at least package visibility. This constructor is recommended for all persistent classes.
p20-1-3-4 = There are potential problems to note when extending this approach to polymorphic classes.For example:
p20-1-3-5 = Firstly, instances of Cat will never be castable to DomesticCat, even if the underlying instance is an instance of <code>DomesticCat</code>:
p20-1-3-6 = Secondly, it is possible to break proxy ==:
p20-1-3-7 = However, the situation is not quite as bad as it looks. Even though we now have two references to different proxy objects, the underlying instance will still be the same object:
p20-1-3-8 = Third, you cannot use a bytecode provider generated proxy for a <code>final</code> class or a class with any <code>final</code> methods.
p20-1-3-9 = Finally, if your persistent object acquires any resources upon instantiation (e.g. in initializers or default constructor), then those resources will also be acquired by the proxy. The proxy class is an actual subclass of the persistent class.
p20-1-3-10 = These problems are all due to fundamental limitations in Java's single inheritance model. To avoid these problems your persistent classes must each implement an interface that declares its business methods. You should specify these interfaces in the mapping file where <code>CatImpl</code> implements the interface <code>Cat</code> and <code>DomesticCatImpl</code> implements the interface <code>DomesticCat</code>. For example:
p20-1-3-11 = Then proxies for instances of Cat and DomesticCat can be returned by <code>load()</code> or <code>iterate()</code>.
nc20-1-3-1 = <code>list()</code> does not usually return proxies.
p20-1-3-12 = Relationships are also lazily initialized. This means you must declare any properties to be of type <code>Cat</code>, not <code>CatImpl</code>.
p20-1-3-13 = Certain operations do not require proxy initialization:
li20-1-3-1-1 = <code>equals()</code>: if the persistent class does not override <code>equals()</code>
li20-1-3-1-2 = <code>hashCode()</code>: if the persistent class does not override <code>hashCode()</code>
li20-1-3-1-3 = The identifier getter method
p20-1-3-14 = Hibernate will detect persistent classes that override <code>equals()</code> or <code>hashCode()</code>.
p20-1-3-15 = By choosing <code>lazy="no-proxy"</code> instead of the default <code>lazy="proxy"</code>, you can avoid problems associated with typecasting. However, buildtime bytecode instrumentation is required, and all operations will result in immediate proxy initialization.

#		**********************************************************************************************************
#		20.1.4. Initializing collections and proxies
#		**********************************************************************************************************

title20-1-4 = 20.1.4. Initializing collections and proxies
p20-1-4-1 = A <code>LazyInitializationException</code> will be thrown by Hibernate if an uninitialized collection or proxy is accessed outside of the scope of the <code>Session</code>, i.e., when the entity owning the collection or having the reference to the proxy is in the detached state.
p20-1-4-2 = Sometimes a proxy or collection needs to be initialized before closing the Session. You can force initialization by calling <code>cat.getSex()</code> or <code>cat.getKittens().size()</code>, for example. However, this can be confusing to readers of the code and it is not convenient for generic code.
p20-1-4-3 = The static methods <code>Hibernate.initialize()</code> and <code>Hibernate.isInitialized()</code>, provide the application with a convenient way of working with lazily initialized collections or proxies. <code>Hibernate.initialize(cat)</code> will force the initialization of a proxy, cat, as long as its Session is still open. <code>Hibernate.initialize( cat.getKittens() )</code> has a similar effect for the collection of kittens.
p20-1-4-4 = Another option is to keep the Session open until all required collections and proxies have been loaded. In some application architectures, particularly where the code that accesses data using Hibernate, and the code that uses it are in different application layers or different physical processes, it can be a problem to ensure that the Session is open when a collection is initialized. There are two basic ways to deal with this issue:
li20-1-4-1-1 = In a web-based application, a servlet filter can be used to close the Session only at the end of a user request, once the rendering of the view is complete (the Open Session in View pattern). Of course, this places heavy demands on the correctness of the exception handling of your application infrastructure. It is vitally important that the Session is closed and the transaction ended before returning to the user, even when an exception occurs during rendering of the view. See the Hibernate Wiki for examples of this "Open Session in View" pattern.
li20-1-4-1-2 = In an application with a separate business tier, the business logic must "prepare" all collections that the web tier needs before returning. This means that the business tier should load all the data and return all the data already initialized to the presentation/web tier that is required for a particular use case. Usually, the application calls <code>Hibernate.initialize()</code> for each collection that will be needed in the web tier (this call must occur before the session is closed) or retrieves the collection eagerly using a Hibernate query with a <code>FETCH</code> clause or a <code>FetchMode.JOIN</code> in Criteria. This is usually easier if you adopt the Command pattern instead of a Session Facade.
li20-1-4-1-3 = You can also attach a previously loaded object to a new Session with <code>merge()</code> or <code>lock()</code> before accessing uninitialized collections or other proxies. Hibernate does not, and certainly should not, do this automatically since it would introduce impromptu transaction semantics.
p20-1-4-5 = Sometimes you do not want to initialize a large collection, but still need some information about it, like its size, for example, or a subset of the data.
p20-1-4-6 = You can use a collection filter to get the size of a collection without initializing it:
p20-1-4-7 = The <code>createFilter()</code> method is also used to efficiently retrieve subsets of a collection without needing to initialize the whole collection:

#		**********************************************************************************************************
#		20.1.5. Using batch fetching
#		**********************************************************************************************************

title20-1-5 = 20.1.5. Using batch fetching
p20-1-5-1 = Using batch fetching, Hibernate can load several uninitialized proxies if one proxy is accessed. Batch fetching is an optimization of the lazy select fetching strategy. There are two ways you can configure batch fetching: on the class level and the collection level.
p20-1-5-2 = Batch fetching for classes/entities is easier to understand. Consider the following example: at runtime you have 25 <code>Cat</code> instances loaded in a Session, and each Cat has a reference to its owner, a <code>Person</code>. The <code>Person</code> class is mapped with a proxy, <code>lazy="true"</code>. If you now iterate through all cats and call <code>getOwner()</code> on each, Hibernate will, by default, execute 25 SELECT statements to retrieve the proxied owners. You can tune this behavior by specifying a <code>batch-size</code> in the mapping of <code>Person</code>:
p20-1-5-3 = With this <code>batch-size</code> specified, Hibernate will now execute queries on demand when need to access the uninitialized proxy, as above, but the difference is that instead of querying the exactly proxy entity that being accessed, it will query more Person's owner at once, so, when accessing other person's owner, it may already been initialized by this batch fetch with only a few ( much less than 25) queries will be executed.
p20-1-5-4 = This behavior is controlled by the batch-size and batch fetch style configuration. The batch fetch style configuration ( <code>hibernate.batch_fetch_style</code> ) is a new performance improvement since 4.2.0, there are 3 different strategies provided, which is legacy, padded and dynamic.
lip20-1-5-1-1-1 = <code>LEGACY</code>
lip20-1-5-1-1-2 = The legacy algorithm where we keep a set of pre-built batch sizes based on <code>org.hibernate.internal.util.collections.ArrayHelper#getBatchSizes</code>. Batches are performed using the next-smaller pre-built batch size from the number of existing batchable identifiers.
lip20-1-5-1-1-3 = In the above example, with a batch-size setting of 25 the pre-built batch sizes would be [25, 12, 10, 9, 8, 7, .., 1].
lip20-1-5-1-1-4 = And since there are 25 persons' owner to be initialized, then only one query will be executed using these 25 owners' identifier.
lip20-1-5-1-1-5 = But in another case, suppose there are only 24 persons, there will be 3 queries (12, 10, 2) will be executed to go through all person's owner, and the query will looks like :
lip20-1-5-1-2-1 = <code>PADDED</code>
lip20-1-5-1-2-2 = This is kind of similar with the legacy algorithm, it uses the pre-build batch sizes based on same <code>org.hibernate.internal.util.collections.ArrayHelper#getBatchSizes</code>. The difference is that here hibernate will use the next-bigger batch size and pads the extra identifier placeholders.
lip20-1-5-1-2-3 = So, using the same example above, initializing 25 persons the query would be same as above, only 1 query will be executed to batch query all the owners.
lip20-1-5-1-2-4 = However, the attempt to batch load 24 owners would result just a single batch of size 25, the identifiers to load would be "padded" (aka, repeated) to make up the difference.
lip20-1-5-1-3-1 = <code>DYNAMIC</code>
lip20-1-5-1-3-2 = Dynamically builds its SQL based on the actual number of available ids. Does still limit to the batch-size defined on the entity.
p20-1-5-5 = You can also enable batch fetching of collections. For example, if each <code>Person</code> has a lazy collection of <code>Cats</code>, and 10 persons are currently loaded in the Session, iterating through all persons will generate 10 <code>SELECTs</code>, one for every call to <code>getCats()</code>. If you enable batch fetching for the <code>cats</code> collection in the mapping of <code>Person</code>, Hibernate can pre-fetch collections:
p20-1-5-6 = For example, with a <code>batch-size</code> of 3 and using legacy batch style, Hibernate will load 3, 3, 3, 1 collections in four <code>SELECTs</code>. Again, the value of the attribute depends on the expected number of uninitialized collections in a particular <code>Session</code>.
p20-1-5-7 = Batch fetching of collections is particularly useful if you have a nested tree of items, i.e. the typical bill-of-materials pattern. However, a nested set or a materialized path might be a better option for read-mostly trees.

#		**********************************************************************************************************
#		20.1.6. Using subselect fetching
#		**********************************************************************************************************

title20-1-6 = 20.1.6. Using subselect fetching
p20-1-6-1 = If one lazy collection or single-valued proxy has to be fetched, Hibernate will load all of them, re-running the original query in a subselect. This works in the same way as batch-fetching but without the piecemeal loading.

#		**********************************************************************************************************
#		20.1.7. Fetch profiles
#		**********************************************************************************************************

title20-1-7 = 20.1.7. Fetch profiles
p20-1-7-1 = Another way to affect the fetching strategy for loading associated objects is through something called a fetch profile, which is a named configuration associated with the <code>org.hibernate.SessionFactory</code> but enabled, by name, on the <code>org.hibernate.Session</code>. Once enabled on a <code>org.hibernate.Session</code>, the fetch profile will be in affect for that <code>org.hibernate.Session</code> until it is explicitly disabled.
p20-1-7-2 = So what does that mean? Well lets explain that by way of an example which show the different available approaches to configure a fetch profile:
p20-1-7-3 = Now normally when you get a reference to a particular customer, that customer's set of orders will be lazy meaning we will not yet have loaded those orders from the database. Normally this is a good thing. Now lets say that you have a certain use case where it is more efficient to load the customer and their orders together. One way certainly is to use "dynamic fetching" strategies via an HQL or criteria queries. But another option is to use a fetch profile to achieve that. The following code will load both the customer andtheir orders:
nc20-1-7-1 = <code>@FetchProfile</code> definitions are global and it does not matter on which class you place them. You can place the <code>@FetchProfile</code> annotation either onto a class or package (package-info.java). In order to define multiple fetch profiles for the same class or package <code>@FetchProfiles</code> can be used.
p20-1-7-4 = Currently only join style fetch profiles are supported, but they plan is to support additional styles. See <a href="http://opensource.atlassian.com/projects/hibernate/browse/HHH-3414">HHH-3414</a> for details.

#		**********************************************************************************************************
#		20.1.8. Using lazy property fetching
#		**********************************************************************************************************

title20-1-8 = 20.1.8. Using lazy property fetching
p20-1-8-1 = Hibernate supports the lazy fetching of individual properties. This optimization technique is also known as fetch groups. Please note that this is mostly a marketing feature; optimizing row reads is much more important than optimization of column reads. However, only loading some properties of a class could be useful in extreme cases. For example, when legacy tables have hundreds of columns and the data model cannot be improved.
p20-1-8-2 = To enable lazy property loading, set the <code>lazy</code> attribute on your particular property mappings:
p20-1-8-3 = Lazy property loading requires buildtime bytecode instrumentation. If your persistent classes are not enhanced, Hibernate will ignore lazy property settings and return to immediate fetching.
p20-1-8-4 = For bytecode instrumentation, use the following Ant task:
p20-1-8-5 = A different way of avoiding unnecessary column reads, at least for read-only transactions, is to use the projection features of HQL or Criteria queries. This avoids the need for buildtime bytecode processing and is certainly a preferred solution.
p20-1-8-6 = You can force the usual eager fetching of properties using <code>fetch all properties</code> in HQL.

#		**********************************************************************************************************
#		20.2. The Second Level Cache
#		**********************************************************************************************************

title20-2 = 20.2. The Second Level Cache
p20-2-1 = A Hibernate <code>Session</code> is a transaction-level cache of persistent data. It is possible to configure a cluster or JVM-level (<code>SessionFactory</code>-level) cache on a class-by-class and collection-by-collection basis. You can even plug in a clustered cache. Be aware that caches are not aware of changes made to the persistent store by another application. They can, however, be configured to regularly expire cached data.
p20-2-2 = You have the option to tell Hibernate which caching implementation to use by specifying the name of a class that implements <code>org.hibernate.cache.spi.CacheProvider</code> using the property <code>hibernate.cache.provider_class</code>. Hibernate is bundled with a number of built-in integrations with the open-source cache providers that are listed in <a href="##cacheproviders">Table 20.1, \u201CCache Providers\u201D</a>. You can also implement your own and plug it in as outlined above. Note that versions prior to Hibernate 3.2 use EhCache as the default cache provider.
p20-2-3 = <strong>Table 20.1. Cache Providers</strong>
th20-2-1-1 = Cache
th20-2-1-2 = Provider class
th20-2-1-3 = Type
th20-2-1-4 = Cluster Safe
th20-2-1-5 = Query Cache Supported
td20-2-1-1 = ConcurrentHashMap (only for testing purpose, in hibernate-testing module)
td20-2-1-2 = org.hibernate.testing.cache.CachingRegionFactory
td20-2-1-3 = memory
td20-2-1-4 = 
td20-2-1-5 = yes
td20-2-1-6 = EHCache
td20-2-1-7 = org.hibernate.cache.ehcache.EhCacheRegionFactory
td20-2-1-8 = memory, disk, transactional, clustered
td20-2-1-9 = yes
td20-2-1-10 = yes
td20-2-1-11 = Infinispan
td20-2-1-12 = org.hibernate.cache.infinispan.InfinispanRegionFactory
td20-2-1-13 = clustered (ip multicast), transactional
td20-2-1-14 = yes (replication or invalidation)
td20-2-1-15 = yes (clock sync req.)

#		**********************************************************************************************************
#		20.2.1. Cache mappings
#		**********************************************************************************************************

title20-2-1 = 20.2.1. Cache mappings
p20-2-1-1 = As we have done in previous chapters we are looking at the two different possibiltites to configure caching. First configuration via annotations and then via Hibernate mapping files.
p20-2-1-2 = By default, entities are not part of the second level cache and we recommend you to stick to this setting. However, you can override this by setting the <code>shared-cache-mode</code> element in your <code>persistence.xml</code> file or by using the <code>javax.persistence.sharedCache.mode</code> property in your configuration. The following values are possible:
li20-2-1-1-1 = <code>ENABLE_SELECTIVE</code> (Default and recommended value): entities are not cached unless explicitly marked as cacheable.
li20-2-1-1-2 = <code>DISABLE_SELECTIVE</code>: entities are cached unless explicitly marked as not cacheable.
li20-2-1-1-3 = <code>ALL</code>: all entities are always cached even if marked as non cacheable.
li20-2-1-1-4 = <code>NONE</code>: no entity are cached even if marked as cacheable. This option can make sense to disable second-level cache altogether.
p20-2-1-3 = The cache concurrency strategy used by default can be set globaly via the <code>hibernate.cache.default_cache_concurrency_strategy</code> configuration property. The values for this property are:
li20-2-1-2-1 = <code>read-only</code>
li20-2-1-2-2 = <code>read-write</code>
li20-2-1-2-3 = <code>nonstrict-read-write</code>
li20-2-1-2-4 = <code>transactional</code>
nc20-2-1-1 = It is recommended to define the cache concurrency strategy per entity rather than using a global one. Use the <code>@org.hibernate.annotations.Cache</code> annotation for that.
p20-2-1-4 = Hibernate also let's you cache the content of a collection or the identifiers if the collection contains other entities. Use the <code>@Cache</code> annotation on the collection property.
p20-2-1-5 = <a href="#example-cache-annotation-with-attributes">Example 20.7, \u201C@Cache annotation with attributes\u201D</a>shows the <code>@org.hibernate.annotations.Cache</code> annotations with its attributes. It allows you to define the caching strategy and region of a given second level cache.
td20-2-1-1-1 = <code>usage</code>: the given cache concurrency strategy (NONE, READ_ONLY, NONSTRICT_READ_WRITE, READ_WRITE, TRANSACTIONAL)
td20-2-1-1-2 = <code>region</code> (optional): the cache region (default to the fqcn of the class or the fq role name of the collection)
td20-2-1-1-3 = <code>include</code> (optional): all to include all properties, non-lazy to only include non lazy properties (default all).
p20-2-1-6 = Let's now take a look at Hibernate mapping files. There the <code>&lt;cache&gt;</code> element of a class or collection mapping is used to configure the second level cache. Looking at <a href="#example-hibernate-cache-mapping-element">Example 20.8, \u201CThe Hibernate &lt;cache&gt; mapping element\u201D</a> the parallels to anotations is obvious.
td20-2-1-2-1 = <code>usage</code> (required) specifies the caching strategy: <code>transactional</code>, <code>read-write</code>, <code>nonstrict-read-write</code> or <code>read-only</code> 
td20-2-1-2-2 = <code>region</code> (optional: defaults to the class or collection role name): specifies the name of the second level cache region
td20-2-1-2-3 = <code>include</code> (optional: defaults to all) <code>non-lazy</code>: specifies that properties of the entity mapped with <code>lazy="true"</code> cannot be cached when attribute-level lazy fetching is enabled
p20-2-1-7 = Alternatively to <code>&lt;cache&gt;</code>, you can use <code>&lt;class-cache&gt;</code> and <code>&lt;collection-cache&gt;</code> elements in <code>hibernate.cfg.xml</code>.
p20-2-1-8 = Let's now have a closer look at the different usage strategies

#		**********************************************************************************************************
#		20.2.2. Strategy: read only
#		**********************************************************************************************************

title20-2-2 = 20.2.2. Strategy: read only
p20-2-2-1 = If your application needs to read, but not modify, instances of a persistent class, a <code>read-only</code> cache can be used. This is the simplest and optimal performing strategy. It is even safe for use in a cluster.

#		**********************************************************************************************************
#		20.2.3. Strategy: read/write
#		**********************************************************************************************************

title20-2-3 = 20.2.3. Strategy: read/write
p20-2-3-1 = If the application needs to update data, a <code>read-write</code> cache might be appropriate. This cache strategy should never be used if serializable transaction isolation level is required. If the cache is used in a JTA environment, you must specify the property <code>hibernate.transaction.manager_lookup_class</code> and naming a strategy for obtaining the JTA TransactionManager. In other environments, you should ensure that the transaction is completed when <code>Session.close()</code> or <code>Session.disconnect()</code> is called. If you want to use this strategy in a cluster, you should ensure that the underlying cache implementation supports locking. The built-in cache providers do not support locking.

#		**********************************************************************************************************
#		20.2.4. Strategy: nonstrict read/write
#		**********************************************************************************************************

title20-2-4 = 20.2.4. Strategy: nonstrict read/write
p20-2-4-1 = If the application only occasionally needs to update data (i.e. if it is extremely unlikely that two transactions would try to update the same item simultaneously), and strict transaction isolation is not required, a <code>nonstrict-read-write</code> cache might be appropriate. If the cache is used in a JTA environment, you must specify <code>hibernate.transaction.manager_lookup_class</code>. In other environments, you should ensure that the transaction is completed when <code>Session.close()</code> or <code>Session.disconnect()</code> is called.

#		**********************************************************************************************************
#		20.2.5. Strategy: transactional
#		**********************************************************************************************************

title20-2-5 = 20.2.5. Strategy: transactional
p20-2-5-1 = The <code>transactional</code> cache strategy provides support for fully transactional cache providers such as JBoss TreeCache. Such a cache can only be used in a JTA environment and you must specify <code>hibernate.transaction.manager_lookup_class</code>.

#		**********************************************************************************************************
#		20.2.6. Cache-provider/concurrency-strategy compatibility
#		**********************************************************************************************************

title20-2-6 = 20.2.6. Cache-provider/concurrency-strategy compatibility
ic20-2-6-1 = None of the cache providers support all of the cache concurrency strategies.
p20-2-6-1 = The following table shows which providers are compatible with which concurrency strategies.
p20-2-6-2 = <strong>Table 20.2. Cache Concurrency Strategy Support</strong>
th20-2-6-1-1 = Cache
th20-2-6-1-2 = read-only
th20-2-6-1-3 = nonstrict-read-write
th20-2-6-1-4 = read-write
th20-2-6-1-5 = transactional
td20-2-6-1-1 = ConcurrentHashMap (not intended for production use)
td20-2-6-1-2 = yes
td20-2-6-1-3 = yes
td20-2-6-1-4 = yes
td20-2-6-1-5 = 
td20-2-6-1-6 = EHCache
td20-2-6-1-7 = yes
td20-2-6-1-8 = yes
td20-2-6-1-9 = yes
td20-2-6-1-10 = yes
td20-2-6-1-11 = Infinispan
td20-2-6-1-12 = yes
td20-2-6-1-13 = 
td20-2-6-1-14 = 
td20-2-6-1-15 = yes

#		**********************************************************************************************************
#		20.3. Managing the caches
#		**********************************************************************************************************

title20-3 = 20.3. Managing the caches
p20-3-1 = Whenever you pass an object to <code>save()</code>, <code>update()</code> or <code>saveOrUpdate()</code>, and whenever you retrieve an object using <code>load()</code>, <code>get()</code>, <code>list()</code>, <code>iterate()</code> or <code>scroll()</code>, that object is added to the internal cache of the Session.
p20-3-2 = When <code>flush()</code> is subsequently called, the state of that object will be synchronized with the database. If you do not want this synchronization to occur, or if you are processing a huge number of objects and need to manage memory efficiently, the <code>evict()</code> method can be used to remove the object and its collections from the first-level cache.
p20-3-3 = The Session also provides a <code>contains()</code> method to determine if an instance belongs to the session cache.
p20-3-4 = To evict all objects from the session cache, call <code>Session.clear()</code>
p20-3-5 = For the second-level cache, there are methods defined on <code>SessionFactory</code> for evicting the cached state of an instance, entire class, collection instance or entire collection role.
p20-3-6 = The CacheMode controls how a particular session interacts with the second-level cache:
li20-3-1-1 = <code>CacheMode.NORMAL</code>: will read items from and write items to the second-level cache
li20-3-1-2 = <code>CacheMode.GET</code>: will read items from the second-level cache. Do not write to the second-level cache except when updating data
li20-3-1-3 = <code>CacheMode.PUT</code>: will write items to the second-level cache. Do not read from the second-level cache
li20-3-1-4 = <code>CacheMode.REFRESH</code>: will write items to the second-level cache. Do not read from the second-level cache. Bypass the effect of <code>hibernate.cache.use_minimal_puts</code> forcing a refresh of the second-level cache for all items read from the database
p20-3-7 = To browse the contents of a second-level or query cache region, use the <code>Statistics</code> API:
p20-3-8 = You will need to enable statistics and, optionally, force Hibernate to keep the cache entries in a more readable format:

#		**********************************************************************************************************
#		20.4. The Query Cache
#		**********************************************************************************************************

title20-4 = 20.4. The Query Cache
p20-4-1 = Query result sets can also be cached. This is only useful for queries that are run frequently with the same parameters.

#		**********************************************************************************************************
#		20.4.1. Enabling query caching
#		**********************************************************************************************************

title20-4-1 = 20.4.1. Enabling query caching
p20-4-1-1 = Caching of query results introduces some overhead in terms of your applications normal transactional processing. For example, if you cache results of a query against Person Hibernate will need to keep track of when those results should be invalidated because changes have been committed against Person. That, coupled with the fact that most applications simply gain no benefit from caching query results, leads Hibernate to disable caching of query results by default. To use query caching, you will first need to enable the query cache:
p20-4-1-2 = This setting creates two new cache regions:
li20-4-1-1-1 = <code>org.hibernate.cache.internal.StandardQueryCache</code>, holding the cached query results
li20-4-1-1-2 = <code>org.hibernate.cache.spi.UpdateTimestampsCache</code>, holding timestamps of the most recent updates to queryable tables. These are used to validate the results as they are served from the query cache.
ic20-4-1-1 = If you configure your underlying cache implementation to use expiry or timeouts is very important that the cache timeout of the underlying cache region for the UpdateTimestampsCache be set to a higher value than the timeouts of any of the query caches. In fact, we recommend that the the UpdateTimestampsCache region not be configured for expiry at all. Note, in particular, that an LRU cache expiry policy is never appropriate.
p20-4-1-3 = As mentioned above, most queries do not benefit from caching or their results. So by default, individual queries are not cached even after enabling query caching. To enable results caching for a particular query, call <code>org.hibernate.Query.setCacheable(true)</code>. This call allows the query to look for existing cache results or add its results to the cache when it is executed.
nc20-4-1-1 = The query cache does not cache the state of the actual entities in the cache; it caches only identifier values and results of value type. For this reaso, the query cache should always be used in conjunction with the second-level cache for those entities expected to be cached as part of a query result cache (just as with collection caching).

#		**********************************************************************************************************
#		20.4.2. Query cache regions
#		**********************************************************************************************************

title20-4-2 = 20.4.2. Query cache regions
p20-4-2-1 = If you require fine-grained control over query cache expiration policies, you can specify a named cache region for a particular query by calling <code>Query.setCacheRegion()</code>.
p20-4-2-2 = If you want to force the query cache to refresh one of its regions (disregard any cached results it finds there) you can use <code>org.hibernate.Query.setCacheMode(CacheMode.REFRESH)</code>. In conjunction with the region you have defined for the given query, Hibernate will selectively force the results cached in that particular region to be refreshed. This is particularly useful in cases where underlying data may have been updated via a separate process and is a far more efficient alternative to bulk eviction of the region via <code>org.hibernate.SessionFactory.evictQueries()</code>.

#		**********************************************************************************************************
#		20.5. Bytecode Enhancement
#		**********************************************************************************************************

title20-5 = 20.5. Bytecode Enhancement
p20-5-1 = Hibernate internally needs an entry ( <code>org.hibernate.engine.spi.EntityEntry</code> ) to tell the current state of an object with respect to its persistent state, when the object is associated with a Session. However, maintaining this association was kind of heavy operation due to lots of other rules must by applied, since 4.2.0, there is a new improvement designed for this purpose, which will reduce session-related memory and CPU overloads.
p20-5-2 = Basically, the idea is, instead of having a customized ( kind of heavy and which was usually identified as hotspot ) map to do the look up, we change it to
p20-5-3 = There are three ways to get benefits from this new improvement:

#		**********************************************************************************************************
#		20.5.1. Implementing org.hibernate.engine.spi.ManagedEntity interface
#		**********************************************************************************************************

title20-5-1 = 20.5.1. Implementing org.hibernate.engine.spi.ManagedEntity interface
p20-5-1-1 = An entity can choose to implement this interface by itself, then it is the entity's responsibility to maintain the bi-association that essentially provides access to information about an instance's association to a Session/EntityManager. More info about org.hibernate.engine.spi.ManagedEntity please find from its javadoc.

#		**********************************************************************************************************
#		20.5.2. Runtime instrument
#		**********************************************************************************************************

title20-5-2 = 20.5.2. Runtime instrument
p20-5-2-1 = Sometimes, you probably don't want to implement an intrusive interface, maybe due to portable concern, which is fine and Hibernate will take care of this internally with a wrapper class which implements that interface, and also an internal cache that maps this entity instance and the wrapper together.
p20-5-2-2 = Obviously, this is the easiest way to choose, since it doesn't require any change of the project source code, but it also cost more memory and CUP usage, comparing to the first one.

#		**********************************************************************************************************
#		20.5.3. Build-time instrument
#		**********************************************************************************************************

title20-5-3 = 20.5.3. Build-time instrument
p20-5-3-1 = Besides the above two approaches, Hibernate also provides a third choice which is build time bytecode enhancement. Applications can use enhanced entity classes, annotated with either <code>javax.persistence.Entity</code> or composite <code>javax.persistence.Embeddable</code>.
p20-5-3-2 = 1. Ant Task
p20-5-3-3 = To use the task <code>org.hibernate.tool.enhance.EnhancementTask</code> define a taskdef and call the task, as shown below. This code uses a pre-defined classpathref and a property referencing the compiled classes directory.
nc20-5-3-1 = The EnhancementTask is intended as a total replacement for InstrumentTask. Further, it is also incompatible with InstrumentTask, so any existing instrumented classes will need to be built from source again.
p20-5-3-4 = 2. Maven Plugin
p20-5-3-5 = The Maven Plugin uses a Mojo descriptor to attach the Mojo to the compile phase for your project.
p20-5-3-6 = 3. Gradle Plugin
p20-5-3-7 = The Gradle plugin adds an enhance task using the output directory of the compile task as the source location of entity class files to enhance.

#		**********************************************************************************************************
#		20.6. Understanding Collection performance
#		**********************************************************************************************************

title20-6 = 20.6. Understanding Collection performance
p20-6-1 = In the previous sections we have covered collections and their applications. In this section we explore some more issues in relation to collections at runtime.

#		**********************************************************************************************************
#		20.6.1. Taxonomy
#		**********************************************************************************************************

title20-6-1 = 20.6.1. Taxonomy
p20-6-1-1 = Hibernate defines three basic kinds of collections:
li20-6-1-1-1 = collections of values
li20-6-1-1-2 = one-to-many associations
li20-6-1-1-3 = many-to-many associations
p20-6-1-2 = This classification distinguishes the various table and foreign key relationships but does not tell us quite everything we need to know about the relational model. To fully understand the relational structure and performance characteristics, we must also consider the structure of the primary key that is used by Hibernate to update or delete collection rows. This suggests the following classification:
li20-6-1-2-1 = indexed collections
li20-6-1-2-2 = sets
li20-6-1-2-3 = bags
p20-6-1-3 = All indexed collections (maps, lists, and arrays) have a primary key consisting of the <code>&lt;key&gt;</code> and <code>&lt;index&gt;</code> columns. In this case, collection updates are extremely efficient. The primary key can be efficiently indexed and a particular row can be efficiently located when Hibernate tries to update or delete it.
p20-6-1-4 = Sets have a primary key consisting of <code>&lt;key&gt;</code> and element columns. This can be less efficient for some types of collection element, particularly composite elements or large text or binary fields, as the database may not be able to index a complex primary key as efficiently. However, for <code>one-to-many</code> or <code>many-to-many</code> associations, particularly in the case of synthetic identifiers, it is likely to be just as efficient. If you want SchemaExport to actually create the primary key of a <code>&lt;set&gt;</code>, you must declare all columns as <code>not-null="true"</code>.
p20-6-1-5 = <code>&lt;idbag&gt;</code> mappings define a surrogate key, so they are efficient to update. In fact, they are the best case.
p20-6-1-6 = Bags are the worst case since they permit duplicate element values and, as they have no index column, no primary key can be defined. Hibernate has no way of distinguishing between duplicate rows. Hibernate resolves this problem by completely removing in a single DELETE and recreating the collection whenever it changes. This can be inefficient.
p20-6-1-7 = For a one-to-many association, the "primary key" may not be the physical primary key of the database table. Even in this case, the above classification is still useful. It reflects how Hibernate "locates" individual rows of the collection.

#		**********************************************************************************************************
#		20.6.2. Lists, maps, idbags and sets are the most efficient collections to update
#		**********************************************************************************************************

title20-6-2 = 20.6.2. Lists, maps, idbags and sets are the most efficient collections to update
p20-6-2-1 = From the discussion above, it should be clear that indexed collections and sets allow the most efficient operation in terms of adding, removing and updating elements.
p20-6-2-2 = There is, arguably, one more advantage that indexed collections have over sets for many-to-many associations or collections of values. Because of the structure of a <code>Set</code>, Hibernate does not <code>UPDATE</code> a row when an element is "changed". Changes to a <code>Set</code> always work via <code>INSERT</code> and <code>DELETE</code> of individual rows. Once again, this consideration does not apply to one-to-many associations.
p20-6-2-3 = After observing that arrays cannot be lazy, you can conclude that lists, maps and idbags are the most performant (non-inverse) collection types, with sets not far behind. You can expect sets to be the most common kind of collection in Hibernate applications. This is because the "set" semantics are most natural in the relational model.
p20-6-2-4 = However, in well-designed Hibernate domain models, most collections are in fact one-to-many associations with <code>inverse="true"</code>. For these associations, the update is handled by the many-to-one end of the association, and so considerations of collection update performance simply do not apply.

#		**********************************************************************************************************
#		20.6.3. Bags and lists are the most efficient inverse collections
#		**********************************************************************************************************

title20-6-3 = 20.6.3. Bags and lists are the most efficient inverse collections
p20-6-3-1 = There is a particular case, however, in which bags, and also lists, are much more performant than sets. For a collection with <code>inverse="true"</code>, the standard bidirectional one-to-many relationship idiom, for example, we can add elements to a bag or list without needing to <code>initialize (fetch)</code> the bag elements. This is because, unlike a set, <code>Collection.add()</code> or <code>Collection.addAll()</code> must always return true for a bag or List. This can make the following common code much faster:

#		**********************************************************************************************************
#		20.6.4. One shot delete
#		**********************************************************************************************************

title20-6-4 = 20.6.4. One shot delete
p20-6-4-1 = Deleting collection elements one by one can sometimes be extremely inefficient. Hibernate knows not to do that in the case of an newly-empty collection (if you called <code>list.clear()</code>, for example). In this case, Hibernate will issue a single <code>DELETE</code>.
p20-6-4-2 = Suppose you added a single element to a collection of size twenty and then remove two elements. Hibernate will issue one <code>INSERT</code> statement and two <code>DELETE</code> statements, unless the collection is a bag. This is certainly desirable.
p20-6-4-3 = However, suppose that we remove eighteen elements, leaving two and then add thee new elements. There are two possible ways to proceed
li20-6-4-1-1 = delete eighteen rows one by one and then insert three rows
li20-6-4-1-2 = remove the whole collection in one SQL <code>DELETE</code> and insert all five current elements one by one
p20-6-4-4 = Hibernate cannot know that the second option is probably quicker. It would probably be undesirable for Hibernate to be that intuitive as such behavior might confuse database triggers, etc.
p20-6-4-5 = Fortunately, you can force this behavior (i.e. the second strategy) at any time by discarding (i.e. dereferencing) the original collection and returning a newly instantiated collection with all the current elements.
p20-6-4-6 = One-shot-delete does not apply to collections mapped <code>inverse="true"</code>.

#		**********************************************************************************************************
#		20.7. Monitoring performance
#		**********************************************************************************************************

title20-7 = 20.7. Monitoring performance
p20-7-1 = Optimization is not much use without monitoring and access to performance numbers. Hibernate provides a full range of figures about its internal operations. Statistics in Hibernate are available per <code>SessionFactory</code>.

#		**********************************************************************************************************
#		20.7.1. Monitoring a SessionFactory
#		**********************************************************************************************************

title20-7-1 = 20.7.1. Monitoring a SessionFactory
p20-7-1-1 = You can access <code>SessionFactory</code> metrics in two ways. Your first option is to call <code>sessionFactory.getStatistics()</code> and read or display the <code>Statistics</code> yourself.
p20-7-1-2 = Hibernate can also use JMX to publish metrics if you enable the <code>StatisticsService</code> MBean. You can enable a single MBean for all your <code>SessionFactory</code> or one per factory. See the following code for minimalistic configuration examples:
p20-7-1-3 = You can activate and deactivate the monitoring for a <code>SessionFactory</code>:
li20-7-1-1-1 = at configuration time, set <code>hibernate.generate_statistics</code> to false
li20-7-1-1-2 = at runtime: <code>sf.getStatistics().setStatisticsEnabled(true)</code> or <code>hibernateStatsBean.setStatisticsEnabled(true)</code>
p20-7-1-4 = Statistics can be reset programmatically using the <code>clear()</code> method. A summary can be sent to a logger (info level) using the <code>logSummary()</code> method.

#		**********************************************************************************************************
#		20.7.2. Metrics
#		**********************************************************************************************************

title20-7-2 = 20.7.2. Metrics
p20-7-2-1 = Hibernate provides a number of metrics, from basic information to more specialized information that is only relevant in certain scenarios. All available counters are described in the <code>Statistics</code> interface API, in three categories:
li20-7-2-1-1 = Metrics related to the general Session usage, such as number of open sessions, retrieved JDBC connections, etc.
li20-7-2-1-2 = Metrics related to the entities, collections, queries, and caches as a whole (aka global metrics).
li20-7-2-1-3 = Detailed metrics related to a particular entity, collection, query or cache region.
p20-7-2-2 = For example, you can check the cache hit, miss, and put ratio of entities, collections and queries, and the average time a query needs. Be aware that the number of milliseconds is subject to approximation in Java. Hibernate is tied to the JVM precision and on some platforms this might only be accurate to 10 seconds.
p20-7-2-3 = Simple getters are used to access the global metrics (i.e. not tied to a particular entity, collection, cache region, etc.). You can access the metrics of a particular entity, collection or cache region through its name, and through its HQL or SQL representation for queries. Please refer to the <code>Statistics</code>, <code>EntityStatistics</code>, <code>CollectionStatistics</code>, <code>SecondLevelCacheStatistics</code>, and <code>QueryStatistics</code> API Javadoc for more information. The following code is a simple example:
p20-7-2-4 = You can work on all entities, collections, queries and region caches, by retrieving the list of names of entities, collections, queries and region caches using the following methods: <code>getQueries()</code>, <code>getEntityNames()</code>, <code>getCollectionRoleNames()</code>, and <code>getSecondLevelCacheRegionNames()</code>.


