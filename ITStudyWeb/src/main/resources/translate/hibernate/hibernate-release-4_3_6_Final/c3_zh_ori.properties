th1 = 属性名
th2 = 用途
th3 = RDBMS
th4 = 方言
th5 = 种类
th6 = 功能
th7 = 事务工厂
th8 = 应用服务器
#		**********************************************************************************************************
#		Chapter 3. Configuration
#		**********************************************************************************************************

title3 = 第三章. 配置
p3-1 = Hibernate 是为了能在各种不同的环境下工作而设计的, 因此存在大量的配置参数. 幸运的是, 许多参数都有合理的默认值并且随Hibernate一起发布的在etc/目录下的hibernate.properties文件展示了各种配置选项。所要做的仅仅是将这个样例文件复制到类访问路径(classpath)下并做一些自定义的修来来满足你的需求。

#		**********************************************************************************************************
#		3.1. Programmatic configuration
#		**********************************************************************************************************

title3-1 = 3.1. 可编程配置方式
p3-1-1 = 一个 <code>org.hibernate.cfg.Configuration</code>实例代表了一个应用中的Java类型到SQL数据库映射的完整集合。<code>org.hibernate.cfg.Configuration</code> 用于构建不可变的<code>org.hibernate.SessionFactory</code>。所有映射由各种各样的xml配置文件编译而来。
p3-1-2 = 你可以直接实例化 <code>org.hibernate.cfg.Configuration</code>来获取一个实例 并且指定他的xml映射文件。如果映射文件在在类路径(classpath)中, 请使用<code>addResource()</code>. 例如:
p3-1-3 = 另一种方法是指定被映射的类来让Hibernate帮你寻找映射定义文件：
p3-1-4 = Hibernate 将会在类路径中查找名字为<code>/org/hibernate/auction/Item.hbm.xml</code> 和 <code>/org/hibernate/auction/Bid.hbm.xml</code> 的映射文件。 这种方式消除了任何对文件名的硬编码。
p3-1-5 = <code>org.hibernate.cfg.Configuration</code> 也允许你指定配置属性。例如：
p3-1-6 = 这不是向Hibernate传递配置参数的唯一方式。其他可选的方式还包括：
li3-1-1 = 传递一个 <code>java.util.Properties</code> 实例给 <code>Configuration.setProperties()</code>.
li3-1-2 = 将hibernate.properties 文件放置在里路径的根目录下。
li3-1-3 = 通过 <code>java -Dproperty=value</code>来设置<code>System</code> 属性。
li3-1-4 = 在<code>hibernate.cfg.xml</code>中添加 <code>&lt;property&gt;</code> 元素(在后面讨论).
p3-1-7 = 如果你想尽快的体验Hibernate，<code>hibernate.properties</code> 是最简单的方式。
p3-1-8 = <code>org.hibernate.cfg.Configuration</code>被设计成启动期间对象，一旦SessionFactory创建完成就被丢弃了。

#		**********************************************************************************************************
#		3.2. Obtaining a SessionFactory
#		**********************************************************************************************************

title3-2 = 3.2. 获得SessionFactory
p3-2-1 = 当所有的映射都被<code>org.hibernate.cfg.Configuration</code>解析后, 应用程序必须获得一个用于构造<code>org.hibernate.Session</code> 实例的工厂。 这个工厂被应用程序的所有线程共享:
p3-2-2 = Hibernate允许你的应用程序创建多个one org.hibernate.SessionFactory实例。 这对使用多个数据库的应用来说是很有用的。

#		**********************************************************************************************************
#		3.3. JDBC connections
#		**********************************************************************************************************

title3-3 = 3.3. JDBC 链接
p3-3-1 = 使用org.hibernate.SessionFactory为你创建和缓存JDBC 链接是明智的。如果你采用这种方式，打开一个 org.hibernate.Session很简单:
p3-3-2 = 一旦你需要访问数据库时，就会从连接池中获得一个JDBC链接。
p3-3-3 = 在这之前, 你需要向Hibernate传递一些JDBC链接属性。 所有Hibernate属性名和语义都定义在<code>org.hibernate.cfg.Environment</code>中. 我们现在将描述JDBC链接配置中最重要的设置。
p3-3-4 = 如果你设置以下属性，Hibernate将会使用 <code>java.sql.DriverManager</code>来创建和缓存链接:
tb3-3-1 = Table 3.1. Hibernate JDBC 属性
td3-3-1 = JDBC 驱动类
td3-3-2 = JDBC URL
td3-3-3 = 数据库用户
td3-3-4 = 数据库用户密码
td3-3-5 = 链接池的容量上限
p3-3-5 = Hibernate自带的连接池算法相当的不成熟。他是为了让你快些入门，并不适合用于产品系统或性能测试. 出于稳定性和最佳性能考虑，应该使用第三方的连接池。只需要使用特定连接池的设置替换<code>hibernate.connection.pool_size</code>。这将会关闭Hibernate自带的连接池。例如，你可能会想使用c3p0.
p3-3-6 = C3P0是一个在lib库中随Hibernate一同发布的开源的JDBC连接池. 如果你设置了<code>hibernate.c3p0.*</code>属性，Hibernate将会使用org.hibernate.connection.C3P0ConnectionProvider 来缓存JDBC链接。如果你愿意使用Proxool, 参考发行包中的hibernate.properties 并且在Hibernate网站中获取更多的信息。
p3-3-7 = 下面是c3p0的实例hibernate.properties文件：
p3-3-8 = 为了能在应用服务器中使用, 应当总是将Hibernate配置成从注册在JNDI中的Datasource处获得链接。至少需要设置下列属性中的一个:
tb3-3-2 = Table 3.2. Hibernate 数据源属性
td3-3-6 = 数据源 JNDI名
td3-3-7 = JNDI提供者的链接(可选)
td3-3-8 = JNDI InitialContextFactory类 (可选)
td3-3-9 = 数据库用户 (可选)
td3-3-10 = 数据库用户密码 (可选)
p3-3-9 = 这是一个使用应用程序服务器提供的JNDI数据源的<code>hibernate.properties</code>样例文件:
p3-3-10 = 从JNDI数据源获得的JDBC连接将自动参与到应用程序服务器中容器管理的事务(container-managed transactions)中去。
p3-3-11 = 任何连接(connection)属性的属性名都要以"hibernate.connnection"开头。例如，你可能会使用<code>hibernate.connection.charSet</code>来指定字符集charSet。
p3-3-12 = 通过实现org.hibernate.connection.ConnectionProvider接口，你可以定义属于 你自己的获得JDBC连接的插件策略。通过设置hibernate.connection.provider_class，你可以选择一个自定义的实现.

#		**********************************************************************************************************
#		3.4. Optional configuration properties
#		**********************************************************************************************************

title3-4 = 3.4. 可选的配置属性
p3-4-1 = 有大量属性能用来控制Hibernate在运行期的行为。它们都是可选的, 并拥有适当的默认值。
wc3-4-1 = 其中一些属性是"系统级(system-level)的"。系统级属性只能通过java -Dproperty=value或 hibernate.properties来设置。而不能用上面描述的其他方法来设置。
tb3-4-1 = Table 3.3. Hibernate配置属性
td3-4-1 = <code>org.hibernate.dialect.Dialect</code>类名允许Hibernate针对特定的关系数据库生成优化的SQL。<br/><strong>e.g.</strong> full.classname.of.Dialect<br/><br/>通常情况下Hibernate会基于JDBC驱动返回的JDBC元数据来正确的选择 <code>org.hibernate.dialect.Dialect</code> 实现。
td3-4-2 = 在控制台打印所有的SQL语句。有一个另外的选择是把org.hibernate.SQL这个log category设为debug。<br/><strong>e.g.</strong> true | false
td3-4-3 = 在log和console中打印出更漂亮的SQL. <strong>e.g.</strong> true | false
td3-4-4 = 在生成的SQL中, 将给定的schema/tablespace附加于非全限定名的表名上。<strong>e.g.</strong> SCHEMA_NAME
td3-4-5 = 在生成的SQL中, 将给定的catalog附加于非全限定名的表名上。<strong>e.g.</strong> CATALOG_NAME
td3-4-6 = org.hibernate.SessionFactory创建后，将自动使用这个名字绑定到JNDI中。<br/><strong>e.g.</strong> jndi/composite/name
td3-4-7 = 为单向关联(一对一, 多对一)的外连接抓取（outer join fetch）树设置最大深度. 值为0意味着将关闭默认的外连接抓取。<br/><strong>e.g.</strong> 推荐值是0 到 3
td3-4-8 = 为Hibernate关联的批量抓取设置默认数量。<strong>e.g.</strong> 推荐值是4, 8, 16
td3-4-9 = 为由这个SessionFactory打开的所有Session指定默认的实体表现模式。 默认是pojo.<br/><strong>e.g.</strong> dynamic-map | pojo
td3-4-10 = 强制Hibernate按照被更新数据的主键，为SQL更新排序. 这么做将减少在高并发系统中事务的死锁。<strong>e.g.</strong> true | false
td3-4-11 = 如果开启, Hibernate将收集有助于性能调节的统计数据。 <strong>e.g.</strong> true | false
td3-4-12 = 如果开启, 在对象被删除时生成的标识属性将被重设为默认值。<strong>e.g.</strong> true | false
td3-4-13 = 如果开启, Hibernate将在SQL中生成有助于调试的注释信息, 默认值为false。<br/><strong>e.g.</strong> true | false
td3-4-14 = 当使用 @GeneratedValue的相关设置. 它表明这个新的IdentifierGenerator实现是否用于javax.persistence.GenerationType.AUTO, javax.persistence.GenerationType.TABLE 和 javax.persistence.GenerationType.SEQUENCE. 默认false来保证向后兼容。<br/><strong>e.g.</strong> true | false
nc-3-4-1 = 我们建议所有使用 @GeneratedValue的新项目也设置hibernate.id.new_generator_mappings=true 因为新的生成器更高效并且更符合JPA2规范。然而，对于已存在的数据库不会向后兼容 (如果使用了sequence 或者 a table 来生成Id的话).
tb3-4-2 = Table 3.4. Hibernate JDBC 和 链接属性
td3-4-15 = 非0值，指定JDBC抓取数量大小 (调用 Statement.setFetchSize()).
td3-4-16 = 非0值，允许Hibernate使用JDBC2的批量更新。 e.g. 推荐值在5 和 30之间。
td3-4-17 = 如果你想让你的JDBC驱动从executeBatch()返回正确的行计数.那么将此属性设为true(开启这个选项通常是安全的)。同时，Hibernate将为自动版本化的数据使用批量DML. 默认是false.<br/><strong>e.g.</strong> true | false
td3-4-18 = 选择自定义的org.hibernate.jdbc.Batcher. 许多应用程序不需要这个属性.<br/><strong>e.g.</strong> classname.of.BatcherFactory
td3-4-19 = 允许Hibernate使用JDBC2的可滚动结果集。只有在使用用户提供的JDBC连接时，这个选项才是必要的。否则Hibernate会使用连接的元数据。<strong>e.g.</strong> true | false
td3-4-20 = 在JDBC读写binary (二进制)或serializable (可序列化) 的类型时使用流(stream)(系统级属性).<br/><strong>e.g.</strong> true | false
td3-4-21 = 在数据插入数据库之后，允许使用JDBC3 PreparedStatement.getGeneratedKeys() 来获取数据库生成的key(键). 需要JDBC3+驱动和JRE1.4+, 如果你的数据库驱动在使用Hibernate的标识生成器时是有问题的，请将此值设为false。默认情况下将使用连接的元数据来判定驱动的能力。<br/><strong>e.g.</strong> true|false
td3-4-22 = 自定义的 org.hibernate.connection.ConnectionProvider 此类用来向Hibernate提供JDBC连接。<br/><strong>e.g.</strong> classname.of.ConnectionProvider
td3-4-23 = 设置JDBC事务隔离级别。查看java.sql.Connection来了解各个值的具体意义, 但是请注意多数数据库都不支持所有的隔离级别和一些追加的定义，非标准的隔离级别.<br/><strong>e.g.</strong> 1, 2, 4, 8
td3-4-24 = Enables autocommit for JDBC pooled connections (it is not recommended). <strong>e.g.</strong> true | false
td3-4-25 = 允许被缓存的JDBC连接开启自动提交(autocommit) (不建议)。 默认情况下, 一个JDBC连接会一直存在直到session因过期而关闭或者断开连接。对于一个JTA数据源，会使用<code>after_statement</code>来在每一次JDBC使用过后主动的释放连接。对于一个非JTF连接，它经常在每次事务结束后释放连接。Hibernate会为JTA和CMT事务选择<code>after_statement</code>，为JDBC事务选择<code>after_transaction</code>。<br/><strong>e.g.</strong> auto (default) | on_close | after_transaction | after_statement<br/><br/>这个设置只会影响<code>SessionFactory.openSession</code>所返回的<code>Session</code>。对于<code>SessionFactory.getCurrentSession</code>所返回的<code>Session</code>，the CurrentSessionContext implementation configured for use controls the connection release mode for those Sessions. 查看 <a href="#c2-2">Section 2.2 CContextual sessions</a>
td3-4-26 = 把JDBC属性<propertyName>传递给<code>DriverManager.getConnection()</code>.
td3-4-27 = 将&lt;propertyName&gt;属性传递GielJNDI InitialContextFactory。
tb3-4-3 = Table 3.5. Hibernate缓存属性
td3-4-28 = 自定义CacheProvider的类名称。<br/><strong>e.g.</strong> classname.of.CacheProvider
td3-4-29 = 二级缓存的优化使得能过使得频繁的读写最小化。这个设定对集群缓存十分的有用，所以在Hibernate默认开启了集群缓存。<strong>e.g.</strong> true|false
td3-4-30 = 开启查询缓存。单个查询也必须设置缓存。<strong>e.g.</strong> true|false
td3-4-31 = 可以用来禁用二级缓存，对于在映射中指明了<code>&lt;cache&gt;</code>的情况下默认开启。<br/><strong>e.g.</strong> true|false
td3-4-32 = 自定义的QueryCache接口的类名称，默认情况下使用内建的<code>StandardQueryCache</code>。<br/><strong>e.g.</strong> classname.of.QueryCache
td3-4-33 = 使用二级缓存区域的前缀名称。<strong>e.g.</strong> prefix
td3-4-34 = 强制Hibernate使用更加友好的格式在二级缓存存储数据。<strong>e.g.</strong> true|false
td3-4-35 = 当一个在<code>ManyToOne</code>元素中的集合添加/升级/删除后没有被同步到<code>OneToMany</code>时，会自动禁止它的二级缓存。<strong>e.g.</strong> true|false (默认: false)
td3-4-36 = 当使用<code>@Cacheable</code>或<code>@Cache</code>去覆盖默认情况时，这个设置会给默认的<code>org.hibernate.annotations.CacheConcurrencyStrategy</code>一个名称。
tb3-4-4 = Table 3.6. Hibernate事务属性
td3-4-37 = 使用Hibernate事务API的<code>TransactionFactory</code>的类名称。(默认情况下是<code>JDBCTransactionFactory</code>).<br/><strong>e.g.</strong> classname.of.TransactionFactory
td3-4-38 = 用来从应用服务中获取JTA UserTransaction的<code>JTATransactionFactory</code>使用的JNDI名称。<br/><strong>e.g.</strong> jndi/composite/name
td3-4-39 = <code>TransactionManagerLookup</code>的类名称。当JVM级别的缓存被启用，或者在JTA环境下使用hilo生成器时必须使用。<br/><strong>e.g.</strong> classname.of.TransactionManagerLookup
td3-4-40 = 如果开启，Session会在事务完成之前自动刷新(flush)。 现在更好的方法是使用内置的自动Session上下文管理，参考Section 2.2, \u201C上下文相关的session\u201D。<br/><strong>e.g.</strong> true | false
td3-4-41 = 如果开启，session会在事务完成之后自动关闭。现在更好的方法是使用自动session上下文管理。参考Section 2.2, \u201C上下文相关的session\u201D。<br/><strong>e.g.</strong> true | false
tb3-4-5 = Table 3.7. 其他属性
td3-4-42 = 为"当前" Session指定一个(自定义的)策略。关于内置策略的详情，参考<a href="#c2-2">Section 2.2, \u201C上下文相关的session\u201D</a>。<br/><strong>e.g.</strong> jta | thread | managed | custom.Class
td3-4-43 = 选择HQL解析器的实现。 e.g. org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory or org.hibernate.hql.internal.classic.ClassicQueryTranslatorFactory
td3-4-44 = 用于将Hibernate查询中的符号映射到SQL查询中的符号 (符号可能是函数名或常量名字)。 e.g. hqlLiteral=SQL_LITERAL, hqlFunction=SQLFUNC
td3-4-45 = 在SessionFactory创建时，自动检查数据库结构，或者将数据库schema的DDL导出到数据库。 使用 create-drop时,在显式关闭SessionFactory时，将drop掉数据库schema。<br/><strong>e.g.</strong> validate | update | create | create-drop
td3-4-46 = 逗号分隔的包含SQL DML语句的可选文件会在SessionFactory创建的时候执行。 在测试和演示的时候很有用：例如，当它在部署的时候，可以通过Insert语句相数据库中填充最小的数据集。<br/>与文件的顺序有关, 给定文件内的语句会在后面的文件之前执行。如果hibernate.hbm2ddl.auto 被设置成create 或 create-drop，这些语句只有在模式被创建的时候执行。<br/><br/><strong>e.g.</strong> /humans.sql,/dogs.sql
td3-4-47 = 自定义的ImportSqlCommandExtractor (默认是内置的SingleLineSqlCommandExtractor)类名. 当要实现一个从每个引入的文件中提取单个的sql 的特定的解析器时这是非常有用的。Hibernate也提供了MultipleLinesSqlCommandExtractor，它支持指令/注解和引用字符串分开在多行(强制在每个语句之后用分号分隔).<br/><strong>e.g.</strong> classname.of.ImportSqlCommandExtractor
td3-4-48 = 使用字节码操作来代替运行时反射。这是系统级的属性并且不能再hibernate.cfg.xml中设置。 当在检查的时候反射是很有用的。即使你关闭优化器，Hibernate还是需要javassist.<br/><strong>e.g.</strong> true | false
td3-4-49 = 目前为止, javassist 是唯一被支持的字节码提供者。<br/><strong>e.g.</strong> javassist

#		**********************************************************************************************************
#		3.4.1. SQL Dialects
#		**********************************************************************************************************

title3-4-1 = 3.4.1. SQL 方言
p3-4-1-1 = 应当总是为你的数据库给hibernate.dialect属性设置成正确的org.hibernate.dialect.Dialect子类。如果你指定一种方言，Hibernate将为上面列出的一些属性使用合理的默认值。这意味着不需要手动的指定他们。
tb3-4-1-1 = Table 3.8. Hibernate SQL 方言 (hibernate.dialect)

#		**********************************************************************************************************
#		3.4.2. Outer Join Fetching
#		**********************************************************************************************************

title3-4-2 = 3.4.2. 外连接抓取
p3-4-2-1 = 如果你的数据库支持ANSI, Oracle 或者 Sybase形式的外连接, 外连接抓取通常能通过限制往返数据库次数 (更多的工作交由数据库自己来完成)来提高效率。然而它的代价是由数据库本身执行更多的工作。外连接抓取允许在单个SELECTSQL语句中， 通过many-to-one, one-to-many, many-to-many和one-to-one关联获取连接对象的整个对象图。
p3-4-2-2 = 将hibernate.max_fetch_depth设为0能在全局 范围内禁止外连接抓取。设为1或更高值能启用one-to-one和many-to-oneouter关联的外连接抓取，它们通过fetch="join"来映射。
p3-4-2-3 = 参考 <a href="#c20-1">Section 20.1, \u201C抓取策略\u201D</a> 获取更多信息.

#		**********************************************************************************************************
#		3.4.3. Binary Streams
#		**********************************************************************************************************

title3-4-3 = 3.4.3. 二进制流
p3-4-3-1 = Oracle限制那些通过JDBC驱动传输的字节数组的数目。如果你希望使用二进值 (binary)或 可序列化的 (serializable)类型的大对象，你应该启用 hibernate.jdbc.use_streams_for_binary。这是系统级属性。

#		**********************************************************************************************************
#		3.4.4. Second-level and query cache
#		**********************************************************************************************************

title3-4-4 = 3.4.4. 二级缓存与查询缓存
p3-4-4-1 = 以hibernate.cache为前缀的属性允许你在Hibernate中使用进程或群集范围内的二级缓存系统。参考 <a href="#c20-2">Section 20.2, \u201C二级缓存\u201D</a> 获取更多信息。

#		**********************************************************************************************************
#		3.4.5. Query Language Substitution
#		**********************************************************************************************************

title3-4-5 = 3.4.5. 查询语言中的替换
p3-4-5-1 = 你可以使用hibernate.query.substitutions在Hibernate中定义新的查询符号。例如：
p3-4-5-2 = 将导致符号true和false在生成的SQL中被翻译成整数常量。
p3-4-5-3 = 将允许你重命名SQL中的LOWER函数。

#		**********************************************************************************************************
#		3.4.6. Hibernate statistics
#		**********************************************************************************************************

title3-4-6 = 3.4.6. Hibernate的统计机制
p3-4-6-1 = 如果启用hibernate.generate_statistics, 当你通过<code>SessionFactory.getStatistics()</code>来调整正在运行的系统时，Hibernate将会导出大量有用的数据。Hibernate甚至可以被配置成通过JMX来导出这些数据。参考 <code>org.hibernate.stats</code> 接口的JavaDoc获取更多信息。

#		**********************************************************************************************************
#		3.5. Logging
#		**********************************************************************************************************

title3-5 = 3.5. 日志
ic3-5-1 = 完全过时了. 从4.0开始Hibernate使用JBoss Logging。 这将被记录下来，因为我们将这些内容迁移到了开发者指南。
p3-5-1 = Hibernate utilizes <a href="http://www.slf4j.org/">Simple Logging Facade for Java</a> (SLF4J) in order to log various system events. SLF4J can direct your logging output to several logging frameworks (NOP, Simple, log4j version 1.2, JDK 1.4 logging, JCL or logback) depending on your chosen binding. In order to setup logging you will need slf4j-api.jar in your classpath together with the jar file for your preferred binding - slf4j-log4j12.jar in the case of Log4J. See the SLF4J <a href="http://www.slf4j.org/manual.html">documentation</a> for more detail. To use Log4j you will also need to place a log4j.properties file in your classpath. An example properties file is distributed with Hibernate in the <code>src/</code> directory.
p3-5-2 = 建议熟悉一下Hibernate的日志消息。在不失可读性的前提下，我们做了很多工作，使Hibernate的日志可能地详细。这是必要的查错利器。 最令人感兴趣的日志分类有如下这些：
tb3-5-1 = Table 3.9. Hibernate Log 分类
td3-5-1 = 在所有SQL DML语句被执行时为它们记录日志
td3-5-2 = 为所有JDBC参数记录日志
td3-5-3 = 在所有SQL DDL语句执行时为它们记录日志
td3-5-4 = 在session清洗(flush)时，为所有与其关联的实体(最多20个)的状态记录日志
td3-5-5 = 为所有二级缓存的活动记录日志
td3-5-6 = 为事务相关的活动记录日志
td3-5-7 = 为所有JDBC资源的获取记录日志
td3-5-8 = 在解析查询的时候,记录HQL和SQL的AST分析日志
td3-5-9 = 为JAAS认证请求做日志
td3-5-10 = 为任何Hibernate相关信息做日志 (信息量较大, 但对查错非常有帮助)
p3-5-3 = 在使用Hibernate开发应用程序时, 你应当总是为<code>org.hibernate.SQL</code>开启debug级别的日志记录, 或者或者开启hibernate.show_sql属性。

#		**********************************************************************************************************
#		3.6. Implementing a NamingStrategy
#		**********************************************************************************************************

title3-6 = 3.6. 实现NamingStrategy
p3-6-1 = <code>org.hibernate.cfg.NamingStrategy</code> 接口允许你为数据库中的对象和schema元素指定一个“命名标准”。
p3-6-2 = 你可以提供一些规则来通过Java标示生产数据库标示或将映射定义文件中的“逻辑”表/列名处理成“物理”表/列名。这个属性有助于减少冗长的映射定义文件 (例如TBL_ prefixes)。 Hibernate使用的默认策略非常的小。
p3-6-3 = 在加入映射定义前，你可以调用 <code>Configuration.setNamingStrategy()</code>指定一个不同的命名策略:
p3-6-4 = <code>org.hibernate.cfg.ImprovedNamingStrategy</code> 是一个内建的命名策略,对一些应用程序而言，可能是非常有用的起点。

#		**********************************************************************************************************
#		3.7. Implementing a PersisterClassProvider
#		**********************************************************************************************************

title3-7 = 3.7. 实现PersisterClassProvider
p3-7-1 = 你可以配置持久化实现来持久化你的实体或者集合：
li3-7-1 = 默认情况下, Hibernate使用在关系模型中有意义的并且符合Java持久化规范的persisters
li3-7-2 = 你可以定义一个提供持久化类的PersisterClassProvider 实现，用于一个给定的实体或者集合
li3-7-3 =  最后, 在使用 @Persister以及等价的xml文件中基于每个实体或者集合覆写他们
p3-7-2 = 在列表中越靠后优先级越高
p3-7-3 = 你可以向配置对象传递 <code>PersisterClassProvider</code> 实例。
p3-7-4 = 当返回一个非null持久类，持久类提供者的方法覆写了默认的Hibernate持久化提供者。 实体的名字或者集合属性名被传递到方法中。 这种方式将覆写持久化提供者的逻辑集中在一起，很好的替代了将它们分开在每个实体或者是集合映射中的方式。

#		**********************************************************************************************************
#		3.8. XML configuration file
#		**********************************************************************************************************

title3-8 = 3.8. XML 配置文件
p3-8-1 = 另一种方法是在 <code>hibernate.cfg.xml</code>文件中指定完整的配置。这个文件可以当做<code>hibernate.properties</code> 的替代品, 若两个文件同时存在，它将覆盖前者的属性。
p3-8-2 = XML配置文件被默认是放在CLASSPATH的根目录下。下面是一个例子:
p3-8-3 = 这个方法优势在于，在配置文件中指出了映射定义文件的名字。 一旦你需要调整Hibernate的缓存，<code>hibernate.cfg.xml</code>也是很方便的。使用<code>hibernate.properties</code> 还是 <code>hibernate.cfg.xml</code>由你来决定。除了以上提到的XML语法的优势之外，两者是等价的。
p3-8-4 = 使用XML配置，使得启动Hibernate变的异常简单:
p3-8-5 = 你可以使用如下代码来添加一个不同的XML配置文件:

#		**********************************************************************************************************
#		3.9. Java EE Application Server integration
#		**********************************************************************************************************

title3-9 = 3.9. Java EE 应用服务器的继承
p3-9-1 = 针对J2EE体系,Hibernate有如下几个集成的方面:
li3-9-1 = 容器管理的数据源(Container-managed datasources): Hibernate能使用通过容器管理，并由JNDI提供的JDBC连接。通常, 特别是当处理多个数据源的分布式事务的时候， 由一个JTA兼容的TransactionManager和一个 ResourceManager来处理事务管理(CMT, 容器管理的事务)。当然你可以通过编程方式来划分事务边界(BMT, Bean管理的事务), 或者为了代码的可移植性，你也也许会想使用可选的 Hibernate Transaction API。
li3-9-2 = 自动JNDI绑定:  Hibernate可以在启动后将 SessionFactory绑定到JNDI。
li3-9-3 = JTA Session绑定: Hibernate Session 可以自动绑定到JTA事务作用的范围。只需简单地从JNDI查找SessionFactory并获得当前的 Session。当JTA事务完成时, 让Hibernate来处理 Session的刷新(flush)与关闭。事务的划分可以是声明式的(CMT),也可以是编程式的(BMT/UserTransaction)。
li3-9-4 = JMX部署:如果你使用支持JMX应用程序服务器(如, JBoss AS), 那么你可以选择将Hibernate部署成托管MBean。这将为你省去一行从Configuration构建SessionFactory的启动代码。容器将启动你的HibernateService 并完美地处理好服务间的依赖关系 (在Hibernate启动前，数据源必须是可用的，等等)。
p3-9-2 = 根据你的环境, 如果应用程序服务器抛出"connection containment"异常，也许你应该将<code>hibernate.connection.aggressive_release</code> 设置为true。

#		**********************************************************************************************************
#		3.9.1. Transaction strategy configuration
#		**********************************************************************************************************

title3-9-1 = 3.9.1. 事务策略配置
p3-9-1-1 = 在你的架构中，Hibernate的Session API是独立于任何事务分界系统的。如果你让Hibernate通过连接池直接使用JDBC, 你需要调用JDBC API来打开和关闭你的事务。如果你运行在J2EE应用程序服务器中, 你也许想用Bean管理的事务并在需要的时候调用JTA API 和 <code>UserTransaction</code>。
p3-9-1-2 = 为了让你的代码在两种(或其他)环境中可以移植，我们建议使用可选的Hibernate Transaction API, 它包装并隐藏了底层系统。 你必须通过设置Hibernate配置属性 <code>hibernate.transaction.factory_class</code>指定一个Transaction实例的工厂类。
p3-9-1-3 = 有三个标准(内建)的选择::
dd3-9-1-1 = 委托给数据库(JDBC)事务（默认）
dd3-9-1-2 = 如果在上下文环境中存在运行着的事务(如, EJB会话Bean的方法), 则委托给容器管理的事务，否则，将启动一个新的事务，并使用Bean管理的事务。
dd3-9-1-3 = 委托给容器管理的JTA事务
p3-9-1-4 = 你也可以定义属于你自己的事务策略 (如, 针对CORBA的事务服务)。
p3-9-1-5 = Hibernate的一些特性 (比如二级缓存, Contextual Sessions with JTA等等)需要访问在托管环境中的JTA TransactionManager。 在应用服务器中，由于J2EE没有标准化一个单一的机制，你必须指定Hibernate如何获得TransactionManager的引用:
tb3-9-1-1 = Table 3.10. JTA TransactionManagers

#		**********************************************************************************************************
#		3.9.2. JNDI-bound SessionFactory
#		**********************************************************************************************************

title3-9-2 = 3.9.2. JNDI绑定的SessionFactory
p3-9-2-1 = 与JNDI绑定的Hibernate的SessionFactory能简化工厂的查询，简化创建新的Session。需要注意的是这与JNDI绑定Datasource没有关系，它们只是恰巧用了相同的注册表。
p3-9-2-2 = 如果你希望将SessionFactory绑定到一个JNDI的名字空间, 用属性hibernate.session_factory_name指定一个名字(如, java:hibernate/SessionFactory)。如果不设置这个属性, SessionFactory将不会被绑定到JNDI中。在以只读JNDI为默认实现的环境中，这个设置尤其有用, 如Tomcat。
p3-9-2-3 = 在将SessionFactory绑定至JNDI时, Hibernate将使用hibernate.jndi.url, 和hibernate.jndi.class的值来实例化初始环境。如果它们没有被指定, 将使用默认的InitialContext。
p3-9-2-4 = 调用cfg.buildSessionFactory()之后Hibernate会自动将SessionFactory 注册到JNDI。这意味这你至少需要在你应用程序的启动代码(或工具类)中完成这个调用，除非你使用HibernateService来做JMX部署 (见后面讨论)。
p3-9-2-5 = 如果你使用JNDI SessionFactory, EJB 或者其他的类, 可以通过JNDI查找来获取SessionFactory。
p3-9-2-6 = 我们建议在受管理的环境中将SessionFactory注册到JNDI在其它情况下，使用一个static(静态的)singleton。为了在你的应用程序代码中隐藏这些细节。我们还建议你用一个helper类把实际查找SessionFactory的代码隐藏起来，比如 HibernateUtil.getSessionFactory()。注意，这个类也是启动Hibernate的一种方便的方法，\u2014参见第一章。

#		**********************************************************************************************************
#		3.9.3. Current Session context management with JTA
#		**********************************************************************************************************

title3-9-3 = 3.9.3. 在JTA环境下使用当前会话上下文管理
p3-9-3-1 = 在Hibernate中，管理Session和transaction最好的方法是自动的"当前"Session管理。参见 <a href="#c2-2">Section 2.2, \u201C上下文相关的Session\u201D</a>。使用"jta" session 上下文，假若在当前JTA事务中还没有HibernateSession关联，第一次<code>sessionFactory.getCurrentSession()</code>调用会启动一个Session,并关联到当前的JTA事务。 在"jta"上下文中调用<code>getCurrentSession()</code>会被设置为在transaction关闭的时候自动刷新、在transaction关闭之后自动关闭，每句语句之后主动释放JDBC连接。这就可以根据JTA事务的生命周期来管理与之关联的Session，用户代码中就可以不再考虑这些管理。你的代码也可以通过UserTransaction用编程方式使用JTA，或者(我们建议，为了便于移植代码）使用Hibernate的Transaction API来设置transaction边界。如果你的代码运行在EJB容器中，建议对CMT使用声明式事务声明。
