
#		**********************************************************************************************************
#		Chapter 4. Persistent Classes
#		**********************************************************************************************************

title4 = Chapter 4. Persistent Classes
p4-1 = Persistent classes are classes in an application that implement the entities of the business problem (e.g. Customer and Order in an E-commerce application). The term "persistent" here means that the classes are able to be persisted, not that they are in the persistent state (see <a href="#c11-1">Section 11.1, ¡°Hibernate object states¡±</a> for discussion).
p4-2 = Hibernate works best if these classes follow some simple rules, also known as the Plain Old Java Object (POJO) programming model. However, none of these rules are hard requirements. Indeed, Hibernate assumes very little about the nature of your persistent objects. You can express a domain model in other ways (using trees of java.util.Map instances, for example).

#		**********************************************************************************************************
#		4.1. A simple POJO example
#		**********************************************************************************************************

title4-1 = 4.1. A simple POJO example
p4-1-1 = The four main rules of persistent classes are explored in more detail in the following sections.

#		**********************************************************************************************************
#		4.1.1. Implement a no-argument constructor
#		**********************************************************************************************************

title4-1-1 = 4.1.1. Implement a no-argument constructor
p4-1-1-1 = <code>Cat</code> has a no-argument constructor. All persistent classes must have a default constructor (which can be non-public) so that Hibernate can instantiate them using <code>java.lang.reflect.Constructor.newInstance()</code>. It is recommended that this constructor be defined with at least package visibility in order for runtime proxy generation to work properly.

#		**********************************************************************************************************
#		4.1.2. Provide an identifier property
#		**********************************************************************************************************

title4-1-2 = 4.1.2. Provide an identifier property
nc4-1-2-1 = Historically this was considered option. While still not (yet) enforced, this should be considered a deprecated feature as it will be completely required to provide a identifier property in an upcoming release.
p4-1-2-1 = <code>Cat</code> has a property named id. This property maps to the primary key column(s) of the underlying database table. The type of the identifier property can be any "basic" type (see <a href="#c4-1-2">4.1.2. Provide an identifier property</a>). See <a href="#c9-4">Section 9.4 Components as composite identifiers</a> for information on mapping composite (multi-column) identifiers.
nc4-1-2-2 = Identifiers do not necessarily need to identify column(s) in the database physically defined as a primary key. They should just identify columns that can be used to uniquely identify rows in the underlying table.
p4-1-2-2 = We recommend that you declare consistently-named identifier properties on persistent classes and that you use a nullable (i.e., non-primitive) type.

#		**********************************************************************************************************
#		4.1.3. Prefer non-final classes (semi-optional)
#		**********************************************************************************************************

title4-1-3 = 4.1.3. Prefer non-final classes (semi-optional)
p4-1-3-1 = A central feature of Hibernate, proxies (lazy loading), depends upon the persistent class being either non-final, or the implementation of an interface that declares all public methods. You can persist final classes that do not implement an interface with Hibernate; you will not, however, be able to use proxies for lazy association fetching which will ultimately limit your options for performance tuning. To persist a final class which does not implement a "full" interface you must disable proxy generation. See <a href="#persistent-classes-pojo-final-example-disable-proxies-xml">Example 4.2 Disabling proxies in hbm.xml</a> and <a href="#persistent-classes-pojo-final-example-disable-proxies-xml">Example 4.3 Disabling proxies in annotations</a>.
p4-1-3-2 = If the final class does implement a proper interface, you could alternatively tell Hibernate to use the interface instead when generating the proxies. See <a href="#persistent-classes-pojo-final-example-proxy-interface-xml">Example 4.4 Proxying an interface in hbm.xml</a> and <a href="#persistent-classes-pojo-final-example-proxy-interface-xml">Example 4.5 Proxying an interface in annotations</a>.
p4-1-3-3 = You should also avoid declaring public final methods as this will again limit the ability to generate proxies from this class. If you want to use a class with public final methods, you must explicitly disable proxying. Again, see <a href="#persistent-classes-pojo-final-example-disable-proxies-xml">Example 4.2 Disabling proxies in hbm.xml</a> and <a href="#persistent-classes-pojo-final-example-disable-proxies-xml">Example 4.3 Disabling proxies in annotations</a>.

#		**********************************************************************************************************
#		4.1.4. Declare accessors and mutators for persistent fields (optional)
#		**********************************************************************************************************

title4-1-4 = 4.1.4. Declare accessors and mutators for persistent fields (optional)
p4-1-4-1 = Cat declares accessor methods for all its persistent fields. Many other ORM tools directly persist instance variables. It is better to provide an indirection between the relational schema and internal data structures of the class. By default, Hibernate persists JavaBeans style properties and recognizes method names of the form getFoo, isFoo and setFoo. If required, you can switch to direct field access for particular properties.
p4-1-4-2 = Properties need not be declared public. Hibernate can persist a property declared with package, protected or private visibility as well.

#		**********************************************************************************************************
#		4.2. Implementing inheritance
#		**********************************************************************************************************

title4-2 = 4.2. Implementing inheritance
p4-2-1 = A subclass must also observe the first and second rules. It inherits its identifier property from the superclass, Cat. For example:

#		**********************************************************************************************************
#		4.3. Implementing equals() and hashCode()
#		**********************************************************************************************************

title4-3 = 4.3. Implementing <code>equals()</code> and <code>hashCode()</code>
p4-3-1 = You have to override the <code>equals()</code> and <code>hashCode()</code> methods if you:
li4-3-1 = intend to put instances of persistent classes in a Set (the recommended way to represent many-valued associations); and
li4-3-2 = intend to use reattachment of detached instances
p4-3-2 = Hibernate guarantees equivalence of persistent identity (database row) and Java identity only inside a particular session scope. When you mix instances retrieved in different sessions, you must implement <code>equals()</code> and <code>hashCode()</code> if you wish to have meaningful semantics for Sets.
p4-3-3 = The most obvious way is to implement <code>equals()</code>/<code>hashCode()</code> by comparing the identifier value of both objects. If the value is the same, both must be the same database row, because they are equal. If both are added to a Set, you will only have one element in the Set). Unfortunately, you cannot use that approach with generated identifiers. Hibernate will only assign identifier values to objects that are persistent; a newly created instance will not have any identifier value. Furthermore, if an instance is unsaved and currently in a Set, saving it will assign an identifier value to the object. If <code>equals()</code> and <code>hashCode()</code> are based on the identifier value, the hash code would change, breaking the contract of the Set. See the Hibernate website for a full discussion of this problem. This is not a Hibernate issue, but normal Java semantics of object identity and equality.
p4-3-4 = It is recommended that you implement equals() and hashCode() using Business key equality. Business key equality means that the equals() method compares only the properties that form the business key. It is a key that would identify our instance in the real world (a natural candidate key):
p4-3-5 = A business key does not have to be as solid as a database primary key candidate (see <a href="#c13-1-3">Section 13.1.3 Considering object identity</a>). Immutable or unique properties are usually good candidates for a business key.

#		**********************************************************************************************************
#		4.4. Dynamic models
#		**********************************************************************************************************

title4-4 = 4.4. Dynamic models
nc4-4-1 = The following features are currently considered experimental and may change in the near future.
p4-4-1 = Persistent entities do not necessarily have to be represented as POJO classes or as JavaBean objects at runtime. Hibernate also supports dynamic models (using Maps of Maps at runtime). With this approach, you do not write persistent classes, only mapping files.
p4-4-2 = By default, Hibernate works in normal POJO mode. You can set a default entity representation mode for a particular SessionFactory using the default_entity_mode configuration option (see <a href="#tb3-4-1">Table 3.3 Hibernate Configuration Properties</a>).
p4-4-3 = The following examples demonstrate the representation using Maps. First, in the mapping file an entity-name has to be declared instead of, or in addition to, a class name:
p4-4-4 = Even though associations are declared using target class names, the target type of associations can also be a dynamic entity instead of a POJO.
p4-4-5 = After setting the default entity mode to dynamic-map for the SessionFactory, you can, at runtime, work with Maps of Maps:
p4-4-6 = One of the main advantages of dynamic mapping is quick turnaround time for prototyping, without the need for entity class implementation. However, you lose compile-time type checking and will likely deal with many exceptions at runtime. As a result of the Hibernate mapping, the database schema can easily be normalized and sound, allowing to add a proper domain model implementation on top later on.
p4-4-7 = Entity representation modes can also be set on a per <code>Session</code> basis:
p4-4-8 = Please note that the call to <code>getSession()</code> using an EntityMode is on the Session API, not the SessionFactory. That way, the new Session shares the underlying JDBC connection, transaction, and other context information. This means you do not have to call <code>flush()</code> and <code>close()</code> on the secondary Session, and also leave the transaction and connection handling to the primary unit of work.

#		**********************************************************************************************************
#		4.5. Tuplizers
#		**********************************************************************************************************

title4-5 = 4.5. Tuplizers
p4-5-1 = <code>org.hibernate.tuple.Tuplizer</code> and its sub-interfaces are responsible for managing a particular representation of a piece of data given that representation's org.hibernate.EntityMode. If a given piece of data is thought of as a data structure, then a tuplizer is the thing that knows how to create such a data structure, how to extract values from such a data structure and how to inject values into such a data structure. For example, for the POJO entity mode, the corresponding tuplizer knows how create the POJO through its constructor. It also knows how to access the POJO properties using the defined property accessors.
p4-5-2 = There are two (high-level) types of Tuplizers:
li4-5-1 = <code>org.hibernate.tuple.entity.EntityTuplizer</code> which is responsible for managing the above mentioned contracts in regards to entities
li4-5-2 = <code>org.hibernate.tuple.component.ComponentTuplizer</code> which does the same for components
p4-5-3 = Users can also plug in their own tuplizers. Perhaps you require that java.util.Map implementation other than java.util.HashMap be used while in the dynamic-map entity-mode. Or perhaps you need to define a different proxy generation strategy than the one used by default. Both would be achieved by defining a custom tuplizer implementation. Tuplizer definitions are attached to the entity or component mapping they are meant to manage. Going back to the example of our Customer entity, <a href="#example-specify-custom-tuplizer-ann">Example 4.6 Specify custom tuplizers in annotations</a> shows how to specify a custom <code>org.hibernate.tuple.entity.EntityTuplizer</code> using annotations while <a href="#example-specify-custom-tuplizer-ann">Example 4.7 Specify custom tuplizers in hbm.xml</a> shows how to do the same in <code>hbm.xml</code>

#		**********************************************************************************************************
#		4.6. EntityNameResolvers
#		**********************************************************************************************************

title4-6 = 4.6. EntityNameResolvers
p4-6-1 = <code>org.hibernate.EntityNameResolver</code> is a contract for resolving the entity name of a given entity instance. The interface defines a single method resolveEntityName which is passed the entity instance and is expected to return the appropriate entity name (null is allowed and would indicate that the resolver does not know how to resolve the entity name of the given entity instance). Generally speaking, an org.hibernate.EntityNameResolver is going to be most useful in the case of dynamic models. One example might be using proxied interfaces as your domain model. The hibernate test suite has an example of this exact style of usage under the org.hibernate.test.dynamicentity.tuplizer2. Here is some of the code from that package for illustration.
p4-6-2 = In order to register an <code>org.hibernate.EntityNameResolver</code> users must either:
li4-6-1 = Implement a custom tuplizer (see <a href="#c4-5">Section 4.5 Tuplizers</a>), implementing the getEntityNameResolvers method
li4-6-2 = Register it with the <code>org.hibernate.impl.SessionFactoryImpl</code> (which is the implementation class for <code>org.hibernate.SessionFactory</code>) using the registerEntityNameResolver method.















