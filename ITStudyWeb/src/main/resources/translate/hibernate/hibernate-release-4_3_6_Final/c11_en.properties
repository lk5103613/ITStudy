
#		**********************************************************************************************************
#		Chapter 11. Working with objects
#		**********************************************************************************************************

title11 = Chapter 11. Working with objects
p11-1 = Hibernate is a full object/relational mapping solution that not only shields the developer from the details of the underlying database management system, but also offers state management of objects. This is, contrary to the management of SQL statements in common JDBC/SQL persistence layers, a natural object-oriented view of persistence in Java applications.
p11-2 = In other words, Hibernate application developers should always think about the state of their objects, and not necessarily about the execution of SQL statements. This part is taken care of by Hibernate and is only relevant for the application developer when tuning the performance of the system.

#		**********************************************************************************************************
#		11.1. Hibernate object states
#		**********************************************************************************************************

title11-1 = 11.1. Hibernate object states
p11-1-1 = Hibernate defines and supports the following object states:
li11-1-1-1 = <code>Transient</code> - an object is transient if it has just been instantiated using the new operator, and it is not associated with a Hibernate Session. It has no persistent representation in the database and no identifier value has been assigned. Transient instances will be destroyed by the garbage collector if the application does not hold a reference anymore. Use the Hibernate Session to make an object persistent (and let Hibernate take care of the SQL statements that need to be executed for this transition).
li11-1-1-2 = <code>Persistent</code> - a persistent instance has a representation in the database and an identifier value. It might just have been saved or loaded, however, it is by definition in the scope of a Session. Hibernate will detect any changes made to an object in persistent state and synchronize the state with the database when the unit of work completes. Developers do not execute manual UPDATE statements, or DELETE statements when an object should be made transient.
li11-1-1-3 = <code>Detached</code> - a detached instance is an object that has been persistent, but its Session has been closed. The reference to the object is still valid, of course, and the detached instance might even be modified in this state. A detached instance can be reattached to a new Session at a later point in time, making it (and all the modifications) persistent again. This feature enables a programming model for long running units of work that require user think-time. We call them application transactions, i.e., a unit of work from the point of view of the user.
p11-1-2 = We will now discuss the states and state transitions (and the Hibernate methods that trigger a transition) in more detail.

#		**********************************************************************************************************
#		11.2. Making objects persistent
#		**********************************************************************************************************

title11-2 = 11.2. Making objects persistent
p11-2-1 = Newly instantiated instances of a persistent class are considered transient by Hibernate. We can make a transient instance persistent by associating it with a session:
p11-2-2 = If <code>Cat</code> has a generated identifier, the identifier is generated and assigned to the cat when <code>save()</code> is called. If Cat has an assigned identifier, or a composite key, the identifier should be assigned to the <code>cat</code> instance before calling <code>save()</code>. You can also use <code>persist()</code> instead of <code>save()</code>, with the semantics defined in the EJB3 early draft.
li11-2-1-1 = <code>persist()</code> makes a transient instance persistent. However, it does not guarantee that the identifier value will be assigned to the persistent instance immediately, the assignment might happen at flush time. persist() also guarantees that it will not execute an INSERT statement if it is called outside of transaction boundaries. This is useful in long-running conversations with an extended Session/persistence context.
li11-2-1-2 = <code>save()</code> does guarantee to return an identifier. If an INSERT has to be executed to get the identifier ( e.g. "identity" generator, not "sequence"), this INSERT happens immediately, no matter if you are inside or outside of a transaction. This is problematic in a long-running conversation with an extended Session/persistence context.
p11-2-3 = Alternatively, you can assign the identifier using an overloaded version of <code>save()</code>.
p11-2-4 = If the object you make persistent has associated objects (e.g. the kittens collection in the previous example), these objects can be made persistent in any order you like unless you have a NOT NULL constraint upon a foreign key column. There is never a risk of violating foreign key constraints. However, you might violate a NOT NULL constraint if you <code>save()</code> the objects in the wrong order.
p11-2-5 = Usually you do not bother with this detail, as you will normally use Hibernate's transitive persistence feature to save the associated objects automatically. Then, even NOT NULL constraint violations do not occur - Hibernate will take care of everything. Transitive persistence is discussed later in this chapter.

#		**********************************************************************************************************
#		11.3. Loading an object
#		**********************************************************************************************************

title11-3 = 11.3. Loading an object
p11-3-1 = The <code>load()</code> methods of Session provide a way of retrieving a persistent instance if you know its <code>identifier.load()</code> takes a class object and loads the state into a newly instantiated instance of that class in a persistent state.
p11-3-2 = Alternatively, you can load state into a given instance:
p11-3-3 = Be aware that <code>load()</code> will throw an unrecoverable exception if there is no matching database row. If the class is mapped with a proxy, <code>load()</code> just returns an uninitialized proxy and does not actually hit the database until you invoke a method of the proxy. This is useful if you wish to create an association to an object without actually loading it from the database. It also allows multiple instances to be loaded as a batch if batch-size is defined for the class mapping.
p11-3-4 = If you are not certain that a matching row exists, you should use the <code>get()</code> method which hits the database immediately and returns null if there is no matching row.
p11-3-5 = You can even load an object using an SQL <code>SELECT ...</code> FOR <code>UPDATE</code>, using a LockMode. See the API documentation for more information.
p11-3-6 = Any associated instances or contained collections will not be selected <code>FOR UPDATE</code>, unless you decide to specify lock or all as a cascade style for the association.
p11-3-7 = It is possible to re-load an object and all its collections at any time, using the <code>refresh()</code> method. This is useful when database triggers are used to initialize some of the properties of the object.
p11-3-8 = How much does Hibernate load from the database and how many <code>SQL SELECTs</code> will it use? This depends on the fetching strategy. This is explained in <a href="#c20-1">Section 20.1, \u201CFetching strategies\u201D</a>.

#		**********************************************************************************************************
#		11.4. Querying
#		**********************************************************************************************************

title11-4 = 11.4. Querying
p11-4-1 = If you do not know the identifiers of the objects you are looking for, you need a query. Hibernate supports an easy-to-use but powerful object oriented query language (HQL). For programmatic query creation, Hibernate supports a sophisticated Criteria and Example query feature (QBC and QBE). You can also express your query in the native SQL of your database, with optional support from Hibernate for result set conversion into objects.

#		**********************************************************************************************************
#		11.4.1. Executing queries
#		**********************************************************************************************************

title11-4-1 = 11.4.1. Executing queries
p11-4-1-1 = HQL and native SQL queries are represented with an instance of <code>org.hibernate.Query</code>. This interface offers methods for parameter binding, result set handling, and for the execution of the actual query. You always obtain a Query using the current Session:
p11-4-1-2 = A query is usually executed by invoking <code>list()</code>. The result of the query will be loaded completely into a collection in memory. Entity instances retrieved by a query are in a persistent state. The <code>uniqueResult()</code> method offers a shortcut if you know your query will only return a single object. Queries that make use of eager fetching of collections usually return duplicates of the root objects, but with their collections initialized. You can filter these duplicates through a Set.

#		**********************************************************************************************************
#		11.4.1.1. Iterating results
#		**********************************************************************************************************

title11-4-1-1 = 11.4.1.1. Iterating results
p11-4-1-1-1 = Occasionally, you might be able to achieve better performance by executing the query using the <code>iterate()</code> method. This will usually be the case if you expect that the actual entity instances returned by the query will already be in the session or second-level cache. If they are not already cached, <code>iterate()</code> will be slower than <code>list()</code> and might require many database hits for a simple query, usually 1 for the initial select which only returns identifiers, and n additional selects to initialize the actual instances.

#		**********************************************************************************************************
#		11.4.1.2. Queries that return tuples
#		**********************************************************************************************************

title11-4-1-2 = 11.4.1.2. Queries that return tuples
p11-4-1-2-1 = Hibernate queries sometimes return tuples of objects. Each tuple is returned as an array:

#		**********************************************************************************************************
#		11.4.1.3. Scalar results
#		**********************************************************************************************************

title11-4-1-3 = 11.4.1.3. Scalar results
p11-4-1-3-1 = Queries can specify a property of a class in the select clause. They can even call SQL aggregate functions. Properties or aggregates are considered "scalar" results and not entities in persistent state.

#		**********************************************************************************************************
#		11.4.1.4. Bind parameters
#		**********************************************************************************************************

title11-4-1-4 = 11.4.1.4. Bind parameters
p11-4-1-4-1 = Methods on <code>Query</code> are provided for binding values to named parameters or JDBC-style ? parameters. Contrary to JDBC, Hibernate numbers parameters from zero. Named parameters are identifiers of the form <code>:name</code> in the query string. The advantages of named parameters are as follows:
li11-4-1-4-1-1 = named parameters are insensitive to the order they occur in the query string
li11-4-1-4-1-2 = they can occur multiple times in the same query
li11-4-1-4-1-3 = they are self-documenting

#		**********************************************************************************************************
#		11.4.1.5. Pagination
#		**********************************************************************************************************

title11-4-1-5 = 11.4.1.5. Pagination
p11-4-1-5-1 = If you need to specify bounds upon your result set, that is, the maximum number of rows you want to retrieve and/or the first row you want to retrieve, you can use methods of the Query interface:
p11-4-1-5-2 = Hibernate knows how to translate this limit query into the native SQL of your DBMS.

#		**********************************************************************************************************
#		11.4.1.6. Scrollable iteration
#		**********************************************************************************************************

title11-4-1-6 = 11.4.1.6. Scrollable iteration
p11-4-1-6-1 = If your JDBC driver supports scrollable ResultSets, the Query interface can be used to obtain a ScrollableResults object that allows flexible navigation of the query results.
p11-4-1-6-2 = Note that an open database connection and cursor is required for this functionality. Use <code>setMaxResult()/setFirstResult()</code> if you need offline pagination functionality.

#		**********************************************************************************************************
#		11.4.1.7. Externalizing named queries
#		**********************************************************************************************************

title11-4-1-7 = 11.4.1.7. Externalizing named queries
p11-4-1-7-1 = Queries can also be configured as so called named queries using annotations or Hibernate mapping documents. <code>@NamedQuery</code> and <code>@NamedQueries</code> can be defined at the class level as seen in <a href="#example-named-query-annotation">Example 11.1, \u201CDefining a named query using @NamedQuery\u201D</a> . However their definitions are global to the session factory/entity manager factory scope. A named query is defined by its name and the actual query string.
p11-4-1-7-2 = Using a mapping document can be configured using the <code>&lt;query&gt;</code> node. Remember to use a CDATA section if your query contains characters that could be interpreted as markup.
p11-4-1-7-3 = Parameter binding and executing is done programatically as seen in <a href="#example-parameter-binding-named-query">Example 11.3, \u201CParameter binding of a named query\u201D</a>.
p11-4-1-7-4 = The actual program code is independent of the query language that is used. You can also define native SQL queries in metadata, or migrate existing queries to Hibernate by placing them in mapping files.
p11-4-1-7-5 = Also note that a query declaration inside a <code>&lt;hibernate-mapping&gt;</code> element requires a global unique name for the query, while a query declaration inside a <code>&lt;class&gt;</code> element is made unique automatically by prepending the fully qualified name of the class. For example <code>eg.Cat.ByNameAndMaximumWeight</code>.

#		**********************************************************************************************************
#		11.4.2. Filtering collections
#		**********************************************************************************************************

title11-4-2 = 11.4.2. Filtering collections
p11-4-2-1 = A collection <code>filter</code> is a special type of query that can be applied to a persistent collection or array. The query string can refer to this, meaning the current collection element.
p11-4-2-2 = The returned collection is considered a bag that is a copy of the given collection. The original collection is not modified. This is contrary to the implication of the name "filter", but consistent with expected behavior.
p11-4-2-3 = Observe that filters do not require a from clause, although they can have one if required. Filters are not limited to returning the collection elements themselves.
p11-4-2-4 = Even an empty filter query is useful, e.g. to load a subset of elements in a large collection:

#		**********************************************************************************************************
#		11.4.3. Criteria queries
#		**********************************************************************************************************

title11-4-3 = 11.4.3. Criteria queries
p11-4-3-1 = HQL is extremely powerful, but some developers prefer to build queries dynamically using an object-oriented API, rather than building query strings. Hibernate provides an intuitive Criteria query API for these cases:
p11-4-3-2 = The Criteria and the associated Example API are discussed in more detail in <a href="#c17">Chapter 17, Criteria Queries</a>.

#		**********************************************************************************************************
#		11.4.4. Queries in native SQL
#		**********************************************************************************************************

title11-4-4 = 11.4.4. Queries in native SQL
p11-4-4-1 = You can express a query in SQL, using <code>createSQLQuery()</code> and let Hibernate manage the mapping from result sets to objects. You can at any time call <code>session.connection()</code> and use the JDBC Connection directly. If you choose to use the Hibernate API, you must enclose SQL aliases in braces:
p11-4-4-2 = SQL queries can contain named and positional parameters, just like Hibernate queries. More information about native SQL queries in Hibernate can be found in <a href="c18">Chapter 18, Native SQL</a>.

#		**********************************************************************************************************
#		11.5. Modifying persistent objects
#		**********************************************************************************************************

title11-5 = 11.5. Modifying persistent objects
p11-5-1 = Transactional persistent instances (i.e. objects loaded, saved, created or queried by the Session) can be manipulated by the application, and any changes to persistent state will be persisted when the Session is flushed. This is discussed later in this chapter. There is no need to call a particular method (like <code>update()</code>, which has a different purpose) to make your modifications persistent. The most straightforward way to update the state of an object is to <code>load()</code> it and then manipulate it directly while the Session is open:
p11-5-2 = Sometimes this programming model is inefficient, as it requires in the same session both an SQL <code>SELECT</code> to load an object and an SQL <code>UPDATE</code> to persist its updated state. Hibernate offers an alternate approach by using detached instances.

#		**********************************************************************************************************
#		11.6. Modifying detached objects
#		**********************************************************************************************************

title11-6 = 11.6. Modifying detached objects
p11-6-1 = Many applications need to retrieve an object in one transaction, send it to the UI layer for manipulation, then save the changes in a new transaction. Applications that use this kind of approach in a high-concurrency environment usually use versioned data to ensure isolation for the "long" unit of work.
p11-6-2 = Hibernate supports this model by providing for reattachment of detached instances using the <code>Session.update()</code> or <code>Session.merge()</code> methods:
p11-6-3 = If the <code>Cat</code> with identifier <code>catId</code> had already been loaded by <code>secondSession</code> when the application tried to reattach it, an exception would have been thrown.
p11-6-4 = Use <code>update()</code> if you are certain that the session does not contain an already persistent instance with the same identifier. Use <code>merge()</code> if you want to merge your modifications at any time without consideration of the state of the session. In other words, <code>update()</code> is usually the first method you would call in a fresh session, ensuring that the reattachment of your detached instances is the first operation that is executed.
p11-6-5 = The application should individually <code>update()</code> detached instances that are reachable from the given detached instance only if it wants their state to be updated. This can be automated using transitive persistence. See <a href="#c11-11">Section 11.11, \u201CTransitive persistence\u201D</a> for more information.
p11-6-6 = The <code>lock()</code> method also allows an application to reassociate an object with a new session. However, the detached instance has to be unmodified.
p11-6-7 = Note that <code>lock()</code> can be used with various LockModes. See the API documentation and the chapter on transaction handling for more information. Reattachment is not the only usecase for <code>lock()</code>.
p11-6-8 = Other models for long units of work are discussed in <a href="#c13-3">Section 13.3, \u201COptimistic concurrency control\u201D</a>.

#		**********************************************************************************************************
#		11.7. Automatic state detection
#		**********************************************************************************************************

title11-7 = 11.7. Automatic state detection
p11-7-1 = Hibernate users have requested a general purpose method that either saves a transient instance by generating a new identifier or updates/reattaches the detached instances associated with its current identifier. The <code>saveOrUpdate()</code> method implements this functionality.
p11-7-2 = The usage and semantics of <code>saveOrUpdate()</code> seems to be confusing for new users. Firstly, so long as you are not trying to use instances from one session in another new session, you should not need to use <code>update()</code>, <code>saveOrUpdate()</code>, or <code>merge()</code>. Some whole applications will never use either of these methods.
p11-7-3 = Usually <code>update()</code> or <code>saveOrUpdate()</code> are used in the following scenario:
li11-7-1-1 = the application loads an object in the first session
li11-7-1-2 = the object is passed up to the UI tier
li11-7-1-3 = some modifications are made to the object
li11-7-1-4 = the object is passed back down to the business logic tier
li11-7-1-5 = the application persists these modifications by calling <code>update()</code> in a second session
p11-7-4 = <code>saveOrUpdate()</code> does the following:
li11-7-2-1 = if the object is already persistent in this session, do nothing
li11-7-2-2 = if another object associated with the session has the same identifier, throw an exception
li11-7-2-3 = if the object has no identifier property, <code>save()</code> it
li11-7-2-4 = if the object's identifier has the value assigned to a newly instantiated object, <code>save()</code> it
li11-7-2-5 = if the object is versioned by a <code>&lt;version&gt;</code> or <code>&lt;timestamp&gt;</code>, and the version property value is the same value assigned to a newly instantiated object, <code>save()</code> it
li11-7-2-6 = otherwise <code>update()</code> the object
p11-7-5 = and <code>merge()</code> is very different:
li11-7-3-1 = if there is a persistent instance with the same identifier currently associated with the session, copy the state of the given object onto the persistent instance
li11-7-3-2 = if there is no persistent instance currently associated with the session, try to load it from the database, or create a new persistent instance
li11-7-3-3 = the persistent instance is returned
li11-7-3-4 = the given instance does not become associated with the session, it remains detached

#		**********************************************************************************************************
#		11.8. Deleting persistent objects
#		**********************************************************************************************************

title11-8 = 11.8. Deleting persistent objects
p11-8-1 = <code>Session.delete()</code> will remove an object's state from the database. Your application, however, can still hold a reference to a deleted object. It is best to think of <code>delete()</code> as making a persistent instance, transient.
p11-8-2 = You can delete objects in any order, without risk of foreign key constraint violations. It is still possible to violate a NOT NULL constraint on a foreign key column by deleting objects in the wrong order, e.g. if you delete the parent, but forget to delete the children.

#		**********************************************************************************************************
#		11.9. Replicating object between two different datastores
#		**********************************************************************************************************

title11-9 = 11.9. Replicating object between two different datastores
p11-9-1 = It is sometimes useful to be able to take a graph of persistent instances and make them persistent in a different datastore, without regenerating identifier values.
p11-9-2 = The <code>ReplicationMode</code> determines how <code>replicate()</code> will deal with conflicts with existing rows in the database:
li11-9-1-1 = <code>ReplicationMode.IGNORE</code>: ignores the object when there is an existing database row with the same identifier
li11-9-1-2 = <code>ReplicationMode.OVERWRITE</code>: overwrites any existing database row with the same identifier
li11-9-1-3 = <code>ReplicationMode.EXCEPTION</code>: throws an exception if there is an existing database row with the same identifier
li11-9-1-4 = <code>ReplicationMode.LATEST_VERSION</code>: overwrites the row if its version number is earlier than the version number of the object, or ignore the object otherwise
p11-9-3 = Usecases for this feature include reconciling data entered into different database instances, upgrading system configuration information during product upgrades, rolling back changes made during non-ACID transactions and more.

#		**********************************************************************************************************
#		11.10. Flushing the Session
#		**********************************************************************************************************

title11-10 = 11.10. Flushing the Session
p11-10-1 = Sometimes the Session will execute the SQL statements needed to synchronize the JDBC connection's state with the state of objects held in memory. This process, called <code>flush</code>, occurs by default at the following points:
li11-10-1-1 = before some query executions
li11-10-1-2 = from <code>org.hibernate.Transaction.commit()</code>
li11-10-1-3 = from <code>Session.flush()</code>
p11-10-2 = The SQL statements are issued in the following order:
li11-10-2-1 = all entity insertions in the same order the corresponding objects were saved using <code>Session.save()</code>
li11-10-2-2 = all entity updates
li11-10-2-3 = all collection deletions
li11-10-2-4 = all collection element deletions, updates and insertions
li11-10-2-5 = all collection insertions
li11-10-2-6 = all entity deletions in the same order the corresponding objects were deleted using <code>Session.delete()</code>
p11-10-3 = An exception is that objects using <code>native</code> ID generation are inserted when they are saved.
p11-10-4 = Except when you explicitly <code>flush()</code>, there are absolutely no guarantees about when the Session executes the JDBC calls, only the order in which they are executed. However, Hibernate does guarantee that the <code>Query.list(..)</code> will never return stale or incorrect data.
p11-10-5 = It is possible to change the default behavior so that flush occurs less frequently. The FlushMode class defines three different modes: only flush at commit time when the Hibernate Transaction API is used, flush automatically using the explained routine, or never flush unless <code>flush()</code> is called explicitly. The last mode is useful for long running units of work, where a Session is kept open and disconnected for a long time (see <a href="#c13-3-2">Section 13.3.2, \u201CExtended session and automatic versioning\u201D</a>).
p11-10-6 = During flush, an exception might occur (e.g. if a DML operation violates a constraint). Since handling exceptions involves some understanding of Hibernate's transactional behavior, we discuss it in <a href="#c13">Chapter 13, Transactions and Concurrency</a>.

#		**********************************************************************************************************
#		11.11. Transitive persistence
#		**********************************************************************************************************

title11-11 = 11.11. Transitive persistence
p11-11-1 = It is quite cumbersome to save, delete, or reattach individual objects, especially if you deal with a graph of associated objects. A common case is a parent/child relationship. Consider the following example:
p11-11-2 = If the children in a parent/child relationship would be value typed (e.g. a collection of addresses or strings), their life cycle would depend on the parent and no further action would be required for convenient "cascading" of state changes. When the parent is saved, the value-typed child objects are saved and when the parent is deleted, the children will be deleted, etc. This works for operations such as the removal of a child from the collection. Since value-typed objects cannot have shared references, Hibernate will detect this and delete the child from the database.
p11-11-3 = Now consider the same scenario with parent and child objects being entities, not value-types (e.g. categories and items, or parent and child cats). Entities have their own life cycle and support shared references. Removing an entity from the collection does not mean it can be deleted), and there is by default no cascading of state from one entity to any other associated entities. Hibernate does not implement persistence by reachability by default.
p11-11-4 = For each basic operation of the Hibernate session - including <code>persist()</code>, <code>merge()</code>, <code>saveOrUpdate()</code>, <code>delete()</code>, <code>lock()</code>, <code>refresh()</code>, <code>evict()</code>, <code>replicate()</code> - there is a corresponding cascade style. Respectively, the cascade styles are named create, merge, save-update, delete, lock, refresh, evict, replicate. If you want an operation to be cascaded along an association, you must indicate that in the mapping document. For example:
p11-11-5 = Cascade styles my be combined:
p11-11-6 = You can even use <code>cascade="all"</code> to specify that all operations should be cascaded along the association. The default <code>cascade="none"</code> specifies that no operations are to be cascaded.
p11-11-7 = In case you are using annotatons you probably have noticed the cascade attribute taking an array of CascadeType as a value. The cascade concept in JPA is very is similar to the transitive persistence and cascading of operations as described above, but with slightly different semantics and cascading types:
li11-11-1-1 = <code>CascadeType.PERSIST</code>: cascades the persist (create) operation to associated entities <code>persist()</code> is called or if the entity is managed
li11-11-1-2 = <code>CascadeType.MERGE</code>: cascades the merge operation to associated entities if <code>merge()</code> is called or if the entity is managed
li11-11-1-3 = <code>CascadeType.REMOVE</code>: cascades the remove operation to associated entities if <code>delete()</code> is called
li11-11-1-4 = <code>CascadeType.REFRESH</code>: cascades the refresh operation to associated entities if <code>refresh()</code> is called
li11-11-1-5 = <code>CascadeType.DETACH</code>: cascades the detach operation to associated entities if <code>detach()</code> is called
li11-11-1-6 = <code>CascadeType.ALL</code>: all of the above
nc11-11-1 = CascadeType.ALL also covers Hibernate specific operations like save-update, lock etc...
p11-11-8 = A special cascade style, delete-orphan, applies only to one-to-many associations, and indicates that the <code>delete()</code> operation should be applied to any child object that is removed from the association. Using annotations there is no <code>CascadeType.DELETE-ORPHAN</code> equivalent. Instead you can use the attribute orphanRemoval as seen in <a href="#example-one-to-many-with-orphan-removal">Example 11.4, \u201C@OneToMany with orphanRemoval\u201D</a>. If an entity is removed from a <code>@OneToMany</code> collection or an associated entity is dereferenced from a <code>@OneToOne</code> association, this associated entity can be marked for deletion if orphanRemoval is set to true.
p11-11-9 = Recommendations:
li11-11-2-1 = It does not usually make sense to enable cascade on a many-to-one or many-to-many association. In fact the <code>@ManyToOne</code> and <code>@ManyToMany</code> don't even offer a orphanRemoval attribute. Cascading is often useful for one-to-one and one-to-many associations.
li11-11-2-2 = If the child object's lifespan is bounded by the lifespan of the parent object, make it a life cycle object by specifying cascade="all,delete-orphan" (<code>@OneToMany(cascade=CascadeType.ALL, orphanRemoval=true)</code>).
li11-11-2-3 = Otherwise, you might not need cascade at all. But if you think that you will often be working with the parent and children together in the same transaction, and you want to save yourself some typing, consider using <code>cascade="persist,merge,save-update"</code>.
p11-11-10 = Mapping an association (either a single valued association, or a collection) with <code>cascade="all"</code> marks the association as a parent/child style relationship where save/update/delete of the parent results in <code>save/update/delete</code> of the child or children.
p11-11-11 = Furthermore, a mere reference to a child from a persistent parent will result in save/update of the child. This metaphor is incomplete, however. A child which becomes unreferenced by its parent is not automatically deleted, except in the case of a one-to-many association mapped with <code>cascade="delete-orphan"</code>. The precise semantics of cascading operations for a <code>parent/child</code> relationship are as follows:
li11-11-3-1 = If a parent is passed to <code>persist()</code>, all children are passed to <code>persist()</code> 
li11-11-3-2 = If a parent is passed to <code>merge()</code>, all children are passed to <code>merge()</code>
li11-11-3-3 = If a parent is passed to <code>save()</code>, <code>update()</code> or <code>saveOrUpdate()</code>, all children are passed to <code>saveOrUpdate()</code>
li11-11-3-4 = If a transient or detached child becomes referenced by a persistent parent, it is passed to <code>saveOrUpdate()</code>
li11-11-3-5 = If a parent is deleted, all children are passed to <code>delete()</code>
li11-11-3-6 = If a child is dereferenced by a persistent parent, nothing special happens - the application should explicitly delete the child if necessary - unless <code>cascade="delete-orphan"</code>, in which case the "orphaned" child is deleted.
p11-11-12 = Finally, note that cascading of operations can be applied to an object graph at call time or at flush time. All operations, if enabled, are cascaded to associated entities reachable when the operation is executed. However, <code>save-update</code> and <code>delete-orphan</code> are transitive for all associated entities reachable during flush of the Session.

#		**********************************************************************************************************
#		11.12. Using metadata
#		**********************************************************************************************************

title11-12 = 11.12. Using metadata
p11-12-1 = Hibernate requires a rich meta-level model of all entity and value types. This model can be useful to the application itself. For example, the application might use Hibernate's metadata to implement a "smart" deep-copy algorithm that understands which objects should be copied (eg. mutable value types) and which objects that should not (e.g. immutable value types and, possibly, associated entities).
p11-12-2 = Hibernate exposes metadata via the <code>ClassMetadata</code> and <code>CollectionMetadata</code> interfaces and the Type hierarchy. Instances of the metadata interfaces can be obtained from the <code>SessionFactory</code>.



















