
#		**********************************************************************************************************
#		Chapter 10. Inheritance mapping
#		**********************************************************************************************************

title10 = Chapter 10. Inheritance mapping

#		**********************************************************************************************************
#		10.1. The three strategies
#		**********************************************************************************************************

title10-1 = 10.1. The three strategies
p10-1-1 = Hibernate supports the three basic inheritance mapping strategies:
li10-1-1-1 = table per class hierarchy
li10-1-1-2 = table per subclass
li10-1-1-3 = table per concrete class
p10-1-2 = In addition, Hibernate supports a fourth, slightly different kind of polymorphism:
li10-1-2-1 = implicit polymorphism
p10-1-3 = It is possible to use different mapping strategies for different branches of the same inheritance hierarchy. You can then make use of implicit polymorphism to achieve polymorphism across the whole hierarchy. However, Hibernate does not support mixing <code>&lt;subclass&gt;</code>, <code>&lt;joined-subclass&gt;</code> and <code>&lt;union-subclass&gt;</code> mappings under the same root <code>&lt;class&gt;</code> element. It is possible to mix together the table per hierarchy and table per subclass strategies under the the same <code>&lt;class&gt;</code> element, by combining the <code>&lt;subclass&gt;</code> and <code>&lt;join&gt;</code> elements (see below for an example).
p10-1-4 = It is possible to define <code>subclass</code>, <code>union-subclass</code>, and <code>joined-subclass</code> mappings in separate mapping documents directly beneath hibernate-mapping. This allows you to extend a class hierarchy by adding a new mapping file. You must specify an extends attribute in the subclass mapping, naming a previously mapped superclass. Previously this feature made the ordering of the mapping documents important. Since Hibernate, the ordering of mapping files is irrelevant when using the extends keyword. The ordering inside a single mapping file still needs to be defined as superclasses before subclasses.

#		**********************************************************************************************************
#		10.1.1. Table per class hierarchy
#		**********************************************************************************************************

title10-1-1 = 10.1.1. Table per class hierarchy
p10-1-1-1 = Suppose we have an interface <code>Payment</code> with the implementors <code>CreditCardPayment</code>, <code>CashPayment</code>, and <code>ChequePayment</code>. The table per hierarchy mapping would display in the following way:
p10-1-1-2 = Exactly one table is required. There is a limitation of this mapping strategy: columns declared by the subclasses, such as <code>CCTYPE</code>, cannot have NOT NULL constraints.

#		**********************************************************************************************************
#		10.1.2. Table per subclass
#		**********************************************************************************************************

title10-1-2 = 10.1.2. Table per subclass
p10-1-2-1 = A table per subclass mapping looks like this:
p10-1-2-2 = Four tables are required. The three subclass tables have primary key associations to the superclass table so the relational model is actually a one-to-one association.

#		**********************************************************************************************************
#		10.1.3. Table per subclass: using a discriminator
#		**********************************************************************************************************

title10-1-3 = 10.1.3. Table per subclass: using a discriminator
p10-1-3-1 = Hibernate's implementation of table per subclass does not require a discriminator column. Other object/relational mappers use a different implementation of table per subclass that requires a type discriminator column in the superclass table. The approach taken by Hibernate is much more difficult to implement, but arguably more correct from a relational point of view. If you want to use a discriminator column with the table per subclass strategy, you can combine the use of <code>&lt;subclass&gt;</code> and <code>&lt;join&gt;</code>, as follows:
p10-1-3-2 = The optional <code>fetch="select"</code> declaration tells Hibernate not to fetch the ChequePayment subclass data using an outer join when querying the superclass.

#		**********************************************************************************************************
#		10.1.4. Mixing table per class hierarchy with table per subclass
#		**********************************************************************************************************

title10-1-4 = 10.1.4. Mixing table per class hierarchy with table per subclass
p10-1-4-1 = You can even mix the table per hierarchy and table per subclass strategies using the following approach:
p10-1-4-2 = For any of these mapping strategies, a polymorphic association to the root Payment class is mapped using <code>&lt;many-to-one&gt;</code>.

#		**********************************************************************************************************
#		10.1.5. Table per concrete class
#		**********************************************************************************************************

title10-1-5 = 10.1.5. Table per concrete class
p10-1-5-1 = There are two ways we can map the table per concrete class strategy. First, you can use <code>&lt;union-subclass&gt;</code>.
p10-1-5-2 = Three tables are involved for the subclasses. Each table defines columns for all properties of the class, including inherited properties.
p10-1-5-3 = The limitation of this approach is that if a property is mapped on the superclass, the column name must be the same on all subclass tables. The identity generator strategy is not allowed in union subclass inheritance. The primary key seed has to be shared across all unioned subclasses of a hierarchy.
p10-1-5-4 = If your superclass is abstract, map it with <code>abstract="true"</code>. If it is not abstract, an additional table (it defaults to PAYMENT in the example above), is needed to hold instances of the superclass.

#		**********************************************************************************************************
#		10.1.6. Table per concrete class using implicit polymorphism
#		**********************************************************************************************************

title10-1-6 = 10.1.6. Table per concrete class using implicit polymorphism
p10-1-6-1 = An alternative approach is to make use of implicit polymorphism:
p10-1-6-2 = Notice that the Payment interface is not mentioned explicitly. Also notice that properties of Payment are mapped in each of the subclasses. If you want to avoid duplication, consider using XML entities (for example, [ &lt;!ENTITY allproperties SYSTEM "allproperties.xml"&gt; ] in the DOCTYPE declaration and %allproperties; in the mapping).
p10-1-6-3 = The disadvantage of this approach is that Hibernate does not generate SQL UNIONs when performing polymorphic queries.
p10-1-6-4 = For this mapping strategy, a polymorphic association to Payment is usually mapped using <code>&lt;any&gt;</code>.

#		**********************************************************************************************************
#		10.1.7. Mixing implicit polymorphism with other inheritance mappings
#		**********************************************************************************************************

title10-1-7 = 10.1.7. Mixing implicit polymorphism with other inheritance mappings
p10-1-7-1 = Since the subclasses are each mapped in their own <code>&lt;class&gt;</code> element, and since Payment is just an interface), each of the subclasses could easily be part of another inheritance hierarchy. You can still use polymorphic queries against the Payment interface.
p10-1-7-2 = Once again, Payment is not mentioned explicitly. If we execute a query against the Payment interface, for example from Payment, Hibernate automatically returns instances of <code>CreditCardPayment</code> (and its subclasses, since they also implement Payment), CashPayment and ChequePayment, but not instances of NonelectronicTransaction.

#		**********************************************************************************************************
#		10.2. Limitations
#		**********************************************************************************************************

title10-2 = 10.2. Limitations
p10-2-1 = There are limitations to the "implicit polymorphism" approach to the table per concrete-class mapping strategy. There are somewhat less restrictive limitations to <code>&lt;union-subclass&gt;</code> mappings.
p10-2-2 = The following table shows the limitations of table per concrete-class mappings, and of implicit <code>polymorphism</code>, in Hibernate.
p10-2-3 = <strong>Table 10.1. Features of inheritance mappings</strong>
th10-2-1-1 = Inheritance strategy
th10-2-1-2 = Polymorphic many-to-one
th10-2-1-3 = Polymorphic one-to-one
th10-2-1-4 = Polymorphic one-to-many
th10-2-1-5 = Polymorphic many-to-many
th10-2-1-6 = Polymorphic load()/get()
th10-2-1-7 = Polymorphic queries
th10-2-1-8 = Polymorphic joins
th10-2-1-9 = Outer join fetching

td10-2-1-1 = table per class-hierarchy
td10-2-1-2 = &lt;many-to-one&gt;
td10-2-1-3 = &lt;one-to-one&gt;
td10-2-1-4 = &lt;one-to-many&gt;
td10-2-1-5 = &lt;many-to-many&gt;
td10-2-1-6 = s.get(Payment.class, id)
td10-2-1-7 = from Payment p
td10-2-1-8 = from Order o join o.payment p
td10-2-1-9 = supported

td10-2-1-10 = table per subclass
td10-2-1-11 = &lt;many-to-one&gt;
td10-2-1-12 = &lt;one-to-one&gt;
td10-2-1-13 = &lt;one-to-many&gt;
td10-2-1-14 = &lt;many-to-many&gt;
td10-2-1-15 = s.get(Payment.class, id)
td10-2-1-16 = from Payment p
td10-2-1-17 = from Order o join o.payment p
td10-2-1-18 = supported

td10-2-1-19 = table per concrete-class (union-subclass)
td10-2-1-20 = &lt;many-to-one&gt;
td10-2-1-21 = &lt;one-to-one&gt;
td10-2-1-22 = &lt;one-to-many&gt;<br/>(for inverse="true" only)
td10-2-1-23 = &lt;many-to-many&gt;
td10-2-1-24 = s.get(Payment.class, id)
td10-2-1-25 = from Payment p
td10-2-1-26 = from Order o join o.payment p
td10-2-1-27 = supported

td10-2-1-28 = table per concrete class (implicit polymorphism)
td10-2-1-29 = &lt;any&gt;
td10-2-1-30 = not supported
td10-2-1-31 = not supported
td10-2-1-32 = &lt;many-to-many&gt;
td10-2-1-33 = s.createCriteria(Payment.class).add( Restrictions.idEq(id) ).uniqueResult()
td10-2-1-34 = from Payment p
td10-2-1-35 = not supported
td10-2-1-36 = not supported












